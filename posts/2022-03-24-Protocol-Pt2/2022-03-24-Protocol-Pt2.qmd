---
title: "Metabolic Phenotyping Protocol Part 2"
description: "Implementing the Statistical Analysis in Metabolic Phenotyping Protocol of Blaise *et al.*"
date: "2022-03-24"
categories: [R, ChemoSpec, Metabolomics]
bibliography: REFS.bib
---

```{r SetUp, echo = FALSE, eval = TRUE, results = "hide", warning = FALSE, message = FALSE}

# R options & configuration:
set.seed(9)
rm(list = ls())
suppressPackageStartupMessages(library("ChemoSpec"))
suppressPackageStartupMessages(library("ggplot2"))
suppressPackageStartupMessages(library("knitr"))

descCS <- packageDescription("ChemoSpec")
descCSU <- packageDescription("ChemoSpecUtils")

options(ChemoSpecGraphics = "ggplot2")

# Stuff specifically for knitr:

# Hook for figure size control
knitr::opts_hooks$set(sq.fig = function(options) {

  if (isFALSE(options$sq.fig)) {
    # custom fig dimensions given, use w/o further delay
    if ((!is.null(options$fig.width)) & (!is.null(options$fig.height))) return(options)
    # otherwise set the default wide aspect ratio
    if ((is.null(options$fig.width)) & (is.null(options$fig.height))) {
      options$fig.width = 6
      options$fig.height = 3.5
    }
  }

  if (isTRUE(options$sq.fig)) {
    options$fig.width = 5
    options$fig.height = 5
  }
  options
})

# choices here are designed to work with the hook
knitr::opts_chunk$set(fig.align = "center", sq.fig = FALSE, tidy = TRUE,
  fig.width = NULL, fig.height = NULL, out.width = "80%", cache = TRUE)
```

Part 1 of this series is [here](https://chemospec.org/posts/2022-02-01-Protocol-Pt1/).

If you aren't familiar with `ChemoSpec`, you might wish to look at the introductory [vignette](https://bryanhanson.github.io/ChemoSpec/articles/ChemoSpec.html) first.

*In this series of posts we are following the protocol as described in the printed publication closely [@Blaise2021].  The authors have also provided a [Jupyter notebook](https://github.com/Gscorreia89/chemometrics-tutorials).  This is well worth your time, even if Python is not your preferred lanaguage, as there are additional examples and discussion for study.*

# Read in the Data

I saved the `Spectra` object we created in Part 1 so we can read it and remind ourselves of what's in it. Due to the compression in R's `save` function the data takes up 4.9 Mb on disk.  The original csv files total about 62 Mb.

```{r getData}
library("ChemoSpec")
load("Worms.Rdata") # restores the "Worms" Spectra object
sumSpectra(Worms)
```

# Exploratory Data Analysis

We will follow the steps described in the published protocol closely.

## Normalization & Scaling

Apply PQN normalization; scaling in `ChemoSpec` is applied at the PCA stage (next).

```{r norm}
Worms <- normSpectra(Worms) # PQN is the default
```

## PCA

Conduct classical PCA using autoscaling.[^1]  Note that `ChemoSpec` includes several different variants of PCA, each with scaling options.  See the introductory vignette for more details.  For more about what PCA is and how it works, please see the [LearnPCA](https://bryanhanson.github.io/LearnPCA/) package.

```{r pca}
c_pca <- c_pcaSpectra(Worms, choice = "autoscale") # no scaling is the default
```

### Components to Retain

A key question at this stage is how many components are needed to describe the data set.  Keep in mind that this depends on the choice of scaling. @fig-screeAlt and @fig-screeTrad are two different types of scree plots, which show the residual variance.  This is the R^2^~x~ value in the protocol (see protocol Figure 7a).  Another approach to answering this question is to do a cross-validated PCA.[^3]  The results are shown in @fig-cv-pca.  These are the Q^2^~x~ values in protocol Figure 7a.  All of these ways of looking at the variance explained suggest that retaining three or possibly four PCs is adequate.

```{r fig-screeAlt, fig.cap = "Scree plot (recommended style)."}
plotScree(c_pca)
```

```{r fig-screeTrad, fig.cap = "Scree plot (traditional style)."}
plotScree(c_pca, style = "trad")
```

```{r fig-cv-pca, fig.cap = "Scree plot using cross validation.", sq.fig = TRUE}
cv_pcaSpectra(Worms, choice = "autoscale", pcs = 10)
```

### Score Plots

Next, examine the score plots (@fig-scores12, @fig-scores23).  In these plots, each data point is colored by its group membership (keep in mind this is completely independent of the PCA calculation).  In addition, robust confidence ellipses are shown for each group.  Inspection of these plots is one way to identify potential outliers. The other use is of course to see if the sample classes separate, and by how much.

Examination of these plots shows that separation by classes has not really been achieved using autoscaling. In @fig-scores12 we see four clear outlier candidates (samples 37, 101, 107, and 118).  In @fig-scores23 we see some of these samples and should probably add sample 114 for a total of five candidates.

```{r fig-scores12, sq.fig = TRUE, fig.cap = "Score plot for PCs 1 and 2. Compare to protocol figure 7a."}
p <- plotScores(Worms, c_pca, pcs = 1:2, ellipse = "rob", tol = 0.02)
p
```

```{r fig-scores23, sq.fig = TRUE, fig.cap = "Score plot for PCS 2 and 3."}
p <- plotScores(Worms, c_pca, pcs = 2:3, ellipse = "rob", leg.loc = "topright", tol = 0.02)
p
```

To label more sample points, you can increase the value of the argument `tol`.

### Outliers

The protocol recommends plotting Hotelling's *T*^2^ ellipse for the entire data set; this is not implemented in `ChemoSpec` but we can easily do it if we are using `ggplot2` plots (which is the default in `ChemoSpec`).  We need the `ellipseCoord` function from the `HotellingsEllipse` package.[^2]

```{r fig-hotelling1, sq.fig = TRUE, fig.cap = "Score plot for PCs 1 and 2 with Hotelling's *T*^2^ ellipse. Compare to protocol figure 7a." }
source("ellipseCoord.R")
xy_coord <- ellipseCoord(as.data.frame(c_pca$x),
  pcx = 1, pcy = 2,
  conf.limit = 0.95, pts = 500)
p <- plotScores(Worms, c_pca, which = 1:2, ellipse = "none", tol = 0.02)
p <- p + geom_path(data = xy_coord, aes(x = x, y = y)) +
          scale_color_manual(values = "black")
p
```

We can see many of the same outliers by this approach as we saw in @fig-scores12 and @fig-scores23.


Another way to identify outliers is to use the approach described in @Filzmoser2009 section 3.7.3.  @fig-diagOD and  @fig-diagSD give the plots. Please see Filzmoser for the details, but any samples that are above the plotted threshold line are candidate outliers, and any samples above the threshold in *both* plots should be looked at very carefully.  Though we are using classical PCA, Filzmoser recommends using these plots with robust PCA.  These plots are a better approach than "eye balling it" on the score plots.

```{r fig-diagOD, sq.fig = TRUE, fig.cap = "Orthogonal distance plot based on the first three PCs."}
p <- pcaDiag(Worms, c_pca, plot = "OD")
p
```

```{r fig-diagSD, sq.fig = TRUE, fig.cap = "Score distance plot based on the first three PCs."}
p <- pcaDiag(Worms, c_pca, plot = "SD")
p
```

Comparison of these plots suggest that samples 37, 101, 107, 114 and 118 are likely outliers.  These spectra should be examined to see if the reason for their outlyingness can be deduced. If good reason can be found, they can be removed as follows.[^4]

```{r removeOutliers}
Worms2 <- removeSample(Worms,
  rem.sam = c("37_", "101_", "107_", "114_", "118_"))
```

At this point one should repeat the PCA, score plots and diagnostic plots to get a good look at how removing these samples affected the results. Those tasks are left to the reader.

<!-- One thing the protocol does not explicitly discuss is an inspection of the loadings.  This is useful in order to see if any particular frequencies are driving the separation of the samples in the score plot. For the sake of completeness, we'll go ahead and plot the loadings. See @fig-loadings. From this plot it is clear that the peaks above $\delta$ 5.0 are not contributing much to differentiating the samples.  One could consider removing these peaks from the analysis, but we'll leave them for now. -->

```{r fig-loadings, sq.fig = TRUE, fig.cap = "Loadings for PC1 and PC2.", eval = FALSE, echo = FALSE}
p <- plotLoadings(Worms, c_pca, loads = 1:2)
p
```

We will continue in the next post with a discussion of loadings.

```{r saveResults, echo = FALSE}
save(Worms2, file = "Worms2.RData")
```
---

This post was created using `ChemoSpec` version `r descCS$Version` and `ChemoSpecUtils` version `r descCSU$Version`.

[^1]: Without scaling, the largest peaks will drive the separation in the scores plot.
[^2]: We are sourcing in a corrected version of the function, as the CRAN version has a small [error](https://github.com/ChristianGoueguel/HotellingEllipse/issues/2) in it.
[^3]: Be sure you have `ChemoSpec` 6.1.3 or higher, as `cv_pcaSpectra` had a bug in it!  One benefit of writing these posts is finding lame bugs...
[^4]: The [Jupyter notebook](https://github.com/Gscorreia89/chemometrics-tutorials) has details about this.
