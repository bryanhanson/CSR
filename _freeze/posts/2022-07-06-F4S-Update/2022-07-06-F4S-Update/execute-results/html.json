{
  "hash": "465aa99b4f978c746b222e5fca9f8bbf",
  "result": {
    "markdown": "---\ntitle: \"FOSS4Spectroscopy: R vs Python\"\ndescription: \"Now with more Python and Julia packages, and improved workflow\"\ndate: \"2022-07-06\"\ncategories: [FOSS, R, Python, Julia, Github, PyPi]\n---\n\n::: {.cell}\n\n:::\n\nIf you aren't familiar with it, the [FOSS for Spectroscopy web site](https://bryanhanson.github.io/FOSS4Spectroscopy/) lists Free and Open Source Software for spectroscopic applications.  The collection is of course never really complete, and your package suggestions are most welcome ([how to contribute](https://github.com/bryanhanson/FOSS4Spectroscopy)).  My methods for finding packages are improving and at this point the major repositories have been searched reasonably well.\n\nA few days ago I pushed a major update, and **at this point `Python` packages outnumber `R` packages  more than two to one**.  The update was made possible because I recently had time to figure out how to search the [PyPi.org](https://pypi.org/) site automatically.\n\nIn a previous [post](https://chemospec.org/posts/2021-04-19-Search-GH-Topics/2021-04-19-Search-GH-Topics.html) I explained the methods I used to find packages related to spectroscopy. These have been updated considerably and the rest of this post will cover the updated methods.\n\n## Repos & Topics\n\nThere are four places I search for packages related to spectroscopy.[^1]\n\n* [CRAN](https://cran.r-project.org/), searched manually using the [`packagefinder`](https://cran.r-project.org/web/packages/packagefinder/index.html) package.[^2]\n* Github, searched using custom functions and scripts, detailed below.\n* [PyPi.org](https://pypi.org/), searched as for Github.\n* [juliapackages.org](https://juliapackages.com/), searched manually.\n\nThe topics I search are as follows:\n\n* NMR\n* EPR\n* ESR\n* UV\n* VIS\n* spectrophotometry\n* NIR (IR search terms overlap a lot, and also generate many false positives dealing with IR communications, e.g. TV remotes)\n* FT-IR\n* FTIR\n* Raman\n* XRF\n* XAS\n* LIBS (on PyPi.org one must use \"laser induced breakdown spectroscopy\" because LIBS is the name of a popular software and generates hundreds of false positives)\n\n\n## Searching CRAN\n\nI search CRAN using `packagefinder`; the process is quite straightforward and won't be covered here. However, it is not an automated process (I should probably work on that).\n\n## Searching Github\n\nThe broad approach used to search Github is the same as described in the original [post](https://chemospec.org/posts/2021-04-19-Search-GH-Topics/2021-04-19-Search-GH-Topics.html).  However, the scripts have been refined and updated, and now exist as functions in a new package I created called `webu` (for \"webutilities\", but that name is taken on CRAN).  The repo is [here](https://github.com/bryanhanson/webu).  `webu` is not on CRAN and I don't currently intend to put it there, but you can install from the repo of course if you wish to try it out.\n\nSearching Github is now carried out by a supervising script called `/utilities/run_searches.R` (in the `FOSS4Spectroscopy` [repo](https://github.com/bryanhanson/FOSS4Spectroscopy)).  The script contains some notes about finicky details, but is pretty simple overall and should be easy enough to follow.\n\n## Searching PyPi.org\n\nUnlike Github, it is not necessary to authenticate to use the PyPi.org API.  That makes things simpler than the Github case.  The needed functions are in `webu` and include some deliberate delays so as to not overload their servers.  As for Github, searches are supervised by `/utilities/run_searches.R`.\n\nOne thing I observed at PyPi.org is that authors do not always fill out all the fields that PyPi.org can accept, which means some fields are `NULL` and we have to trap for that possibility.  Package information is accessed via a JSON record, for instance the entry for `nmrglue` can be seen [here](https://pypi.org/pypi/nmrglue/json).  This package is pretty typical in that the `author_email` field is filled out, but the `maintainer_email` field is not (they are presumably the same).  If one considers these JSON files to be analogous to DESCRIPTION in `R` packages, it looks like there is less oversight on PyPi.org compared to CRAN.\n\n## Searching Julia\n\nJulia packages are readily searched manually at [juliapackages.org](https://juliapackages.com/).\n\n## Cleaning & Final Vetting\n\nThe raw results from the searches described above still need a lot of inspection and cleaning to be usable.  The PyPi.org and Github results are saved in an Excel worksheet with the relevant URLs.  These links can be followed to determine the suitability of each package.  In the `/Utilities` folder there are additional scripts to remove entries that are already in the main database (FOSS4Spec.xlsx), as well as to check the names of the packages: Python authors and/or policies seem to lead to cases where different packages can have names differing by case, but also authors are sometimes sloppy when referring to their own packages, sometimes using `mypkg` and at other times `myPkg` to refer to the same package.\n\n[^1]: Once in a while users submit their own package to the repo, and I also find interesting packages in my literature reading.\n[^2]: `packagefinder` has recently been archived, but hopefully will be back soon.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}