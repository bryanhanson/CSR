{
  "hash": "8b676a851fcd86b0b513977283f6ba78",
  "result": {
    "markdown": "---\ntitle: \"Do You have Stale Imports or Suggests?\"\ndescription: \"Hints For Package Developers\"\ndate: \"2022-02-09\"\ncategories: [R, Utilities, Developers]\n---\n\n::: {.cell}\n\n:::\n\nI've been developing packages in `R` for over a decade now.  When adding new features to a package, I often import functions from another package, and of course that package goes in the `Imports:` field of the `DESCRIPTION` file.  Later, I might change my approach entirely and no longer need that package.  Do I remember to remove it from `DESCRIPTION`?  Generally not.  The same thing happens when writing a new vignette, and it can happen with the `Suggests:` field as well.  It can also happen when one splits a packages into several smaller packages.  If one forgets to delete a package from the `DESCRIPTION` file, the dependencies become bloated, because all the imported and suggested packages have to be available to install the package.  This adds overhead to the project, and increases the possibility of a namespace conflict.\n\nIn fact this just happened to me *again!* The author of a package I had in `Suggests:` wrote to me and let me know their package would be archived.  It was an easy enough fix for me, as it was a \"stale\" package in that I was no longer using it.  I had added it for a vignette which I later deleted, as I decided a series of blog posts was a better approach.\n\nSo I decided to write a little function to check for such stale `Suggests:` and `Import:` entries.  This post is about that function.  As far as I can tell there is no built-in function for this purpose, and CRAN does not check for stale entries.  So it was worth my time to automate the process.[^1]\n\nThe first step is to read in the `DESCRIPTION` file for the package (so we want our working directory to be the top level of the package).  There is a built in function for this.  We'll use the `DESCRIPTION` file from the `ChemoSpec` package as a demonstration.\n\n::: {.cell}\n\n```{.r .cell-code}\n# setwd(\"...\") # set to the top level of the package\ndesc <- read.dcf(\"DESCRIPTION\", all = TRUE)\n```\n:::\n\nThe argument `all = TRUE` is a bit odd in that it has a particular purpose (see `?read.dcf`) which isn't really important here, but has the side effect of returning a data frame, which makes our job simpler.  Let's look at what is returned.\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(desc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t1 obs. of  18 variables:\n $ Package         : chr \"ChemoSpec\"\n $ Type            : chr \"Package\"\n $ Title           : chr \"Exploratory Chemometrics for Spectroscopy\"\n $ Version         : chr \"6.1.2\"\n $ Date            : chr \"2022-02-08\"\n $ Authors@R       : chr \"c(\\nperson(\\\"Bryan A.\\\", \\\"Hanson\\\",\\nrole = c(\\\"aut\\\", \\\"cre\\\"), email =\\n\\\"hanson@depauw.edu\\\",\\ncomment = c(\"| __truncated__\n $ Description     : chr \"A collection of functions for top-down exploratory data analysis\\nof spectral data including nuclear magnetic r\"| __truncated__\n $ License         : chr \"GPL-3\"\n $ Depends         : chr \"R (>= 3.5),\\nChemoSpecUtils (>= 1.0)\"\n $ Imports         : chr \"plyr,\\nstats,\\nutils,\\ngrDevices,\\nreshape2,\\nreadJDX (>= 0.6),\\npatchwork,\\nggplot2,\\nplotly,\\nmagrittr\"\n $ Suggests        : chr \"IDPmisc,\\nknitr,\\njs,\\nNbClust,\\nlattice,\\nbaseline,\\nmclust,\\npls,\\nclusterCrit,\\nR.utils,\\nRColorBrewer,\\nser\"| __truncated__\n $ URL             : chr \"https://bryanhanson.github.io/ChemoSpec/\"\n $ BugReports      : chr \"https://github.com/bryanhanson/ChemoSpec/issues\"\n $ ByteCompile     : chr \"TRUE\"\n $ VignetteBuilder : chr \"knitr\"\n $ Encoding        : chr \"UTF-8\"\n $ RoxygenNote     : chr \"7.1.2\"\n $ NeedsCompilation: chr \"no\"\n```\n:::\n:::\n\nWe are interested in the `Imports` and `Suggests` elements.  Let's look more closely.\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(desc$Imports)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"plyr,\\nstats,\\nutils,\\ngrDevices,\\nreshape2,\\nreadJDX (>= 0.6),\\npatchwork,\\nggplot2,\\nplotly,\\nmagrittr\"\n```\n:::\n:::\n\nYou can see there are a bunch of newlines in there (`\\n`), along with some version specifications, in parentheses.  We need to clean this up so we have a simple list of the packages as a vector.  For clean up we'll use the following helper function.\n\n::: {.cell}\n\n```{.r .cell-code}\nclean_up <- function(string) {\n  string <- gsub(\"\\n\", \"\", string) # remove newlines\n  string <- gsub(\"\\\\(.+\\\\)\", \"\", string) # remove parens & anything within them\n  string <- unlist(strsplit(string, \",\")) # split the long string into pieces\n  string <- trimws(string) # remove any white space around words\n}\n```\n:::\n\nAfter we apply this to the raw results, we have what we are after, a clean list of imported packages.\n\n::: {.cell}\n\n```{.r .cell-code}\nimp <- clean_up(desc$Imports)\nimp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"plyr\"      \"stats\"     \"utils\"     \"grDevices\" \"reshape2\"  \"readJDX\"  \n [7] \"patchwork\" \"ggplot2\"   \"plotly\"    \"magrittr\" \n```\n:::\n:::\n\nNext, we can search the entire package looking for these package names to see if they are used in the package.  They might appear in import statements, vignettes, code and so forth, so it's not sufficient to just look at code.  This is a job for `grep`, but we'll call `grep` from within `R` so that we don't have to use the command line and transfer the results to `R`, that gets messy and is error-prone.\n\n::: {.cell}\n\n```{.r .cell-code}\nif (length(imp) >= 1) { # Note 1\n  imp_res <- rep(\"FALSE\", length(imp)) # Boolean to keep track of whether we found a package or not\n  for (i in 1:length(imp)) {\n    args <- paste(\"-r -e '\", imp[i], \"' *\", sep = \"\") # assemble arguments for grep\n    g_imp <- system2(\"grep\", args, stdout = TRUE)\n    if (length(g_imp) > 1L) imp_res[i] <- TRUE # Note 2\n  }\n}\n```\n:::\n\n* Note 1: We ought to check if there are any imports at all. It would be a bit unusual, but it's possible to have zero imports.\n* Note 2: `g_imp` contains the results of the grep process. If there *are* imports in the package, each imported package name will be found by grep in the `DESCRIPTION` file.  That's not so interesting, so we don't count it.  For a package to be stale, it will be found in `DESCRIPTION` *but no where else*.\n\nWe can do the same process for the `Suggests:` field of `DESCRIPTION`.  And then it would be nice to present the results in a more useable form.  At this point we can put it all togther in an easy-to-use function.[^2]\n\n::: {.cell}\n\n```{.r .cell-code}\n# run from the package top level\ncheck_stale_imports_suggests <- function() {\n\n  # helper function: removes extra characters\n  # from strings read by read.dcf\n  clean_up <- function(string) {\n    string <- gsub(\"\\n\", \"\", string)\n    string <- gsub(\"\\\\(.+\\\\)\", \"\", string)\n    string <- unlist(strsplit(string, \",\"))\n    string <- trimws(string)\n  }\n\n  desc <- read.dcf(\"DESCRIPTION\", all = TRUE)\n\n  # look for use of imported packages\n  imp <- clean_up(desc$Imports)\n  if (length(imp) == 0L) message(\"No Imports: entries found\")\n  if (length(imp) >= 1) {\n    imp_res <- rep(\"FALSE\", length(imp))\n    for (i in 1:length(imp)) {\n      args <- paste(\"-r -e '\", imp[i], \"' *\", sep = \"\")\n      g_imp <- system2(\"grep\", args, stdout = TRUE)\n      # always found once in DESCRIPTION, hence > 1\n      if (length(g_imp) > 1L) imp_res[i] <- TRUE\n    }\n  }\n\n  # look for use of suggested packages\n  sug <- clean_up(desc$Suggests)\n  if (length(sug) == 0L) message(\"No Suggests: entries found\")\n  if (length(sug) >= 1) {\n    sug_res <- rep(\"FALSE\", length(sug))\n    for (i in 1:length(sug)) {\n      args <- paste(\"-r -e '\", sug[i], \"' *\", sep = \"\")\n      g_sug <- system2(\"grep\", args, stdout = TRUE)\n      # always found once in DESCRIPTION, hence > 1\n      if (length(g_sug) > 1L) sug_res[i] <- TRUE\n    }\n  }\n\n  # arrange output in easy to read format\n  role <- c(rep(\"Imports\", length(imp)), rep(\"Suggests\", length(sug)))\n\n  return(data.frame(\n    pkg = c(imp, sug),\n    role = role,\n    found = c(imp_res, sug_res)))\n}\n```\n:::\n\nApplying this function to my `ChemoSpec2D` package (as of the date of this post), we see the following output.  You can see a bunch of packages are imported but never used, so I have some work to do.  This was the result of copying the `DESCRIPTION` file from `ChemoSpec` when I started `ChemoSpec2D` and obviously I never went back and cleaned things up.\n\n\n```{.r .cell-code}\n            pkg     role found\n1          plyr  Imports  TRUE\n2         stats  Imports  TRUE\n3         utils  Imports  TRUE\n4     grDevices  Imports  TRUE\n5      reshape2  Imports  TRUE\n6       readJDX  Imports  TRUE\n7     patchwork  Imports  TRUE\n8       ggplot2  Imports  TRUE\n9        plotly  Imports  TRUE\n10     magrittr  Imports  TRUE\n11      IDPmisc Suggests  TRUE\n12        knitr Suggests  TRUE\n13           js Suggests  TRUE\n14      NbClust Suggests  TRUE\n15      lattice Suggests  TRUE\n16     baseline Suggests  TRUE\n17       mclust Suggests  TRUE\n18          pls Suggests  TRUE\n19  clusterCrit Suggests  TRUE\n20      R.utils Suggests  TRUE\n21 RColorBrewer Suggests  TRUE\n22    seriation Suggests FALSE\n23         MASS Suggests FALSE\n24   robustbase Suggests FALSE\n25         grid Suggests  TRUE\n26        pcaPP Suggests FALSE\n27     jsonlite Suggests FALSE\n28       gsubfn Suggests FALSE\n29       signal Suggests  TRUE\n30        speaq Suggests FALSE\n31     tinytest Suggests FALSE\n32   elasticnet Suggests FALSE\n33        irlba Suggests FALSE\n34         amap Suggests FALSE\n35    rmarkdown Suggests  TRUE\n36     bookdown Suggests FALSE\n37 chemometrics Suggests FALSE\n38    hyperSpec Suggests FALSE\n```\n\n[^1]: As you will see in a moment, during testing I found a bunch of stale entries I need to remove from several packages!\n[^2]: In easy to use form as a [Gist](https://gist.github.com/bryanhanson/4c8ac99903df65af9c7e11a972447bc5).",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}