<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Chemometrics and Spectroscopy Using R</title>
<link>http://chemospec.org/</link>
<atom:link href="http://chemospec.org/index.xml" rel="self" type="application/rss+xml"/>
<description>Applying chemometrics to spectroscopy using R</description>
<generator>quarto-99.9.9</generator>
<lastBuildDate>Thu, 06 Feb 2025 07:00:00 GMT</lastBuildDate>
<item>
  <title>Mastering Tough Multiplets</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2025-02-06-Multiplets/Multiiplets.html</link>
  <description><![CDATA[ 




<p>Alright, time for a little confession. I have been a chemist for nearly 40 years, and used NMR spectroscopy extensively that entire time. Somehow I have never come across the method I am about to discuss, though it has been known since the early 1990’s. Perhaps that’s because the compounds I encountered did not have peaks requiring this approach. Perhaps it is because I could figure out the structures easily enough without worrying about “nasty” multiplet details. Perhaps it is because so often we are confirming an expected structure rather than working with a complete unknown.</p>
<p>I’m talking about those multiplets we encounter that have some decent, symmetrical structure to them, but are too hard to work out exactly what is going on. Those “it almost looks like a quartet of doublets but not quite” peaks. Those “it should be a doublet of triplets but there are not enough peaks” cases.</p>
<p>The other day I saw an announcement about a 2nd edition of a book by the visually adept <a href="https://cheminfographic.wordpress.com">Roman A. Valiulin</a> called <a href="https://cheminfographic.wordpress.com/2024/12/09/nmr-multiplet-interpretation-an-infographic-walk-through-2025-2nd-edition/">NMR Multiplet Interpretation</a>. With a catnip-title like that I ordered it immediately. I have not been disappointed. It’s taught me to look at those multiplet beasts completely differently.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="http://chemospec.org/posts/2025-02-06-Multiplets/Valiulin_Cover.png" class="img-fluid figure-img" style="width:60.0%"></p>
<figcaption>Book cover</figcaption>
</figure>
</div>
<p>This book teaches an interesting method, originated by Hoye’s lab at Minnesota, that allows one to work out the values of the coupling constants in a complex, first order multiplet without thinking about structure at all.<sup>1</sup> Once you have these values, one can determine which type of multiplet is at hand. For instance, is it a doublet of triplets (dt) or a triplet of doublets (td)? Sure, if all the coupling constants are different and the resolution of the instrument is good enough, one can do this by inspection. But if the coupling constants are degenerate or almost so, or we are working with quartets and quintets, then one can end up with a rather complex pattern whose origin is not at all clear, which is when this method shines. With this information, one can then turn back to issues of structure.</p>
<p>I am thinking of this as a “coupling constant forward”<sup>2</sup> method, a way to work out those multiplets that in the past one might have been tempted to set aside as too complex to deal with.</p>
<p>This is clearly not a beginner topic in NMR. When we teach NMR to novices, we focus on using the three big pieces of information: chemical shift, area, and splitting, but of course the splitting is almost always very simple. Sometimes students get a taste of the real world when a sample has a doublet of doublets but the two central peaks come close to overlapping; they can often appreciate that with small changes in coupling constants this might look like a triplet. But at the beginning we may not even really talk much about coupling constants, and instead just talk about peak spacing and symmetry.</p>
<p>One interesting aspect of Valiulin’s presentation is he makes very clear how every multiplet is a “doublet of doublets of … of doublets” in this approach. In a J-tree diagram every splitting is a doublet until you’ve got all the coupling constants and have determined that some of them are the same, leading to overlaps in the final pattern of peaks. Using the example from the previous paragraph, a doublet of doublets becomes a triplet once the two coupling constants are the same. This sort of collapsing of peaks is surely appreciated by anyone beyond the novice level, but Valiulin provides some nice demonstrations of how this works when many more spins are involved.</p>
<p>Any of you multiplet junkies (or more so, multiplet avoiders) that haven’t seen this book should definitely get a hold of it.</p>




<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>There is no <em>n + 1</em> rule in play in this approach.↩︎</p></li>
<li id="fn2"><p>I’m coining this term here, I think it’s the right way to think about it, feel free to comment.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2025,
  author = {Hanson, Bryan},
  title = {Mastering {Tough} {Multiplets}},
  date = {2025-02-06},
  url = {http://chemospec.org/posts/2025-02-06-Multiplets/Multiiplets.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2025" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2025. <span>“Mastering Tough Multiplets.”</span> February
6, 2025. <a href="http://chemospec.org/posts/2025-02-06-Multiplets/Multiiplets.html">http://chemospec.org/posts/2025-02-06-Multiplets/Multiiplets.html</a>.
</div></div></section></div> ]]></description>
  <category>NMR</category>
  <guid>http://chemospec.org/posts/2025-02-06-Multiplets/Multiiplets.html</guid>
  <pubDate>Thu, 06 Feb 2025 07:00:00 GMT</pubDate>
</item>
<item>
  <title>EF-NMR Part 3: Receiver Software</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2024-04-17-EF-NMR-Build-3/EF-NMR-Build-3.html</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Before We Start…
</div>
</div>
<div class="callout-body-container callout-body">
<p>NMRduino is maturing rapidly! If what I’m doing is at all interesting to you, and you don’t know about the <a href="https://github.com/NMRduino/NMRduino">NMRduino Project</a> and their recent <a href="https://www.sciencedirect.com/science/article/pii/S1090780724000491">publication</a>, be sure to check it out. It’s much more sophisticated than what’s going on here, and will be available soon.</p>
</div>
</div>
<p><a href="https://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/EF-NMR-Build-1.html">Part 1</a> <a href="https://chemospec.org/posts/2024-01-01-EF-NMR-Build-2/EF-NMR-Build-2.html">Part 2</a></p>
<section id="capturing-an-fid" class="level2">
<h2 class="anchored" data-anchor-id="capturing-an-fid">Capturing an “FID”</h2>
<p>In the previous post on <a href="https://chemospec.org/posts/2024-01-30-Bitwise-Operators/Bitwise-Operators.html">biwise operators in C</a> I detailed some of the machinations needed to control the ADC on an Arduino. After considerable work, that knowledge has been put to use to develop a working receiver system (though more work will be needed to perfect it). In the process, I have fine-tuned the code needed to control the instrument and collect the data in a useable form.</p>
<p>The <a href="https://github.com/bryanhanson/EF-NMR">Bnmr software</a> is available on Github. The hardware used for testing and development is shown in Figure&nbsp;1.</p>
<div id="fig-hardware" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-hardware-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2024-04-17-EF-NMR-Build-3/imgs/Hardware.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-hardware-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: The hardware used for testing. The blue box on the left is the <a href="https://www.picotech.com">PicoScope</a>, which is generating a sine wave simulating an FID. The Arduino is in the middle. The bread board on the right has an Adafruit micro SD card breakout board mounted at the bottom (at the top is a voltage divider which I use to generate a constant voltage for quicker testing; it’s not hooked up when using the PicoScope). Once data is collected, the micro SD card is removed from the breakout board and put in the dongle to move the data to the laptop.
</figcaption>
</figure>
</div>
<p>Once the proper bits were set so the ADC would collect data, I first used a simple voltage divider to generate a constant ADC signal, adjustable via a potentiometer (if one doesn’t provide some kind of input, the ADC output drifts around). With a signal available, there were many rounds of code revision so that a specified number of data points could be collected and stored somewhere.<sup>1</sup></p>
<p>In terms of storage, there were issues. The Arduino has very little actual memory, so the amount of data that can be “stored” is very small. As a result, this data has to be quickly moved somewhere else with significant memory. The solution to the transient data storage is a <a href="https://en.wikipedia.org/wiki/Circular_buffer">ring buffer</a>. I was able to implement the code found on Wikipedia in <code>C</code> without too much trouble. The idea behind a ring or circular buffer is that data is stored in a fixed size buffer, and added and removed in a coordinated manner via indices. However, in the big picture data must be removed from the ring buffer as fast or faster than it is put in, otherwise data is overwritten. And, it turns out that the Arduino ADC can really pump out data. In order to keep the ring buffer from filling and overwriting (which is treated as an error), I had to collect data from the ADC at a lower rate that it can produce numbers, for instance every 10th reading.<sup>2</sup></p>
<p>The second problem was what to do with the data that was emptied out of the ring buffer. I spent a lot of time trying to send it to the serial port, so I could capture it from there. However, <code>Bnmr</code> also sends a lot of messages about various events to the serial port. These messages inform the user about what is happening and also provide troubleshooting guidance. Ultimately, it was not possible to capture the data this way – the messages invariably introduced problems with the formatting of the data. The solution was to add a micro SD card breakout board to store the data on the fly, effectively separating the message stream from the data stream. Before I settled on that approach, I also tried to use <code>R</code> to both send messages and capture the data.<sup>3</sup> In addition, I also tried using a shell script and a terminal emulator to do the same. Neither was completely successful when messages and data were mixed. However, the shell script experience proved helpful in developing the final, successful approach. Another problem with having both messages and data in the same serial stream was that MacOS has a nasty habit of reseting high baud rates desirable for data collection back to lower rates. This is discussed in various forums and workarounds exist, but I could not get the overall process to be reliable and robust.</p>
</section>
<section id="results" class="level2">
<h2 class="anchored" data-anchor-id="results">Results</h2>
<p>With functioning software and a method to control the overall acquistion process in hand, I used the PicoScope to generate a sine wave (Figure&nbsp;2). <code>Bnmr</code> was compiled and uploaded via a shell script calling the <a href="https://arduino.github.io/arduino-cli/0.35/getting-started/"><code>arduino-cli</code></a> (included in the repo, see Listing&nbsp;1). Control was then transferred to <code>picocom</code> which is a terminal emulation program, and the start signal sent to the Arduino. Once the scans completed, the micro SD card was moved from the Arduino to a dongle connected to the laptop, and analyzed using <code>R</code> as shown later.</p>
<div class="cell">
<div id="lst-Script" class="bash cell-code listing quarto-float quarto-figure quarto-figure-left anchored">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-Script-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;1: Shell Script to Send/Receive Messages &amp; Data.
</figcaption>
<div aria-describedby="lst-Script-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode cell-code" id="lst-Script" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="lst-Script-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="lst-Script-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">arduino-cli</span> compile <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-b</span> arduino:avr:uno <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span></span>
<span id="lst-Script-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">arduino-cli</span> upload <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$2</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-b</span> arduino:avr:uno <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span></span>
<span id="lst-Script-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">picocom</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$2</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-b</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-g</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$4</span></span>
<span id="lst-Script-5"></span>
<span id="lst-Script-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Typical Usage:</span></span>
<span id="lst-Script-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set working directory to .../Bnmr</span></span>
<span id="lst-Script-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span> /dev/cu.<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With Arduino plugged in, get the name of the port</span></span>
<span id="lst-Script-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./go.sh</span> Bnmr.ino /dev/cu.usbmodem101 9600 outfile.txt</span>
<span id="lst-Script-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># $1 is the name of the Arduino code file</span></span>
<span id="lst-Script-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># $2 is the port name</span></span>
<span id="lst-Script-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># $3 is the baud rate for messages</span></span>
<span id="lst-Script-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># $4 is the filename for messages received</span></span>
<span id="lst-Script-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ADC data is stored on a micro SD card with a filename given in user_input.h</span></span>
<span id="lst-Script-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cntrl-A central-X to quit the Picocom window</span></span></code></pre></div>
</div>
</figure>
</div>
</div>
<div id="fig-waveform" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-waveform-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2024-04-17-EF-NMR-Build-3/imgs/Waveform.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-waveform-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: The sine wave generated by the PicoScope which was used to represent an NMR FID signal. Peak-to-peak voltage was 500 mV, with a 1 V offset as the Arduino ADC can only process positive voltage readings. Frequency is 50 Hz.
</figcaption>
</figure>
</div>
<section id="message-log-file" class="level3">
<h3 class="anchored" data-anchor-id="message-log-file">Message Log File</h3>
<p>Whatever is typed in the <code>picocom</code> terminal/window is sent to the serial port and then to the Arduino. All messages sent by the Arduino are echoed in the <code>picocom</code> window and saved to a <em>message log file</em>. A typical output is in Listing&nbsp;2.</p>
<div class="cell">
<div id="lst-msg" class="bash cell-code listing quarto-float quarto-figure quarto-figure-left anchored">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-msg-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;2: Messages Captured by Picocom.
</figcaption>
<div aria-describedby="lst-msg-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode cell-code" id="lst-msg" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="lst-msg-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Looking</span> for SD card...</span>
<span id="lst-msg-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SD</span> card found <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">working</span></span>
<span id="lst-msg-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SD</span> card directory:</span>
<span id="lst-msg-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">SPOTLI~1/</span></span>
<span id="lst-msg-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">FID_CSV</span>     0</span>
<span id="lst-msg-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">FSEVEN~5/</span></span>
<span id="lst-msg-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">TRASHE~9/</span></span>
<span id="lst-msg-8"> </span>
<span id="lst-msg-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Bnmr</span> listening...</span>
<span id="lst-msg-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Enter</span> g or s at any time <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note: g is typed (but not echoed)</span></span>
<span id="lst-msg-11">                         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and sent to the Arduino, which starts the program</span></span>
<span id="lst-msg-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">=====================</span></span>
<span id="lst-msg-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Loading</span> experiment...</span>
<span id="lst-msg-14"></span>
<span id="lst-msg-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Starting</span> scans...</span>
<span id="lst-msg-16">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Scan</span> no: 1</span>
<span id="lst-msg-17">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Scan</span> no: 2</span>
<span id="lst-msg-18">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Scan</span> no: 3</span>
<span id="lst-msg-19">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Scan</span> no: 4</span>
<span id="lst-msg-20">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Scan</span> no: 5</span>
<span id="lst-msg-21"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Scans</span> complete!</span>
<span id="lst-msg-22"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Experiment</span> complete, stop</span></code></pre></div>
</div>
</figure>
</div>
</div>
</section>
<section id="data-log-file" class="level3">
<h3 class="anchored" data-anchor-id="data-log-file">Data Log File</h3>
<p>The <em>data log file</em> is a comma-separated file with an entire FID/scan on one long line. There is a blank line between each data line. This is stored on the micro SD card in a file whose name is provided by the user in <code>user_input.h</code> (this is where all user modifiable parameters are given). We can read in the first two scans and plot the early points as follows (Figure&nbsp;3).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb1-1">dat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FID_CSV"</span>)</span>
<span id="cb1-2">res1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(dat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>)))</span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># skipping dat[2] as it is a blank line</span></span>
<span id="cb1-4">res2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(dat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>)))</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(res1), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> res1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>),</span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADC Reading"</span>)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(res1), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> res2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div id="fig-results" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-results-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2024-04-17-EF-NMR-Build-3/EF-NMR-Build-3_files/figure-html/fig-results-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-results-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Two typical “scans”.
</figcaption>
</figure>
</div>
</div>
</div>
<p>Since there is no coordination (i.e.&nbsp;no common time base) between the generated signal and the ADC data collection, the two sample scans are offset slightly. A common time base is very important for an NMR, so this will be one of the next items for focus.</p>


</section>
</section>


<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Right now, a fixed number of data points are collected in whatever time it takes. This needs to be modified so that the data points are collected over a fixed amount of time, specified by the user.↩︎</p></li>
<li id="fn2"><p>There’s a potential problem here, and that is one must collect enough points to satisfy <a href="https://en.wikipedia.org/wiki/Nyquist–Shannon_sampling_theorem">Nyquist’s criterion</a> in order to faithfully represent a sine wave. Preliminary experiments suggest that there are plenty of data points because the ADC is extremely fast.↩︎</p></li>
<li id="fn3"><p>I spent considerable time writing an <code>R</code> package which I named <a href="https://github.com//bryanhanson/UtiliDuino">UtiliDuino</a> for this purpose, but ultimately it was not the best solution.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2024,
  author = {Hanson, Bryan},
  title = {EF-NMR {Part} 3: {Receiver} {Software}},
  date = {2024-04-16},
  url = {http://chemospec.org/posts/2024-04-17-EF-NMR-Build-3/EF-NMR-Build-3.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2024" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2024. <span>“EF-NMR Part 3: Receiver Software.”</span>
April 16, 2024. <a href="http://chemospec.org/posts/2024-04-17-EF-NMR-Build-3/EF-NMR-Build-3.html">http://chemospec.org/posts/2024-04-17-EF-NMR-Build-3/EF-NMR-Build-3.html</a>.
</div></div></section></div> ]]></description>
  <category>EF-NMR</category>
  <category>DIY</category>
  <category>C</category>
  <category>Arduino</category>
  <category>NMRduino</category>
  <category>UtiliDuino</category>
  <guid>http://chemospec.org/posts/2024-04-17-EF-NMR-Build-3/EF-NMR-Build-3.html</guid>
  <pubDate>Tue, 16 Apr 2024 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Bitwise Operators in C</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2024-01-30-Bitwise-Operators/Bitwise-Operators.html</link>
  <description><![CDATA[ 




<p>For the EF-NMR project, I’ve turned my attention to writing the software to capture the FID, which <em>seemed</em> easier than writing a pulse transmitter.<sup>1</sup> This requires the use of the ADC (analog to digital converter) on the Arduino. Configuring, starting, and stopping the ADC is handled by directly setting bits in a particular register on the Arduino. New territory! This post will serve as a set of notes on what I’ve learned about how this is done. In particular, I want to focus on the code people <em>actually write</em>, which is generally more complex than what one sees in the language reference.</p>
<section id="the-bitwise-operators-in-c" class="level2">
<h2 class="anchored" data-anchor-id="the-bitwise-operators-in-c">The Bitwise Operators in <code>C</code></h2>
<p>The definitions of the bitwise <code>C</code> operators can be found in numerous places, stated with various levels of clarity and understandability. Sometimes the definitions are very terse and seemingly quite clear, but after reading, one simply doesn’t know how to use it. The revered text known as “K &amp; R” doesn’t even devote much space to them, though that may be because microcontrollers were a relatively new thing at the time of <span class="citation" data-cites="KR1988">Kernighan and Ritchie (1988)</span>. The Arduino reference documents give quite a bit more detail but don’t have the complexity seen in the wild.</p>
<p>The following gives my own interpretation and understanding of the individual operators. To be clear, these definitions don’t really give a sense of <em>why</em> they might be useful or <em>how</em> one would use them.</p>
<ul>
<li><strong>OR</strong> (operator: |) compares two bits and sets the destination bit to 1 unless both inputs are 0. It <em>sets</em> a bit.</li>
<li><strong>AND</strong> (operator: &amp;) compares two bits and sets the destination bit to 0 unless both inputs are 1. It <em>clears</em> a bit.</li>
<li><strong>XOR</strong> (operator: ^) compares two bits and if they are the same, returns 0, if different, returns 1. It <em>toggles</em> a bit.</li>
<li><strong>NOT</strong> (operator: ~) is a unary operator which <em>flips</em> all 1’s to 0’s and vice versa.</li>
<li><strong>Left Shift</strong> (operator: &lt;&lt;) shifts a series of bits left and fills the space with 0’s. Equivalent to multiplying by 2^n.</li>
<li><strong>Right Shift</strong> (operator: &gt;&gt;) shifts a series of bits right and fills the space with 0’s. Equivalent to dividing by 2^n.</li>
</ul>
<p>A key thing to note is that these operators <em>compare</em> two bits (which are either 0 or 1) and returns an updated bit. The exceptions are:</p>
<ul>
<li>The left and right shift operators: These operate on a series of bits. You can’t shift a single bit without stomping on adjacent memory. Very ungraceful!</li>
<li>NOT, the toggle: This flips or toggles a single bit, nothing is compared.</li>
</ul>
<p>The reality is that one rarely sees these operators used on a single bit, even NOT. More often, one sees them applied to a byte, a set of 8 bits residing contiguously in memory. Those bytes, at least in the current use, turn out to be registers on the Arduino, our next topic.</p>
</section>
<section id="adc-registers" class="level2">
<h2 class="anchored" data-anchor-id="adc-registers">ADC Registers</h2>
<p>The ATmega328P microcontroller used in the Arduino Uno has several registers that control the ADC:<sup>2</sup></p>
<ul>
<li>ADMUX = ADC multiplexer selection register</li>
<li>ADCSRA = ADC status and control register A</li>
<li>ADCSRB = ADC status and control register B</li>
<li>ADCL and ADCH = ADC data registers</li>
</ul>
<p>We’ll use ADCSRA as our example. ADCSRA is of course an acronym. If you look at the iom238p.h file where these things are defined, you find that ADCSRA is an alias for a specific memory address(Figure&nbsp;1).<sup>3</sup> It is the address of the first bit of a single byte, composed of 8 bits, numbered 0-7. In the datasheet we can see what is stored in this register. Each of the individual bits has a name, for instance ADEN, which stands for “ADc ENable”, and in the header file, the name ADEN is aliased to bit 7 (Figure&nbsp;2). So we have an 8 bit memory address with a name and each bit has its own name to make remembering their roles easier. These are the bits we need to control with the bitwise operators in order to configure the ADC.</p>
<div id="fig-header" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-header-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2024-01-30-Bitwise-Operators/imgs/header.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-header-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: A portion of the iom328p.h header file showing how acronyms are aliased to memory locations.
</figcaption>
</figure>
</div>
<div id="fig-register" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-register-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2024-01-30-Bitwise-Operators/imgs/register.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-register-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Documentation of the ADCSRA register from the datasheet.
</figcaption>
</figure>
</div>
</section>
<section id="wild-type-operator-constructs-in-use" class="level2">
<h2 class="anchored" data-anchor-id="wild-type-operator-constructs-in-use">Wild-Type Operator Constructs in Use</h2>
<p>As I hinted at earlier, what people actually write is rather different from the simple definitions seen in the reference documents (or my version above). So let’s explore these <em>wild-type</em> examples in detail.</p>
<section id="simple-direct-assignment" class="level3">
<h3 class="anchored" data-anchor-id="simple-direct-assignment">Simple Direct Assignment</h3>
<p>One simple example often seen doesn’t even use the bitwise operators.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb1-1">ADCSRA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>In this case, the right-hand-side (RHS) <code>0</code> is interpreted as an 8 bit binary number, <code>0000 0000</code> and this sets all 8 bits to zero at once. This incantation is probably most appropriate to reset the entire register, as all zeros is the default setting for this particular register (though not necessarily other registers).</p>
</section>
<section id="direct-assignment-via-binary-literals" class="level3">
<h3 class="anchored" data-anchor-id="direct-assignment-via-binary-literals">Direct Assignment via Binary Literals</h3>
<p>If you know the value for every bit you want to set, and want to set them all at once, you can use a binary literal:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb2-1">ADCSRA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> B00101010<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// prefix binary number with B, or</span></span>
<span id="cb2-2">ADCSRA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0b00101010</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// prefix binary number with 0b</span></span></code></pre></div>
<p>The downside here is that future readers of your code have to look up the details of a register’s bit settings everytime they look at your code. Other methods discussed here use aliases for particular bits (e.g.&nbsp;<code>ADEN</code>) which provide at least some mnemonic assistance. Binary literals are only supported in more recent versions of <code>C</code> but you are likely to be using such a version.</p>
</section>
<section id="typical-bitwise-operator-use-in-the-wild" class="level3">
<h3 class="anchored" data-anchor-id="typical-bitwise-operator-use-in-the-wild">Typical Bitwise Operator Use in the Wild</h3>
<section id="example-1" class="level4">
<h4 class="anchored" data-anchor-id="example-1">Example 1</h4>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb3-1">ADCSRA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> ADEN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
<p>In this incantation there are several interesting things going on. Let’s unpack it starting from the RHS. We see this expression: <code>(1 &lt;&lt; ADEN)</code>, which uses the left shift operator. This means take 1 in binary, so <code>0000 0001</code>, and shift the 1 left <code>ADEN</code> times. If we look at either Figure&nbsp;2 or Figure&nbsp;1, we see that <code>ADEN</code> is 7, so we shift the first bit left 7 places, which gives <code>1000 0000</code> in binary. This is a “bit mask”, it’s used in the next step.</p>
<p>The operator <code>|=</code> is a variation on the OR operator. It means take whatever is on the RHS, and OR it against the left-hand-side (LHS), and put the result in the LHS.<sup>4</sup> What is the current value of <code>ADCSRA</code> in the LHS? We don’t know in this simple example; presumably you would know in a real life example. Whatever it is, when we OR it with the RHS, bit 7, <code>ADEN</code>, gets set to 1, because of how OR is defined. So bit 7 is <em>set</em> to 1, and all other positions are unchanged.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb4-1">xxxx xxxx <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// whatever is in ADCSRA</span></span>
<span id="cb4-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0000</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// bitmask from RHS</span></span>
<span id="cb4-3"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">xxx</span> xxxx <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// result of OR (used to overwrite existing ADCSRA)</span></span></code></pre></div>
</section>
<section id="example-2" class="level4">
<h4 class="anchored" data-anchor-id="example-2">Example 2</h4>
<p>A more involved example using direct assignment as well as bitwise operators is:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb5-1">ADCSRA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> ADPS2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> ADPS1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> ADPS0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
<p>which can be unpacked as three bitmasks, OR’d against each other to get a final result to be put directly into <code>ADCSRA</code>. Using the values of <code>ADPS*</code>, we have:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb6-1"><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0000</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0001</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 1 &lt;&lt; ADPS0 (note ADPS0 = 0 so this is no shift at all)</span></span>
<span id="cb6-2"><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0000</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0010</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 1 &lt;&lt; ADPS1</span></span>
<span id="cb6-3"><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0000</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0100</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 1 &lt;&lt; ADPS2</span></span>
<span id="cb6-4"><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0000</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0111</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// result put directly into ADCSRA overwriting what is there originally</span></span></code></pre></div>
<p>Note that the result overwrites the current value of <code>ADCSRA</code>; the four most significant bits are set to zero, regardless of whatever value was there. The next example shows you how to avoid that.</p>
</section>
<section id="example-3" class="level4">
<h4 class="anchored" data-anchor-id="example-3">Example 3</h4>
<p><em>Almost</em> the same action can be accomplished with the following code, except it preserves the current settings in <code>ADCSRA</code> and uses a helper function, <code>bit()</code>, which is specific to Arduino:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb7-1">ADCSRA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|=</span> bit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ADPS0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> bit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ADPS1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> bit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ADPS2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
<p><code>bit()</code> is an Arduino function that takes an integer argument and returns an 8 bit value with 1 in the position given by the argument, and zeros elsewhere.<sup>5</sup> Thus it unpacks to:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb8-1"><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0000</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0001</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// bit(ADPS0)</span></span>
<span id="cb8-2"><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0000</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0010</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// bit(ADPS1)</span></span>
<span id="cb8-3"><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0000</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0100</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// bit(ADPS2)</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// the above 3 lines create the same bitmasks as in Example 2; together they become:</span></span>
<span id="cb8-5"><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0000</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0111</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// result of OR the above 3 bitmasks</span></span>
<span id="cb8-6">xxxx xxxx <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// whatever is in ADCSRA</span></span>
<span id="cb8-7">xxxx x111 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// result of OR ADCSRA against 0000 0111</span></span></code></pre></div>
<p>In the previous two examples <code>1 &lt;&lt; ADPS0</code> or <code>bit(ADPS0)</code> does very little since <code>ADPS0</code> is 0. However, many coders seem to prefer a little verbosity to make clear what they are trying to achieve.<sup>6</sup></p>
</section>
<section id="example-4" class="level4">
<h4 class="anchored" data-anchor-id="example-4">Example 4</h4>
<p>Let’s say you wanted to turn the ADC on if it was off, and off if it was on. This is a job for the <code>^</code> or toggle operator. You can use <code>ADCSRA ^= (1 &lt;&lt; ADEN)</code> which unpacks as follows (<code>ADEN</code> is 7):</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb9-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">xxx</span> xxxx <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// initial (on state) of the ADC; other bits unknown</span></span>
<span id="cb9-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0000</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// result of (1 &lt;&lt; ADEN) </span></span>
<span id="cb9-3"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">xxx</span> xxxx <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// result of toggling lines 1 and 2; put into ADCSRA; ADC is off</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// or, starting with ADC off</span></span>
<span id="cb9-5"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">xxx</span> xxxx <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ADC is off</span></span>
<span id="cb9-6"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0000</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// result of (1 &lt;&lt; ADEN)</span></span>
<span id="cb9-7"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">xxx</span> xxxx <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// result put into ADCSRA; ADC is now on</span></span></code></pre></div>
<p>Note that the <code>x</code> bits are toggled against <code>0</code>, which means they are <em>unchanged</em>. See the <a href="https://en.wikipedia.org/wiki/Bitwise_operations_in_C">truth table here</a>.</p>
</section>
</section>
<section id="functions-that-are-collections-of-bitwise-operators" class="level3">
<h3 class="anchored" data-anchor-id="functions-that-are-collections-of-bitwise-operators">Functions that are collections of bitwise operators</h3>
<p>The function <code>_BV(bit)</code> is aliased to <code>(1 &lt;&lt; (bit))</code> and for Arduino you can use <code>bitSet(x, n)</code> or <code>sbi(x, n)</code> to write a 1 to the <code>n</code>-th position of register <code>x</code>. Thus,</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb10-1">ADCSRA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> ADEN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// seen earlier</span></span>
<span id="cb10-2">ADCSRA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|=</span> _BV<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ADEN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-3">bitSet<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ADCSRA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ADEN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-4">sbi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ADCSRA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ADEN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
<p>are equivalent ways to change bit 7 in <code>ADCSRA</code>.</p>
<p>For Arduino, you also have <code>bitClear(x, n)</code> which writes a 0 at the <code>n</code>-th position of register <code>x</code>, essentially the complement of <code>bitSet(x, n)</code>. Internally, it is defined as <code>((x) &amp;= ~(1 &lt;&lt; (n)))</code>. Alternatively, one can use <code>cbi(x, n)</code>, the complement of <code>sbi(x, n)</code>. Let’s say you had <code>0000 0110</code> in <code>ADCSRA</code> and wanted to clear the 2nd bit.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb11-1">bitClear<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ADCSRA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// expands to the following steps:</span></span>
<span id="cb11-2"><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0000</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0110</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// initial value in ADCSRA</span></span>
<span id="cb11-3"><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0000</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0010</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// value of bit mask (1 &lt;&lt; 1)</span></span>
<span id="cb11-4"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1111</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1101</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// value of ~(1 &lt;&lt; 1) where all bits have been toggled/flipped</span></span>
<span id="cb11-5"><span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0000</span> <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0100</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// value after &amp; comparing line 2 to line 3, writing 1 if each mask position is 1</span></span></code></pre></div>
<p>Notice that the 2nd bit has been cleared. The <code>=</code> part of <code>&amp;=</code> assigns the result to the LHS, namely <code>ADCSRA</code>.</p>
<p><em>Note that <code>sbi()</code> and <code>cbi()</code> only work for certain registers on Arduino.</em></p>
<p>This <a href="https://stackoverflow.com/questions/47981/how-to-set-clear-and-toggle-a-single-bit/47990#47990">StackOverflow Question</a> has examples of more functions and an interesting discussion of pros, cons and caveats.</p>
</section>
</section>
<section id="sanity-preserving-helper-function" class="level2">
<h2 class="anchored" data-anchor-id="sanity-preserving-helper-function">Sanity-Preserving Helper Function</h2>
<p>I modified the function found <a href="https://forum.arduino.cc/t/how-can-i-serial-println-a-binary-output-that-will-give-all-the-leading-zeros-of-a-variable/962247/2">here</a> to print register contents (well, bytes generally) in an easy-to-read format.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource {c} number-lines code-with-copy"><code class="sourceCode"><span id="cb12-1">void print_bin(byte aByte) {</span>
<span id="cb12-2">  for (int8_t aBit = 7; aBit &gt;= 0; aBit--) {</span>
<span id="cb12-3">    if (aBit == 3) {</span>
<span id="cb12-4">      Serial.print(" "); // space between nibbles</span>
<span id="cb12-5">    }</span>
<span id="cb12-6">    Serial.print(bitRead(aByte, aBit) ? '1' : '0');</span>
<span id="cb12-7">  }</span>
<span id="cb12-8">  Serial.println(" ");</span>
<span id="cb12-9">}</span></code></pre></div>
<p>Let’s use it to check a set of operations which blend Example 2 and Example 3 above, and stick to pure <code>C</code> operations. This code chunk</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource {c} number-lines code-with-copy"><code class="sourceCode"><span id="cb13-1">  ADCSRA = B10001000; // arbitrary initial value</span>
<span id="cb13-2">  print_bin(ADCSRA);</span>
<span id="cb13-3">  ADCSRA |= (1 &lt;&lt; ADPS2) | (1 &lt;&lt; ADPS1) | (1 &lt;&lt; ADPS0);</span>
<span id="cb13-4">  print_bin(ADCSRA);</span></code></pre></div>
<p>displays the following:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource c number-lines code-with-copy"><code class="sourceCode c"><span id="cb14-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> </span>
<span id="cb14-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1111</span></span></code></pre></div>
<p>Use it to check your work!</p>



</section>


<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-KR1988" class="csl-entry">
Kernighan, Brian W., and Dennis M. Ritchie. 1988. <em>The <span>C</span> Programming Language (2nd Edition)</em>. Many reprint publishers exist.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Let me state for the record that this is just a first version; additional complexity will almost certainly be needed later.↩︎</p></li>
<li id="fn2"><p>The details on each of these can be found on the datasheet which can be found via a search engine.↩︎</p></li>
<li id="fn3"><p>The header file is available many places on the internet.↩︎</p></li>
<li id="fn4"><p>All the operators can be used the same way: <code>|=</code>, <code>^=</code>, <code>&amp;=</code>, <code>&lt;&lt;=</code> and <code>&gt;&gt;=</code>. For example <code>C &amp;= 2</code> should be thought of as <code>C = C &amp; 2</code>. See this <a href="https://stackoverflow.com/a/14296609/633251">SO answer</a>.↩︎</p></li>
<li id="fn5"><p>It’s essential to be careful with language to be clear. A byte is 8 bits, numbered from the right position as 0, i.e.&nbsp;76543210. So the first bit is at position 0, etc. Thus <code>bit(0)</code> returns <code>0000 0001</code>.↩︎</p></li>
<li id="fn6"><p>These three bits are used as a group to set the clock speed of the ADC, so it makes sense to make it clear you are using all three values <em>together</em>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2024,
  author = {Hanson, Bryan},
  title = {Bitwise {Operators} in {C}},
  date = {2024-01-30},
  url = {http://chemospec.org/posts/2024-01-30-Bitwise-Operators/Bitwise-Operators.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2024" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2024. <span>“Bitwise Operators in C.”</span> January 30,
2024. <a href="http://chemospec.org/posts/2024-01-30-Bitwise-Operators/Bitwise-Operators.html">http://chemospec.org/posts/2024-01-30-Bitwise-Operators/Bitwise-Operators.html</a>.
</div></div></section></div> ]]></description>
  <category>C</category>
  <category>Arduino</category>
  <guid>http://chemospec.org/posts/2024-01-30-Bitwise-Operators/Bitwise-Operators.html</guid>
  <pubDate>Tue, 30 Jan 2024 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Building an EF-NMR Part 2</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2024-01-01-EF-NMR-Build-2/EF-NMR-Build-2.html</link>
  <description><![CDATA[ 




<p><a href="https://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/EF-NMR-Build-1.html">Part 1</a></p>
<p>With the polarization coil completed, I decided to take a stab at the software to control the instrument. I felt like I needed to get a feel for how to work with the Arduino so I would understand what kinds of signals I could send to the electronics. In turn that would (ideally) make it easier to understand how the circuits work.</p>
<p>I started by studying Michal’s software (available <a href="https://phas.ubc.ca/~michal/Earthsfield/">here</a>). Michal’s software is designed for use with students in a lab course and includes a Python GUI, the actual Arduino control software, and several utilities. One of the utilities is a separate pulse programming module that produces a file accessed by the GUI. At least that appears to be the big picture. Inspection of the Arduino software made it clear that I had, and have, a lot to learn. Arduino code is written in <code>C++</code>, which encompases the earlier language <code>C</code>, which some have described as “dressed up assembly language”. Oh boy…</p>
<p>After studying some basic Arduino tutorials, I decided the best way to learn was to write my own software, starting with a simple case of an NMR-like interface that would turn Arduino pins on and off to control the various pieces of hardware I will eventually build. Turning pins on and off is really simple on the Arduino, that’s not the challenge. For this instrument, the challenge is that there are several events that occur one after the other on very short time scales. Roughly, one must turn the polarization coil on, then off, then turn on the transmitter and turn it off, and then turn on the receiver and listen. Due to the realities of electronics, there need to be short delays between some of these events so that the electronic signals can “warm up”, or “cool down”. To make this initial version manageable, I decided to not worry about the time scale in detail for now, and focus on building an extensible framework that takes NMR-like inputs to turn things on and off.</p>
<section id="prototype-in-r" class="level2">
<h2 class="anchored" data-anchor-id="prototype-in-r">Prototype in R</h2>
<p>Since R is my computational lingua franca, I decided to think about how I would set up a series of events in <code>R</code> and calculate their on/off times given the duration (or length) of each event. This was quite straightforward; if you know the duration of each event then the on/off times can be computed with a cumulative sum process.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' </span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Convert a Named Vector Giving Event Durations to a Data Frame</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' </span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param event_lengths Numeric.  A named numeric vector giving the durations (lengths)</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'        of a series of events which occur in the given order.</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return A data frame containing the on and off times for each event.</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb1-8">event_length_to_event_on_off <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(event_lengths) {</span>
<span id="cb1-9">  off <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cumsum</span>(event_lengths)</span>
<span id="cb1-10">  on <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, off[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(off) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])</span>
<span id="cb1-11">  DF <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">event =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(event_lengths), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">on =</span> on, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">off =</span> off)</span>
<span id="cb1-12">  DF</span>
<span id="cb1-13">}</span></code></pre></div>
</div>
<p>And then I needed a function to visualize the result, which is basically a sort of Gantt chart where the events never overlap.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' Create a Gantt Chart of NMR Event Timing</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @param my_events Data frame.</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#' @return `ggplot2` object.</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'</span></span>
<span id="cb2-7">events <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">my_events =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb2-8">  p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(my_events, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> on, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> off, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> event, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> event))</span>
<span id="cb2-9">  p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_segment</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_bw</span>()</span>
<span id="cb2-10">  p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NMR Event Timing"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"time, microseconds"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-11">  p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_discrete</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> my_events<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>event)</span>
<span id="cb2-12">  p</span>
<span id="cb2-13">}</span></code></pre></div>
</div>
<p>Figure&nbsp;1 shows these functions in action. So far, so good.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb3-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e6</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># conversion factor, seconds to microseconds</span></span>
<span id="cb3-2">ev <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f )</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(ev) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pol_coil"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"del_pt"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transmitter"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"del_tr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"receiver"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relax_delay"</span>)</span>
<span id="cb3-4">p1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">events</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">event_length_to_event_on_off</span>(ev))</span>
<span id="cb3-5">p1</span></code></pre></div>
<div class="cell-output-display">
<div id="fig-timings" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-timings-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2024-01-01-EF-NMR-Build-2/EF-NMR-Build-2_files/figure-html/fig-timings-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-timings-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Event timings. The short delays are too short to be visible.
</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="implementation-in-c" class="level2">
<h2 class="anchored" data-anchor-id="implementation-in-c">Implementation in C</h2>
<p>Next, I decided to write something more or less equivalent in <code>C</code>. This meant learning <code>C</code>. Suffice it to say, <code>C</code> provides none of the niceties of <code>R</code>. There are few atomic types in <code>C</code>, and in particular strings and arrays are not native entities. Instead, one must think in terms of pointers to particular memory addresses that hold the strings or arrays. So the entire paradigm is different, and requires thinking about solving problems in new ways. Overall, this has been a good experience. After a lot of struggle, I managed to write functions that carry out the equivalent of the <code>R</code> functions above, except instead of graphical output there is tabular output (there really is no graphical output in the usual sense for Arduino so we need to have other ways of verifying our results). I won’t give details of this work here, as the next section reviews how it was implemented for Arduino.</p>
</section>
<section id="implementation-for-arduino" class="level2">
<h2 class="anchored" data-anchor-id="implementation-for-arduino">Implementation for Arduino</h2>
<p>The version of event timing in <code>C</code> was adapted to the Arduino with relatively minor modifications, mostly related to how results are printed to the console (the <code>C</code> and <code>C++</code> languages for Arduino are specialized versions of the languages). I also wrote a system to control the starting and stopping of the scans, thinking ahead of how the program is actually going to be used. All user inputs are in a single file, including a simple version of a pulse program (tons of work will be needed in the future on this piece). My overall goal is to write an entire NMR control and acquistion program that runs completely on the Arduino IDE. Well, almost completely: some other entity will have to slurp up the data coming from the Arduino, as there is very little memory on the Arduino. Not sure if this can be done but that’s the goal. The code for this project is stored in a public repo <a href="https://github.com/bryanhanson/EF-NMR">here</a>.</p>
<p>The output of a “run” on this “instrument” is shown in Figure&nbsp;2. The table lists the event name, the Arduino pin that should be activated, and the on/off times for the events. Times are in milliseconds in the example, and are relevant for testing, not an actual NMR scan. A pin value of -1 indicates no pin is active; such an event is just a delay period so the (not yet built) electronics can settle.</p>
<div id="fig-output" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-output-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2024-01-01-EF-NMR-Build-2/imgs/output.png" class="img-fluid figure-img" style="width:60.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-output-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Output of the NMR acquistion program.
</figcaption>
</figure>
</div>
<p>This program was further tested by wiring the Arduino to a breadboard with a few LEDs and resistors to limit the current to the LEDs appropriately. The video below shows the program in action, doing two scans with the durations as shown in Figure&nbsp;2. The pins from left represent polarization coil power, transmit, and receive signal (the latter of course should be listening, not powering something). As a proof of concept I’m pretty happy with this result.</p>
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="imgs/action.mov"></video></div>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s Next?</h2>
<p>So much to do, but I’m not in a hurry and can choose to do things in any order that inspires me:</p>
<ul>
<li>Polarization coil power supply circuit (some work done on this, just needs to be built)</li>
<li>Transmitter circuit</li>
<li>Receiver circuit</li>
<li>Details of T/R on the Arduino; this will require another round of intense learning I’m certain!</li>
</ul>


</section>

<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2024,
  author = {Hanson, Bryan},
  title = {Building an {EF-NMR} {Part} 2},
  date = {2024-01-01},
  url = {http://chemospec.org/posts/2024-01-01-EF-NMR-Build-2/EF-NMR-Build-2.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2024" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2024. <span>“Building an EF-NMR Part 2.”</span> January
1, 2024. <a href="http://chemospec.org/posts/2024-01-01-EF-NMR-Build-2/EF-NMR-Build-2.html">http://chemospec.org/posts/2024-01-01-EF-NMR-Build-2/EF-NMR-Build-2.html</a>.
</div></div></section></div> ]]></description>
  <category>EF-NMR</category>
  <category>DIY</category>
  <category>C</category>
  <category>Arduino</category>
  <guid>http://chemospec.org/posts/2024-01-01-EF-NMR-Build-2/EF-NMR-Build-2.html</guid>
  <pubDate>Mon, 01 Jan 2024 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Building an EF-NMR Part 1</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/EF-NMR-Build-1.html</link>
  <description><![CDATA[ 




<p>Readers may have noticed an Earth Field NMR theme in several recent posts (<a href="https://chemospec.org/posts/2023-06-12-DIY-NMR/DIY-NMR.html">here</a>, <a href="https://chemospec.org/posts/2023-07-19-EF-NMR-1/EF-NMR-1.html">here</a> and <a href="https://chemospec.org/posts/2023-09-18-EF-NMR-2/EF-NMR-2.html">here</a>). Behind the scenes, my interest in this topic was growing, fertilized in large part my desire to learn more about <a href="https://chemospec.org/posts/2023-07-16-Photometer/Photometer.html">electronics</a>. I may have lost my mind, but I have now embarked on a project to build an EF-NMR!</p>
<p>I was inspired by the really simple EF-NMR instrument developed by Andy Nichol (<a href="https://hackaday.io/project/191192-nuclear-magnetic-resonance-for-everyone">“Nuclear Magnetic Resonance for Everybody”</a>). Nichol’s work made it clear that one could observe an NMR signal without complex equipment. As I did more reading however, I settled on following the build of Carl Michal (<span class="citation" data-cites="Michal2010">Michal (2010)</span>) as it will allow for more complex experiments, and provides more opportunity to learn electronic circuits.</p>
<p>Michal’s design uses two coils: a polarization coil, and a transmit/receive (T/R) coil. This post will cover the construction of the polarization coil. Michal’s polarization coil is a three-layer solenoid constructed with 18 AWG magnet wire. Each layer is a separate wire but in operation, the three layers are wired in parallel. I scaled the coil dimensions down somewhat so that I could use materials that are readily accessible to me.<sup>1</sup> The plan is to use a 50 mL centrifuge tube as the sample holder. The sample will be placed in a T/R coil wound around a 1.25” schedule 40 PVC pipe. The T/R coil will be located inside the polarization coil, which will be wound on a 2” schedule 40 PVC pipe. The dimensions of these pipes were chosen to allow the sample to nest easily inside the T/R coil which nests inside the polarization coil. Figure&nbsp;1 shows a cross-section of the design.<sup>2</sup></p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-cs" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-cs-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/EF-NMR-Build-1_files/figure-html/fig-cs-1.png" class="img-fluid figure-img" width="408">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-cs-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Cross section of the coils and sample. Grey indicates the PVC pipe components. Red indicates windings (dimensions approximate). Blue represents the sample. Dotted lines show the outer extent of the retainer rings. Scale is in mm.
</figcaption>
</figure>
</div>
</div>
</div>
<section id="constructing-the-form" class="level2">
<h2 class="anchored" data-anchor-id="constructing-the-form">Constructing the Form</h2>
<p>The form for the polarization coil was made from a 12 cm length of 2” PVC pipe. Two retaining rings were very carefully cut from a 2” PVC coupling. The retaining rings were 1 cm wide. The parts are shown in Figure&nbsp;2. The rings were then glued to the ends of the form using a minimal amount of standard PVC glue. The inner edges of the rings correspond to the original end of the coupling which provides a clean and straight edge where it will rest against the magnet wire. The ends of the assembly were lightly sanded. As built, the length available for the windings is 102 mm.</p>
<div id="fig-pieces" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-pieces-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/imgs/form-pieces.jpeg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-pieces-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: The form and two retaining rings before assembly.
</figcaption>
</figure>
</div>
<p>Next, three holes were drilled close to each of the retaining rings, about 1 cm apart. The magnet wire will pass through these holes, which will serve to keep the wire in place as it is wound. Figure&nbsp;3 shows these holes. A short length of wire was placed in the holes as a “keeper” as the winding was carried out. This ensured that the winding for the first layer did not block the holes for the second and third layers of wire (Figure&nbsp;4).</p>
<div id="fig-holes" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-holes-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/imgs/form-1.jpeg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-holes-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: View of the holes on each end of the form assembly.
</figcaption>
</figure>
</div>
<div id="fig-keeper" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-keeper-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/imgs/keeper-detail.jpeg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-keeper-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: Detail of the wire keepers. The open hole will be used for the first winding layer. The keepers will maintain access to the holes for the subsequent layers.
</figcaption>
</figure>
</div>
</section>
<section id="the-winding-jig" class="level2">
<h2 class="anchored" data-anchor-id="the-winding-jig">The Winding Jig</h2>
<p>A winding jig was constructed from 1/4” hobby plywood. The base is 6 x 12”. Small nails and glue were used to assemble the sides and back. A 1/4” threaded rod serves as the rotational axis. Nuts and washers secure a simple handle as well as position the rod overall in the jig. Figure&nbsp;5 and Figure&nbsp;6 show the jig.</p>
<div id="fig-jig-1" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-jig-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/imgs/jig-1.jpeg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-jig-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: The winding jig.
</figcaption>
</figure>
</div>
<div id="fig-jig-2" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-jig-2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/imgs/jig-2.jpeg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-jig-2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: Another view of the winding jig.
</figcaption>
</figure>
</div>
</section>
<section id="wire-spool-holder" class="level2">
<h2 class="anchored" data-anchor-id="wire-spool-holder">Wire Spool Holder</h2>
<p>A holder for the wire spool was constructed with 1/16” x 1” aluminum bar. The bar was bent into a shape that would provide a way to apply friction to the sides of the spool, thus controlling the tension on the wire as it pays out. The spool is mounted on a 1/4” threaded rod and there are wingnuts on each side, which when tightened press the aluminum bar against the spool. The threaded rod does tend to unscrew as the wire is spooled out, but the process is slow enough that one can correct this as needed. If I were going to do this alot I would replace the wingnut on the side that tends to unwind with two nuts locked against each other. The holder is loosely attached to the work bench so that it can pivot as needed to accommodate the changing angle of the wire as it moves across the form. Figure&nbsp;7 shows the design.</p>
<div id="fig-spool" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-spool-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/imgs/spool.jpeg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-spool-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;7: The wire spool holder. Tightening the wingnuts pushes the aluminum bar against the spool and gives some control over the wire tension as it pays out.
</figcaption>
</figure>
</div>
</section>
<section id="the-winding-process" class="level2">
<h2 class="anchored" data-anchor-id="the-winding-process">The Winding Process</h2>
<p>The form was more or less centered on the threaded rod using a couple of wooden guide pieces. The winding process is shown in Figure&nbsp;8. The wire for the first layer comes from inside the form and up through one of the holes and is wound on the form. The action of the keepers is apparent. The fingers are used to position the wire correctly. In principle tension on the wire is provided by tightening the wing nuts on the wire supply holder. However, I did not tighten them enough and I had to wrestle with getting layer one tight enough. This caused problems with the subsequent layers as you will see!</p>
<div id="fig-process" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-process-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/imgs/winding-process.jpeg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-process-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;8: Winding the first layer.
</figcaption>
</figure>
</div>
<p>The completed layer one is shown in Figure&nbsp;9. The winding looks even. Layer two is shown in Figure&nbsp;10. Because layer one was a little loose, the wire for layer two would sometimes slip in-between the wires of layer one and force them apart. This was exacerbated because I was using more tension on the wire supply for layer two. Clearly the layer is not even. In addition, winding layer two was more difficult because without the white background one cannot see the progress very well.</p>
<div id="fig-layer-1" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-layer-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/imgs/winding-layer-1.jpeg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-layer-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;9: Completed layer one. It looks nice and even but the winding is loose.
</figcaption>
</figure>
</div>
<div id="fig-layer-2" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-layer-2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/imgs/winding-layer-2.jpeg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-layer-2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;10: Completed layer two. Technique short-comings are evident!
</figcaption>
</figure>
</div>
<p>The problems only worsened with layer 3 (Figure&nbsp;11). I am not happy with the final result, but the wire is positionally stable and it should carry out its function well enough. What I’ve learned here will help when winding the T/R coil.</p>
<div id="fig-layer-3" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-layer-3-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/imgs/winding-layer-3.jpeg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-layer-3-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;11: Completed layer three. Not nearly as pretty as I had hoped!
</figcaption>
</figure>
</div>
</section>
<section id="checking-continuity" class="level2">
<h2 class="anchored" data-anchor-id="checking-continuity">Checking Continuity</h2>
<p>The polymeric insulation on the leads was sanded off (Figure&nbsp;12) and the resistance of each coil was measured. Each gave a resistance of about 0.7 <img src="https://latex.codecogs.com/png.latex?%5Cohm"> and there were no shorts between the layers.</p>
<div id="fig-sanded" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-sanded-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/imgs/sanded-leads.jpeg" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-sanded-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;12: Leads for each layer with insulation sanded off.
</figcaption>
</figure>
</div>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s Next</h2>
<p>The next step will be the construction of the polarization coil power supply, and integration of the Arduino controller. I’m not in a hurry!</p>



</section>


<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-Michal2010" class="csl-entry">
Michal, Carl T. 2010. <span>“A Low-Cost Spectrometer for NMR Measurements in the Earth’s Magnetic Field.”</span> <em>Meas. Sci. Technol.</em> 21. <a href="https://doi.org/10.1088/0957-0233/21/10/105902">https://doi.org/10.1088/0957-0233/21/10/105902</a>.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Of course, there will be less sample and therefore a smaller signal.↩︎</p></li>
<li id="fn2"><p>The dimensions of schedule 40 PVC products are readily available online, which made planning the overall design much simpler.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2023,
  author = {Hanson, Bryan},
  title = {Building an {EF-NMR} {Part} 1},
  date = {2023-10-24},
  url = {http://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/EF-NMR-Build-1.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2023" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2023. <span>“Building an EF-NMR Part 1.”</span> October
24, 2023. <a href="http://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/EF-NMR-Build-1.html">http://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/EF-NMR-Build-1.html</a>.
</div></div></section></div> ]]></description>
  <category>EF-NMR</category>
  <category>DIY</category>
  <guid>http://chemospec.org/posts/2023-10-24-EF-NMR-Build-1/EF-NMR-Build-1.html</guid>
  <pubDate>Tue, 24 Oct 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>The n + 1 rule in Earth’s Field NMR</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2023-09-18-EF-NMR-2/EF-NMR-2.html</link>
  <description><![CDATA[ 




<p>I have been studying Earth’s Field NMR for a bit now. The other day I came across a paper that clued me into some additional interesting features of EF-NMR I was not aware of.</p>
<p>As all organic chemists know, in NMR we use the <img src="https://latex.codecogs.com/png.latex?n%20+%201"> rule to determine splitting, and Pascal’s triangle as a nemonic to remember the relative areas of the peaks within a multiplet. For instance, we expect that the <img src="https://latex.codecogs.com/png.latex?%5Cce%7BCH3%7D"> group in ethanol to be a triplet with areas 1:2:1, due to the <img src="https://latex.codecogs.com/png.latex?%5Cce%7BCH3%7D"> group having two proton neighbors in the <img src="https://latex.codecogs.com/png.latex?%5Cce%7BCH2%7D"> group. We treat the two protons in <img src="https://latex.codecogs.com/png.latex?%5Cce%7BCH2%7D"> as magnetically equivalent.</p>
<section id="j-coupled-specta" class="level2">
<h2 class="anchored" data-anchor-id="j-coupled-specta">J-Coupled Specta</h2>
<p>The <img src="https://latex.codecogs.com/png.latex?n+1"> rule works at typical fields used for structural determination, let’s say 60 MHz and above.<sup>1</sup> At these fields one is working in the so-called “weak coupling” region. However, as one lowers the field to really low values, one encounters the “strong coupling” region, where one observes “J-coupled-spectra” or JCS. Under strong coupling, the <img src="https://latex.codecogs.com/png.latex?%5Cce%7BCH2%7D"> protons in ethanol are no longer magnetically equivalent, and each of them couples differently to other nuclei, and the <img src="https://latex.codecogs.com/png.latex?n%20+%201"> rule breaks down.</p>
<p>The strict requirement for JCS is that there be two or more protons attached to a spin <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D"> heteroatom and the magnetic field be quite small. For a simple system, let’s say <img src="https://latex.codecogs.com/png.latex?%5Cce%7BH_i%5Cbond%7B-%7DX%5Cbond%7B-%7D%20H_j%7D">, the strict requirement to see separate lines for the no-longer-equivalent protons is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clvert%20J_%7BXH_i%7D%20-%20J_%7BXH_j%7D%20%5Crvert%20%5Cge%20%5Clvert%20J_%7BH_%7Bi%7DH_%7Bj%7D%7D%20%5Crvert%0A"></p>
<p>If this seems a bit strange, well, 1) it is, and 2) it has always been the case that the “equivalent” protons in for example a <img src="https://latex.codecogs.com/png.latex?%5Cce%7BCH2%7D"> group do couple, we just don’t normally see it or worry about it.<sup>2</sup></p>
</section>
<section id="how-small-is-small" class="level2">
<h2 class="anchored" data-anchor-id="how-small-is-small">How Small is Small?</h2>
<p>How small does the magnetic field have to be for J-coupled spectra to appear? This is covered in detail in <span class="citation" data-cites="Appelt2010">Appelt et al. (2010)</span> but generally speaking JCS appear at around <img src="https://latex.codecogs.com/png.latex?10%5E%7B-6%7D"> to <img src="https://latex.codecogs.com/png.latex?10%5E%7B-4%7D"> Tesla.<sup>3</sup> The magnetic field of earth is around 50 mT, right in the sweet spot. The Larmor resonance frequency for <img src="https://latex.codecogs.com/png.latex?%5Cce%7B%5E%7B1%7DH%7D"> at this field strength is around 2 kHz.</p>
</section>
<section id="what-replaces-the-n-1-rule" class="level2">
<h2 class="anchored" data-anchor-id="what-replaces-the-n-1-rule">What Replaces the <img src="https://latex.codecogs.com/png.latex?n%20+%201"> Rule?</h2>
<p>In the case of a system like <img src="https://latex.codecogs.com/png.latex?%5Cce%7BX%5Cbond%7B-%7DH_N%7D">, the number of lines that will be observed is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctextrm%7Bno.%20of%20lines%7D%20=%202%20%5Csum_%7Bn%20=%201,%20n%20%5Cin%20U%7D%5E%7BN%7DN%20-%20n%20+%201%0A"></p>
<p>Where <img src="https://latex.codecogs.com/png.latex?U"> is the set of odd numbers (for odd <img src="https://latex.codecogs.com/png.latex?N">, one evaluates until <img src="https://latex.codecogs.com/png.latex?N%20-n%20=%200">; for even <img src="https://latex.codecogs.com/png.latex?N">, evaluate until <img src="https://latex.codecogs.com/png.latex?N-n=1">). The leading multiplier of 2 accounts for the doublet due to <img src="https://latex.codecogs.com/png.latex?%5Cce%7BJ_%7BXH%7D%7D">. This formula doesn’t exactly roll off the tongue. We can evaluate it to get the first few terms:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb1-1">N <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>L <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># evaluate 1:N terms</span></span>
<span id="cb1-2">no.lines <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_integer_</span>, N) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize storage</span></span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>N) {</span>
<span id="cb1-4">  odd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>i) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-5">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>i)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.logical</span>(odd)] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get odd n no larger than N</span></span>
<span id="cb1-6">  no.lines[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take advantage of R's vectorization</span></span>
<span id="cb1-7">}</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(no.lines) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N="</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pretty it up</span></span>
<span id="cb1-9">no.lines <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> no.lines <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># account for J_HX</span></span>
<span id="cb1-10">no.lines</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>N=1 N=2 N=3 N=4 N=5 
  2   4   8  12  18 </code></pre>
</div>
</div>
</section>
<section id="examples" class="level2">
<h2 class="anchored" data-anchor-id="examples">Examples</h2>
<p>A couple of examples should clarify the situation. All of these will be from the perspective of observing <img src="https://latex.codecogs.com/png.latex?%5Cce%7B%5E%7B1%7DH%7D">.<sup>4</sup> These examples are taken from <span class="citation" data-cites="Appelt2007">Appelt et al. (2007)</span>.</p>
<section id="ceph2" class="level3">
<h3 class="anchored" data-anchor-id="ceph2"><img src="https://latex.codecogs.com/png.latex?%5Cce%7BPH2%7D"></h3>
<p>At <em>high field</em> the <img src="https://latex.codecogs.com/png.latex?%5Cce%7B%5E%7B1%7DH%7D"> spectrum of <img src="https://latex.codecogs.com/png.latex?%5Cce%7BPH2%7D"> would be a symmetric doublet with a peak separation of <img src="https://latex.codecogs.com/png.latex?%5Cce%7BJ_%7BPH%7D%7D">.</p>
<p>In <em>earth’s field</em>, the spectrum is first split into a doublet by <img src="https://latex.codecogs.com/png.latex?%5Cce%7BJ_%7BPH%7D%7D">, but the spacing is not symmetric. Then, each part of the doublet is split further into two peaks, also asymmetrically and with varying linewidths. Figure&nbsp;1 shows how the splitting changes as a function of field strength. Note that in the strong coupling region there are four peaks, as predicted above.</p>
<div id="fig-PH2" class="quarto-float quarto-figure quarto-figure-center anchored" alt="Appelt 2007 Fig. 4">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-PH2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-09-18-EF-NMR-2/Appelt2007Fig4.png" class="img-fluid figure-img" alt="Appelt 2007 Fig. 4">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-PH2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Figure 4 from <span class="citation" data-cites="Appelt2007">Appelt et al. (2007)</span>, showing the field dependence of the <img src="https://latex.codecogs.com/png.latex?%5Cce%7BPH2%7D"> spectrum.
</figcaption>
</figure>
</div>
</section>
<section id="cech3oh" class="level3">
<h3 class="anchored" data-anchor-id="cech3oh"><img src="https://latex.codecogs.com/png.latex?%5Cce%7BCH3OH%7D"></h3>
<p>For the case of methanol in Earth’s field, the spectrum is first asymmetrically split by the <img src="https://latex.codecogs.com/png.latex?%5Cce%7B%5E%7B13%7DC%7D"> with spacing <img src="https://latex.codecogs.com/png.latex?%5Cce%7BJ_%7BCH%7D%7D">. Then each part of the doublet is further split into four peaks. Figure&nbsp;2 shows the EF spectrum of methanol. The asymmetry of the line spacing and line widths is apparent.</p>
<div id="fig-methanol" class="quarto-float quarto-figure quarto-figure-center anchored" alt="Appelt 2007 Fig. 5">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-methanol-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-09-18-EF-NMR-2/Appelt2007Fig5.png" class="img-fluid figure-img" alt="Appelt 2007 Fig. 5">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-methanol-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Figure 5 from <span class="citation" data-cites="Appelt2007">Appelt et al. (2007)</span>, showing the spectrum of methanol.
</figcaption>
</figure>
</div>
</section>
<section id="further-reading" class="level3">
<h3 class="anchored" data-anchor-id="further-reading">Further Reading</h3>
<p>For a broad overview of this topic, take a look at <span class="citation" data-cites="Kaseman2020">Kaseman et al. (2020)</span>; for a detailed walk-through of the theory with many more examples, see <span class="citation" data-cites="Appelt2007">Appelt et al. (2007)</span>, and other papers by Appelt et al.&nbsp;Be prepared to spend some time with these papers.</p>



</section>
</section>


<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-Appelt2007" class="csl-entry">
Appelt, Stephan, F. Wolfgang Häsing, Holger Kühn, and Bernhard Blümich. 2007. <span>“Phenomena in <img src="https://latex.codecogs.com/png.latex?J">-Coupled Nuclear Magnetic Resonance Spectroscopy in Low Magnetic Fields.”</span> <em>Phys. Rev. A</em> 76 (August): 023420. <a href="https://doi.org/10.1103/PhysRevA.76.023420">https://doi.org/10.1103/PhysRevA.76.023420</a>.
</div>
<div id="ref-Appelt2010" class="csl-entry">
Appelt, Stephan, F. W. Häsing, U. Sieling, A. Gordji-Nejad, S. Glöggler, and B. Blümich. 2010. <span>“Paths from Weak to Strong Coupling in NMR.”</span> <em>Phys. Rev. A</em> 81 (February): 023420. <a href="https://doi.org/10.1103/PhysRevA.81.023420">https://doi.org/10.1103/PhysRevA.81.023420</a>.
</div>
<div id="ref-Kaseman2020" class="csl-entry">
Kaseman, Derrick C., Per E. Magnelind, Scarlett Widgeon Paisner, Jacob L. Yoder, Marc Alvarez, Algis V. Urbaitis, Michael T. Janicke, Pulak Nath, Michelle A. Espy, and Robert F. Williams. 2020. <span>“<span class="nocase">Design and implementation of a J-coupled spectrometer for multidimensional structure and relaxation detection at low magnetic fields</span>.”</span> <em>Review of Scientific Instruments</em> 91 (5): 054103. <a href="https://doi.org/10.1063/1.5130391">https://doi.org/10.1063/1.5130391</a>.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>60 MHz chosen simply because commercial instruments have been available at that field <em>for forever</em>.↩︎</p></li>
<li id="fn2"><p>The protons in something like <img src="https://latex.codecogs.com/png.latex?%5Cce%7BCH2Cl2%7D"> actually do couple to each other. With <a href="http://u-of-o-nmr-facility.blogspot.com/2008/06/spin-spin-coupling-between-equivalent.html?m=1">a little trick</a>, you can measure <img src="https://latex.codecogs.com/png.latex?J_%7BHH%7D">.↩︎</p></li>
<li id="fn3"><p>This is a general trend. The exact boundaries between various coupling regimes depends on the nuclei involved, the coupling constants and the peak separation in Larmor frequency (in Hz).↩︎</p></li>
<li id="fn4"><p>Remember, signals are very weak at EF so observing heteronuclei is significantly more challenging. See the <a href="https://chemospec.org/posts/2023-07-19-EF-NMR-1/EF-NMR-1.html">previous post</a> for details.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2023,
  author = {Hanson, Bryan},
  title = {The n + 1 Rule in {Earth’s} {Field} {NMR}},
  date = {2023-09-18},
  url = {http://chemospec.org/posts/2023-09-18-EF-NMR-2/EF-NMR-2.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2023" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2023. <span>“The n + 1 Rule in Earth’s Field NMR.”</span>
September 18, 2023. <a href="http://chemospec.org/posts/2023-09-18-EF-NMR-2/EF-NMR-2.html">http://chemospec.org/posts/2023-09-18-EF-NMR-2/EF-NMR-2.html</a>.
</div></div></section></div> ]]></description>
  <category>NMR</category>
  <category>EF-NMR</category>
  <category>JCS</category>
  <guid>http://chemospec.org/posts/2023-09-18-EF-NMR-2/EF-NMR-2.html</guid>
  <pubDate>Mon, 18 Sep 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>JEOL’s Delta Now Includes ChemoSpec</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2023-08-23-CS-Delta/CS-Delta.html</link>
  <description><![CDATA[ 




<p>Over on Twitter I caught news of a new application note from JEOL: Their Delta software for NMR now contains an interface to my R package <a href="https://bryanhanson.github.io/ChemoSpec/">ChemoSpec</a>. The application note is <a href="https://www.jeol.com/solutions/applications/details/nm220007.php">here</a> and gives a pretty complete overview of what they call the “chemometrics tool”. The JEOL software developers have added a number of short dialog boxes to access the various chemometric methods. The dialog boxes capture the arguments for each underlying function and then the full function call is assembled and passed to <a href="https://stat.ethz.ch/R-manual/R-devel/library/utils/html/Rscript.html">Rscript</a>, which is a command line version of R intended for embedded uses such as this one.</p>
<p>This is a good example of Free and Open Source Software (FOSS). ChemoSpec is licensed under <a href="https://www.gnu.org/licenses/gpl-3.0.html">GPL-3</a> which permits any reasonable use as long as there is attribution to the original authors.</p>
<p>Check out the first line of the “About Delta” box:</p>
<p><img src="http://chemospec.org/posts/2023-08-23-CS-Delta/Splash.png" class="img-fluid" style="width:80.0%"></p>



<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2023,
  author = {Hanson, Bryan},
  title = {JEOL’s {Delta} {Now} {Includes} {ChemoSpec}},
  date = {2023-08-23},
  url = {http://chemospec.org/posts/2023-08-23-CS-Delta/CS-Delta.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2023" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2023. <span>“JEOL’s Delta Now Includes ChemoSpec.”</span>
August 23, 2023. <a href="http://chemospec.org/posts/2023-08-23-CS-Delta/CS-Delta.html">http://chemospec.org/posts/2023-08-23-CS-Delta/CS-Delta.html</a>.
</div></div></section></div> ]]></description>
  <category>NMR</category>
  <category>FOSS</category>
  <guid>http://chemospec.org/posts/2023-08-23-CS-Delta/CS-Delta.html</guid>
  <pubDate>Wed, 23 Aug 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>FOSS4Spectroscopy Update</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2023-08-15-F4S-Update/F4S-Update.html</link>
  <description><![CDATA[ 




<p>Yesterday I pushed a major update to the <a href="https://bryanhanson.github.io/FOSS4Spectroscopy/">FOSS for Spectroscopy</a> web site. Remember that this is a lightly curated and imperfect process; I have some scripts that automate the discovery of packages, but there is still a considerable amount of manual inspection and decision making. If you think I’ve missed a package, please let me know.</p>
<p>It’s been nearly a year, and there are a number of new entries. Let’s do a quick comparison of the results from November 2022 versus August 2023. Back in November 2022 there were 246 packages; nearly a year later there are 287. Figure&nbsp;1 shows a Venn diagram of the changes.</p>
<div id="fig-venn" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-venn-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-08-15-F4S-Update/Venn.png" class="img-fluid figure-img" style="width:60.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-venn-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Venn diagram comparing the two sets of packages
</figcaption>
</figure>
</div>
<section id="package-language" class="level2">
<h2 class="anchored" data-anchor-id="package-language">Package Language</h2>
<p>Software development in spectroscopy is clearly actively occurring in the Python ecosystem; R has stalled (see Table&nbsp;1). Interpretation of this observation is challenging. A few thoughts:</p>
<ul>
<li>One could claim that the R ecosystem for spectroscopy is mature and further development is naturally going to be limited.</li>
<li>The growing popularity of the Python language surely contributes significantly.</li>
<li>One motivation for people to write packages is to learn the language and the package delivery system. There’s nothing wrong with these motivations, however this leads to packages that largely overlap in their features.</li>
</ul>
<div class="cell">
<div id="tbl-lang" class="cell quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-lang-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;1: Package language, 2022 vs 2023.
</figcaption>
<div aria-describedby="tbl-lang-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output-display">
<table quarto-disable-processing="true" class="table table-striped table-bordered" style="width: auto !important; margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;"> language </th>
   <th style="text-align:right;"> Nov 2022 </th>
   <th style="text-align:right;"> Aug 2023 </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> Python </td>
   <td style="text-align:right;"> 162 </td>
   <td style="text-align:right;"> 198 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> R </td>
   <td style="text-align:right;"> 60 </td>
   <td style="text-align:right;"> 61 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> C++ </td>
   <td style="text-align:right;"> 4 </td>
   <td style="text-align:right;"> 5 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Java </td>
   <td style="text-align:right;"> 4 </td>
   <td style="text-align:right;"> 4 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Julia </td>
   <td style="text-align:right;"> 4 </td>
   <td style="text-align:right;"> 5 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> C </td>
   <td style="text-align:right;"> 2 </td>
   <td style="text-align:right;"> 2 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Qt </td>
   <td style="text-align:right;"> 2 </td>
   <td style="text-align:right;"> 2 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> C-shell </td>
   <td style="text-align:right;"> 1 </td>
   <td style="text-align:right;"> 1 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> C# </td>
   <td style="text-align:right;"> 1 </td>
   <td style="text-align:right;"> 2 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Fortran </td>
   <td style="text-align:right;"> 1 </td>
   <td style="text-align:right;"> 1 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Go </td>
   <td style="text-align:right;"> 1 </td>
   <td style="text-align:right;"> 1 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> html </td>
   <td style="text-align:right;"> 1 </td>
   <td style="text-align:right;"> 1 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> JavaScript </td>
   <td style="text-align:right;"> 1 </td>
   <td style="text-align:right;"> 2 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> TypeScript </td>
   <td style="text-align:right;"> 1 </td>
   <td style="text-align:right;"> 1 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> XML </td>
   <td style="text-align:right;"> 1 </td>
   <td style="text-align:right;"> 1 </td>
  </tr>
</tbody>
</table>

</div>
</div>
</figure>
</div>
</div>
</section>
<section id="package-focus" class="level2">
<h2 class="anchored" data-anchor-id="package-focus">Package Focus</h2>
<p>Table&nbsp;2 shows the change in package focus. Most categories grew modestly.</p>
<div class="cell">
<div id="tbl-focus" class="cell quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-focus-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;2: Package focus, 2022 vs 2023.
</figcaption>
<div aria-describedby="tbl-focus-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output-display">
<table quarto-disable-processing="true" class="table table-striped table-bordered" style="width: auto !important; margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;"> category </th>
   <th style="text-align:right;"> Nov 2022 </th>
   <th style="text-align:right;"> Aug 2023 </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> Any </td>
   <td style="text-align:right;"> 32 </td>
   <td style="text-align:right;"> 34 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Data Sharing </td>
   <td style="text-align:right;"> 33 </td>
   <td style="text-align:right;"> 41 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> EEM </td>
   <td style="text-align:right;"> 3 </td>
   <td style="text-align:right;"> 3 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> EPR, ESR </td>
   <td style="text-align:right;"> 5 </td>
   <td style="text-align:right;"> 7 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> IR (all flavors) </td>
   <td style="text-align:right;"> 35 </td>
   <td style="text-align:right;"> 38 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Raman </td>
   <td style="text-align:right;"> 28 </td>
   <td style="text-align:right;"> 34 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> UV-Vis, UV, Vis </td>
   <td style="text-align:right;"> 19 </td>
   <td style="text-align:right;"> 20 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> LIBS </td>
   <td style="text-align:right;"> 3 </td>
   <td style="text-align:right;"> 5 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Muon </td>
   <td style="text-align:right;"> 1 </td>
   <td style="text-align:right;"> 0 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> PES </td>
   <td style="text-align:right;"> 1 </td>
   <td style="text-align:right;"> 2 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> XRF, XAS </td>
   <td style="text-align:right;"> 10 </td>
   <td style="text-align:right;"> 15 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> NMR </td>
   <td style="text-align:right;"> 87 </td>
   <td style="text-align:right;"> 97 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Time Series </td>
   <td style="text-align:right;"> 3 </td>
   <td style="text-align:right;"> 3 </td>
  </tr>
</tbody>
</table>

</div>
</div>
</figure>
</div>
</div>
</section>
<section id="personal-perspective" class="level2">
<h2 class="anchored" data-anchor-id="personal-perspective">Personal Perspective</h2>
<p>I’ve curated this site for several years now. One thing that is clear is that there is a lot of duplication of effort and features. I mentioned above a few reasons for this, but at some point it makes more sense to add to an existing package than to write one from scratch. However, this can only happen if people look around for existing software first. That of course is one purpose of the <a href="https://bryanhanson.github.io/FOSS4Spectroscopy/">FOSS for Spectroscopy</a> web site.</p>
<p>As I look at it,</p>
<ul>
<li>One-dimensional spectroscopic techniques produce collections of x,y data, usually spectra<sup>1</sup>, and can thus be stored in a matrix. <em>In terms of organization there’s nothing different between an IR spectrum and a UV-Vis spectrum.</em></li>
<li>Two-dimensional techniques produce data that can be stored in one of two ways:
<ul>
<li>One spectrum (or one wavelength) can be stored as matrix, so a set of spectra is a stack of matrices (termed an array in some languages). Think of 2D NMR spectra: one element of the stack is a single 2D spectrum.</li>
<li>Alternatively, individual spectra can be stored in a matrix and an additional data structure provides a key to how each spectrum relates to the others. Think of a Raman image: spectra are collected over a set of x,y locations.</li>
</ul></li>
</ul>
<p>This design decision is the core of building a package. Once you have decided on a structure:</p>
<ul>
<li>You need import methods, these are always tedious to write.
<ul>
<li>Broadly accepted formats, like JCAMP-DX or plain old csv.</li>
<li>Manufacturer specific formats, some of which may be poorly documented.</li>
</ul></li>
<li>You need processing methods.
<ul>
<li>Widely used methods, like normalization and smoothing.</li>
<li>Technique specific methods, such as zero-filling.</li>
</ul></li>
<li>You need analysis methods.
<ul>
<li>Common techniques like PCA.</li>
<li>Analysis unique to a specific technique.</li>
</ul></li>
<li>You need visualization methods.</li>
</ul>
<p>In an ideal world, a data storage structure is chosen and everything else can be built later, quickly at first and then more slowly. The reality however is that people keep reinventing most of the wheel. I suppose this is not too different from people inventing entirely new computer languages…</p>


</section>


<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I say “usually spectra” because for some instruments, depending upon the goal of the package, one may store raw data that must be transformed in a separate step. The best example is raw time-domain NMR data which must be Fourier transformed into frequency-domain spectra before analysis.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2023,
  author = {Hanson, Bryan},
  title = {FOSS4Spectroscopy {Update}},
  date = {2023-08-15},
  url = {http://chemospec.org/posts/2023-08-15-F4S-Update/F4S-Update.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2023" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2023. <span>“FOSS4Spectroscopy Update.”</span> August 15,
2023. <a href="http://chemospec.org/posts/2023-08-15-F4S-Update/F4S-Update.html">http://chemospec.org/posts/2023-08-15-F4S-Update/F4S-Update.html</a>.
</div></div></section></div> ]]></description>
  <category>FOSS</category>
  <guid>http://chemospec.org/posts/2023-08-15-F4S-Update/F4S-Update.html</guid>
  <pubDate>Tue, 15 Aug 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Earth’s Field NMR</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2023-07-19-EF-NMR-1/EF-NMR-1.html</link>
  <description><![CDATA[ 




<section id="tldr" class="level2">
<h2 class="anchored" data-anchor-id="tldr">TL;DR</h2>
<ul>
<li>In EF-NMR the line widths are extremely narrow but there is no chemical shift dispersion.</li>
<li>We can observe heteronuclear couplings in EF-NMR as they are field-invariant.</li>
<li>In EF-NMR the population of the two energy states is essentially equal, eliminating any signal. We can get around this with pre-polarization.</li>
<li>The resonance frequency of <img src="https://latex.codecogs.com/png.latex?%5Cce%7B%5E%7B1%7DH%7D"> NMR in EF is in the audio range, greatly simplifying the electronics.</li>
</ul>
<hr>
<p>Let’s take a closer look from first principles what kinds of information one can glean from EF-NMR. We’ll restrict our discussion to spin <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D"> nuclei with ~100% abundance, like <img src="https://latex.codecogs.com/png.latex?%5Cce%7B%5E%7B1%7DH%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cce%7B%5E%7B31%7DP%7D"> or <img src="https://latex.codecogs.com/png.latex?%5Cce%7B%5E%7B19%7DF%7D"> – you’ll see why soon enough. Table&nbsp;1 gives some relevant physical parameters for these nuclei.</p>
<div id="tbl-params" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-params-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;1: Important NMR parameters for ~100% abundant spin <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D"> nuclei. The units of <img src="https://latex.codecogs.com/png.latex?%5Cgamma"> are <img src="https://latex.codecogs.com/png.latex?10%5E7"> rad <img src="https://latex.codecogs.com/png.latex?T%5E%7B-1%7D"> <img src="https://latex.codecogs.com/png.latex?s%5E%7B-1%7D">. Larmor frequency is relative in MHz.
</figcaption>
<div aria-describedby="tbl-params-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Nuclei</th>
<th style="text-align: right;">Gyromagnetic ratio <img src="https://latex.codecogs.com/png.latex?%5Cgamma"></th>
<th style="text-align: right;">Larmor Freq.</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?%5Cce%7B%5E%7B1%7DH%7D"></td>
<td style="text-align: right;">26.7522</td>
<td style="text-align: right;">100</td>
</tr>
<tr class="even">
<td><img src="https://latex.codecogs.com/png.latex?%5Cce%7B%5E%7B19%7DF%7D"></td>
<td style="text-align: right;">25.1815</td>
<td style="text-align: right;">94</td>
</tr>
<tr class="odd">
<td><img src="https://latex.codecogs.com/png.latex?%5Cce%7B%5E%7B31%7DP%7D"></td>
<td style="text-align: right;">10.8394</td>
<td style="text-align: right;">40.5</td>
</tr>
</tbody>
</table>
</div>
</figure>
</div>
<p>Excellent general references on NMR theory are Friebolin <span class="citation" data-cites="Friebolin2011">(Friebolin 2011)</span> and Claridge <span class="citation" data-cites="Claridge2016">(Claridge 2016)</span>.</p>
</section>
<section id="line-widths-are-very-narrow" class="level2">
<h2 class="anchored" data-anchor-id="line-widths-are-very-narrow">Line Widths are Very Narrow</h2>
<p>The line width of an NMR signal is primarily dependent on the homogeneity of the <img src="https://latex.codecogs.com/png.latex?B_o"> field, which in the case of earth’s field is very good. <span class="citation" data-cites="Appelt2006">Appelt et al. (2006)</span> state that when observations are made &gt;100 meters from buildings and ferrous structures<sup>1</sup> the homogeneity of the earth’s magnetic field for small sample volumes is in the range of <img src="https://latex.codecogs.com/png.latex?%5CDelta%20B/B%20%3C%2010%5E%7B-6%7D">. They further state that when <img src="https://latex.codecogs.com/png.latex?T_1%20%5Csim%20T_2%20%3E%203"> seconds line widths will be less than 0.1 Hz.<sup>2</sup> This all sounds very promising: narrow lines imply good separation between peaks.</p>
</section>
<section id="no-chemical-shift-information" class="level2">
<h2 class="anchored" data-anchor-id="no-chemical-shift-information">No Chemical Shift Information</h2>
<p>One of the characteristics of high-field NMR which makes it so useful is the dispersion of chemical shifts as a function of structure. Unfortunately, EF-NMR has effectively zero chemical shift dispersion. The equation for computing chemical shift, <img src="https://latex.codecogs.com/png.latex?%5Cdelta">, is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cdelta%20=%20%5Cfrac%7B%5Cnu_%7Bsample%7D%20-%20%5Cnu_%7Breference%7D%7D%7B%5Cnu_%7BB_o%7D%7D%0A"></p>
<p>where the units are:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Appm%20=%20%5Cfrac%7BHz%7D%7BMHz%7D%0A"></p>
<p>since <img src="https://latex.codecogs.com/png.latex?%5Cdelta"> is a field strength independent quantity. Taking <img src="https://latex.codecogs.com/png.latex?%5Cnu_%7Breference%7D"> to be zero, e.g.&nbsp;TMS added to the sample, we can rearrange the equation to get <img src="https://latex.codecogs.com/png.latex?%5Cnu_%7Bsample%7D">. Consider the compound <img src="https://latex.codecogs.com/png.latex?%5Cce%7BCH3Br%7D"> whose methyl group has a chemical shift of 2.63 ppm. Using an earth’s field <img src="https://latex.codecogs.com/png.latex?%5Cce%7B%5E%7B1%7DH%7D"> Larmor frequency of 19.1 KHz, we can compute the shift of <img src="https://latex.codecogs.com/png.latex?%5Cce%7BCH3Br%7D"> in Hz as 0.0191 Hz. This is an extremely small value, smaller than the typical line width in earth’s field (so the promise of narrow line widths is not going to save us).</p>
<p>For further comparison, we can do the same calculation for <img src="https://latex.codecogs.com/png.latex?%5Cce%7BCH2Br2%7D"> which has a shift of 4.90 ppm. The result is exactly the same, 0.0191 Hz. We can see that these two compounds with differing numbers of halogens, which would be trivial to distinguish with a low field bench-top instrument operating at 80 MHz, are indistinguishable in earth’s field. This is due to the very small value of earth’s magnetic field.</p>
</section>
<section id="heteronuclear-couplings" class="level2">
<h2 class="anchored" data-anchor-id="heteronuclear-couplings">Heteronuclear Couplings</h2>
<p>While the chemical shift dispersion in earth’s field is clearly nil, heteronuclear J couplings are readily observed due to their greater magnitude, up to about 200 Hz. <span class="citation" data-cites="Appelt2006">Appelt et al. (2006)</span> gives a number of interesting examples involving <img src="https://latex.codecogs.com/png.latex?%5Cce%7B%5E%7B1%7DH%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cce%7B%5E%7B19%7DF%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cce%7B%5E%7B29%7DSi%7D"> containing compounds.</p>
</section>
<section id="populations-of-quantum-states" class="level2">
<h2 class="anchored" data-anchor-id="populations-of-quantum-states">Populations of Quantum States</h2>
<p>Basic NMR theory tells us that the energy difference between the two quantum states for a spin <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B2%7D"> nucleus is proportional to the field strength <img src="https://latex.codecogs.com/png.latex?B_o">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5CDelta%20E%20=%20%5Cgamma%20%5Chbar%20B_o%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Chbar"> is <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bh%7D%7B2%5Cpi%7D">. A plot for <img src="https://latex.codecogs.com/png.latex?%5Cce%7B%5E%7B1%7DH%7D"> is shown in Figure&nbsp;1; the right-most point corresponds to a 1,000 MHz instrument. Clearly as <img src="https://latex.codecogs.com/png.latex?B_o"> goes to zero the <img src="https://latex.codecogs.com/png.latex?%5CDelta%20E"> goes to zero in a simple linear fashion.</p>
<div class="cell">
<div class="cell-output-display">
<div id="fig-DeltaE" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-DeltaE-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-19-EF-NMR-1/EF-NMR-1_files/figure-html/fig-DeltaE-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-DeltaE-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: <img src="https://latex.codecogs.com/png.latex?%5CDelta">E as a function of field strength <img src="https://latex.codecogs.com/png.latex?B_o">
</figcaption>
</figure>
</div>
</div>
</div>
<p>We can then relate the number of nuclei in the upper energy state, <img src="https://latex.codecogs.com/png.latex?N_%7B%5Cbeta%7D">, to that in the lower energy state, <img src="https://latex.codecogs.com/png.latex?N_%7B%5Calpha%7D">, at thermal equilibrium as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7BN_%7B%5Cbeta%7D%7D%7BN_%7B%5Calpha%7D%7D%20=%20e%5E%7B-%20%5CDelta%20E/kT%7D%20%5Capprox%201%20-%20%5Cfrac%7B%5CDelta%20E%7D%7BkT%7D%20=%201-%20%5Cfrac%7B%5Cgamma%20%5Chbar%20B_o%7D%7BkT%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?k"> is the Boltzman constant and <img src="https://latex.codecogs.com/png.latex?T"> is the temperature in Kelvin. The ratio of population states is nearly equal for any value of <img src="https://latex.codecogs.com/png.latex?B_o"> but of course gets even worse as <img src="https://latex.codecogs.com/png.latex?B_o"> decreases. This is the reason for the low overall sensitivity of NMR as an analytical technique. We can compute the ratio for <img src="https://latex.codecogs.com/png.latex?%5Cce%7B%5E%7B1%7DH%7D"> at room temperature; we’ll compare the value for earth’s field to those of a 100 and 1,000 MHz instruments:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>      45 uT (Earth)    2.35 T (100 MHz) 23.49 T (1,000 MHz) 
     1.000000000000      0.999999999998      0.999999999982 </code></pre>
</div>
</div>
<p>As you can see, in earth’s field there is basically no difference in the two population states, meaning there is no signal to observe. Clearly a problem!</p>
<p>If all the nuclei were in <img src="https://latex.codecogs.com/png.latex?N_%7B%5Calpha%7D"> we could measure the energy required to bump them up to <img src="https://latex.codecogs.com/png.latex?N_%7B%5Cbeta%7D">, or more commonly, bump them up and then watch the energy given off as equilibrium returns. Unfortunately, the signal produced is proportional to <img src="https://latex.codecogs.com/png.latex?N_%7B%5Calpha%7D%20-%20N_%7B%5Cbeta%7D">, which is effectively zero in earth’s field. At the same time however, the more spins we have, the higher the signal will be. More spins total in the detection coil sweet spot will be helpful, but there are other factors mitigating against making large coils to accommodate large samples. One way around this is to use signal averaging.</p>
</section>
<section id="pre-polarization" class="level2">
<h2 class="anchored" data-anchor-id="pre-polarization">Pre-Polarization</h2>
<p>In the case of earth’s field NMR, the usual way around this problem of very limited signal is to pre-polarize the sample.<sup>3</sup> This basically involves subjecting the sample to a fairly high magnetic field for a brief period before measuring the any signals. This pre-polarization field forces more of the <img src="https://latex.codecogs.com/png.latex?N_%7B%5Cbeta%7D"> nuclei to assume the lower energy <img src="https://latex.codecogs.com/png.latex?N_%7B%5Calpha%7D"> state, thus increasing <img src="https://latex.codecogs.com/png.latex?N_%7B%5Calpha%7D%20-%20N_%7B%5Cbeta%7D"> which means there is a signal to be observed. Mohorič has an excellent but technical discussion of the details of this process <span class="citation" data-cites="Mohoric2009">(Mohorič and Stepišnick 2009)</span>.</p>
</section>
<section id="ef-nmr-signals-are-in-the-audio-range" class="level2">
<h2 class="anchored" data-anchor-id="ef-nmr-signals-are-in-the-audio-range">EF-NMR Signals are in the Audio Range</h2>
<p>What is the Larmor (resonance) frequency in earth’s field? Earth’s magnetic field <a href="https://en.wikipedia.org/wiki/Earth%27s_magnetic_field">varies</a> from about 25 to 65 <img src="https://latex.codecogs.com/png.latex?%5Cmu">T; we’ll use an intermediate value of 45 <img src="https://latex.codecogs.com/png.latex?%5Cmu">T for our calculations. The Larmor frequency is given by the equation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cnu_%7BL%7D%20=%20%5Clvert%5Cfrac%7B%5Cgamma%7D%7B2%5Cpi%7D%5Crvert%20B_o%0A"></p>
<p>Notice there is a simple linear relation between <img src="https://latex.codecogs.com/png.latex?%5Cnu_%7BL%7D"> and <img src="https://latex.codecogs.com/png.latex?B_o">.<sup>4</sup> If we plug in values for our nuclei we get the following values in Hz:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>       1H       19F       31P 
19159.852 18034.921  7763.148 </code></pre>
</div>
</div>
<p>What we have shown here is that for EF-NMR, resonance frequencies are in the <a href="https://en.wikipedia.org/wiki/Audio_frequency">audio</a> (20 - 20,000 Hz) and lower <a href="https://en.wikipedia.org/wiki/Radio_frequency">radio</a> (20,000 Hz +) frequency range. Why is this important? It greatly simplifies signal detection because audio receivers are essentially radios, and the electronics for working in this frequency range are extremely well worked out, and not expensive to buy or build.</p>
</section>
<section id="historical-note" class="level2">
<h2 class="anchored" data-anchor-id="historical-note">Historical Note</h2>
<p>The first earth’s field NMR experiment was apparently conducted by Martin Packard and Russell Varian while at Varian Associates <span class="citation" data-cites="Packard1954">(Packard and Varian 1954)</span>. Varian Associates was of course a major instrument player, including NMR, and for a long time marketed their instruments largely toward colleges. <sup>5</sup></p>



</section>


<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-Appelt2006" class="csl-entry">
Appelt, Stephan, Holger Kühn, F. Wolfgang Häsing, and Bernhard Blümich. 2006. <span>“Chemical Analysis by Ultrahigh-Resolution Nuclear Magnetic Resonance in the Earth’s Magnetic Field.”</span> <em>Nature Physics</em> 2. <a href="https://doi.org/10.1038/nphys211">https://doi.org/10.1038/nphys211</a>.
</div>
<div id="ref-Claridge2016" class="csl-entry">
Claridge, Timothy D. W. 2016. <em>High-Resolution NMR Techniques in Organic Chemistry</em>. Elsevier.
</div>
<div id="ref-Friebolin2011" class="csl-entry">
Friebolin, Horst. 2011. <em>Basic One- and Two-Dimensional NMR Spectroscopy</em>. Wiley-VCH.
</div>
<div id="ref-Mohoric2009" class="csl-entry">
Mohorič, Aleš, and Janez Stepišnick. 2009. <span>“NMR in the Earth’s Magnetic Field.”</span> <em>Progress in Nuclear Magnetic Resonance Spectroscopy</em> 54: 166–82. <a href="https://doi.org/10.1016/j.pnmrs.2008.07.002">https://doi.org/10.1016/j.pnmrs.2008.07.002</a>.
</div>
<div id="ref-Packard1954" class="csl-entry">
Packard, Martin, and Russell Varian. 1954. <span>“Free Nuclear Induction in the Earth’s Magnetic Field.”</span> <em>Physical Review</em> 93: 939.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Keep in mind that buried utilities made of iron or carrying electrical current can interfere.↩︎</p></li>
<li id="fn2"><p><img src="https://latex.codecogs.com/png.latex?T_1"> is the relaxation time for magnetization aligned with the <img src="https://latex.codecogs.com/png.latex?B_o"> axis, which corresponds to the <img src="https://latex.codecogs.com/png.latex?z"> axis. This is the relaxation time that affects the ability to pulse quickly. It’s also called the spin-lattice relaxation time. <img src="https://latex.codecogs.com/png.latex?T_2"> is the relaxation time corresponding to magnetization in the <img src="https://latex.codecogs.com/png.latex?x,y"> plane, and is also known as the spin-spin relaxation time. <img src="https://latex.codecogs.com/png.latex?T_2"> is largely determined by magnetic field inhomogeneity and the line width at half peak height is <img src="https://latex.codecogs.com/png.latex?%5CDelta%20%5Cnu_%7B1/2%7D%20=%20%5Cgamma%20%5CDelta%20B_o%20/2">. <img src="https://latex.codecogs.com/png.latex?T_1%20%5Cge%20T_2">. See Friebolin chapter 7 for a detailed discussion.↩︎</p></li>
<li id="fn3"><p>In fact pre-polarizing or polarizing the sample is now en-vogue for higher field instruments as well, in the form of DNP, SABRE etc.↩︎</p></li>
<li id="fn4"><p>The gyromagnetic ratio can be negative, hence the absolute value is taken here.↩︎</p></li>
<li id="fn5"><p>Martin Packard is apparently <a href="https://hsm.stackexchange.com/q/15580/18707">unrelated</a> to David Packard, one of the founders of HP.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2023,
  author = {Hanson, Bryan},
  title = {Earth’s {Field} {NMR}},
  date = {2023-07-26},
  url = {http://chemospec.org/posts/2023-07-19-EF-NMR-1/EF-NMR-1.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2023" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2023. <span>“Earth’s Field NMR.”</span> July 26, 2023. <a href="http://chemospec.org/posts/2023-07-19-EF-NMR-1/EF-NMR-1.html">http://chemospec.org/posts/2023-07-19-EF-NMR-1/EF-NMR-1.html</a>.
</div></div></section></div> ]]></description>
  <category>NMR</category>
  <category>EF-NMR</category>
  <guid>http://chemospec.org/posts/2023-07-19-EF-NMR-1/EF-NMR-1.html</guid>
  <pubDate>Wed, 26 Jul 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Home Built Photometer</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2023-07-16-Photometer/Photometer.html</link>
  <description><![CDATA[ 




<p>Way back in 2014, I ordered the parts and started to build a photometer according to the plans laid out by <span class="citation" data-cites="McClain2014">McClain (2014)</span>. I didn’t get very far, it was a busy time. Well, I have finally completed the project!</p>
<p>A number of simple designs for photometers and spectrometers have been published. What drew me to McClain’s approach is that his goal is to teach some basic electronics relevant to instrument design, which is something I have wanted to learn for sometime (apparently since 2014, though actually I think this goes back to watching my father build a Heath Kit stereo receiver which used <em>tubes</em>). Further, McClain starts with a very simple design, and then adds circuit modules to improve the design. Everything is laid out logically and is easy to follow. At each step there is an opportunity to go further to understand how the circuit actually works in detail.</p>
<p>In this post I’ll describe the project at various stages. All the electronics are McClain’s design, but instead of McClain’s cuvette holder I used the design of Kvittingen (<span class="citation" data-cites="Kvittingen2017">Kvittingen et al. (2017)</span>) which uses LEGO bricks as a sample holder and can accommodate an additional detector for fluorescence measurements.</p>
<p>This design is a photometer, and not a spectrophotometer, because only one wavelength at a time can be measured. The source LED must have an emission spectrum overlapping with the <img src="https://latex.codecogs.com/png.latex?%5Clambda_%7Bmax%7D"> of the compound to be measured; LEDs are available which cover pieces of the whole visible spectrum so it’s pretty easy to swap for a different wavelength range. The detector photodiode (a type of LED, working in reverse) responds over a broad wavelength range, though with greatly varying efficiency. If one wants to measure fluorescence, the photodiode is moved to the 90<img src="https://latex.codecogs.com/png.latex?%5E%7B%5Ccirc%7D"> position.<sup>1</sup></p>
<p>A couple of important notes:</p>
<ul>
<li>The supplementary material to McClain’s article is where everything is covered in detail.</li>
<li>A membership to <a href="https://www.circuitlab.com">CircuitLab</a> was really helpful as it allowed me to simulate circuits and change values of components to get a better sense of how things work in detail (as you will see).</li>
<li>I was hoping to get by without an oscilloscope, but ultimately I needed one for troubleshooting. It turned out to really advance my understanding of the circuits. I purchased a <a href="https://www.picotech.com/oscilloscope/2000/picoscope-2000-overview">PicoScope 2204A</a> which along with the software turns your computer into a basic oscilloscope. Strongly recommended, it’s a very nice product!</li>
</ul>
<section id="version-1-dc-power-supply-for-the-led" class="level2">
<h2 class="anchored" data-anchor-id="version-1-dc-power-supply-for-the-led">Version 1: DC Power Supply for the LED</h2>
<p>In this version a standard “green” LED (maximum emission at 523 nm) is used as the light source and has the simplest possible power supply. As built, the system provides a current of about 26 mA to the LED. The data sheet recommends 30 mA max.</p>
<p>The detector in this version is a photodiode linked to a TIA, a transimpedance amplifier. This is an current to voltage (I to V) converter, and something similar can be used in any instrument where a detector generates a current. Figure&nbsp;1 shows the circuit.</p>
<p>The main deviation from McClain’s design is that R2 needed to be set to 3M <img src="https://latex.codecogs.com/png.latex?%5Cohm"> in order to reach about 1V on the output. McClain gives a range of 100K to 1M. As the value of this resistor goes up, the output voltage goes up due to increasing amplification. This change is likely necessary as the photodiode in use here is a bit different than McClain specified. After some experimentation, the current on I1 (which replicates the current produced by the photodiode in the simulation) was set to 1/10,000 of the value of the current of D1, based upon currents observed when isolating D2 from the rest of the circuit.</p>
<p>Monitoring the current and voltage across D2 as built and warmed up, the values were about 0.3 <img src="https://latex.codecogs.com/png.latex?%5Cmu">A and 0.23 V; if the LEGO holding D1 was moved immediately adjacent to that holding D2 these numbers were 0.7 <img src="https://latex.codecogs.com/png.latex?%5Cmu">A and 0.26 V. These readings support the discussion above that the photodiode was generating a relatively small response.</p>
<div id="fig-mcclain-v1" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-mcclain-v1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/mcclain-v1.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-mcclain-v1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Version 1 with simple LED power supply and a transimpedance amplifier as the detector.
</figcaption>
</figure>
</div>
<p>Figure&nbsp;2 and Figure&nbsp;3 show the project from each side.</p>
<div id="fig-build-v1-2" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-build-v1-2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/build-v1-2.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-build-v1-2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: View of project. The simplicity of the supply to the LED is apparent. The top rail is the negative supply, the lower rail is the positive supply, and the 2nd-from-bottom rail is the ground.
</figcaption>
</figure>
</div>
<div id="fig-build-v1-1" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-build-v1-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/build-v1-1.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-build-v1-1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: View of project. The op amp for the detector is in the foreground.
</figcaption>
</figure>
</div>
</section>
<section id="version-2-relaxation-oscillator-as-the-led-power-supply" class="level2">
<h2 class="anchored" data-anchor-id="version-2-relaxation-oscillator-as-the-led-power-supply">Version 2: Relaxation Oscillator as the LED Power Supply</h2>
<p>The next step in McClain’s scheme is to change the basic power supply to a more sophisticated “relaxation oscillator” which produces a square wave output with a certain frequency. The idea here is to eliminate stray room light from affecting the output by using a specific AC-like frequency as the source and then modify the detector to only see this frequency. Stray room light may consist of random light causing DC offsets in the circuit, or something more determinant like 60 Hz flicker from light fixtures.</p>
<section id="simulation" class="level3">
<h3 class="anchored" data-anchor-id="simulation">Simulation</h3>
<p>The relaxation oscillator circuit was modeled in CircuitLab before building the circuit. The circuit is in Figure&nbsp;4 and the simulation results are shown in Figure&nbsp;5.</p>
<div id="fig-mcclain-relax-osc" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-mcclain-relax-osc-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/mcclain-relax-osc.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-mcclain-relax-osc-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;4: The relaxation oscillator circuit.
</figcaption>
</figure>
</div>
<div id="fig-mcclain-relax-osc-out-2" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-mcclain-relax-osc-out-2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/mcclain-relax-osc-out-2.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-mcclain-relax-osc-out-2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;5: The relaxation oscillator simulation output. The gold/orange line indicates the charge on C2 building and decaying. When it reaches an extreme positive or negative value, the phase of the output square wave changes. The lower plot is the very small current produced at the output of the op amp.
</figcaption>
</figure>
</div>
</section>
<section id="as-built" class="level3">
<h3 class="anchored" data-anchor-id="as-built">As Built</h3>
<p>Capacitor C2 controls the frequency of the square wave produced by the relaxation oscillator. Figure&nbsp;6 shows the oscilloscope traces with C2 set to 1<img src="https://latex.codecogs.com/png.latex?%5Cmu">F which gives a frequency of about 8 Hz, as seen in the video below. This serves as visual “proof of concept”. Figure&nbsp;7 shows the oscilloscope traces for a value of 4700 pF for C2 which generates a square wave with frequency 1,500 Hz. This is higher than the frequency of any room light flickering and thus will serve as a “carrier” of the absorbance value unaltered by any stray room light, once we add the other modules to the detection side.</p>
<p><em>Note that all oscilloscope traces have two vertical scales, one on the left and one on the right, color coordinated with the trace.</em></p>
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="slow-blink.mp4"></video></div>
<div id="fig-relax-osc-1uF" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-relax-osc-1uF-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/TP-A-vs-B-1uF.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-relax-osc-1uF-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;6: Relaxation oscillator with a 1<img src="https://latex.codecogs.com/png.latex?%5Cmu">F capcitor for C2. The blue curve is the output of the op amp, the red line is the charging and discharging of C2. Note the box at the bottom which reports the period of the square wave, which corresponds to a frequency of about 8 Hz.
</figcaption>
</figure>
</div>
<div id="fig-relax-osc-4700pF" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-relax-osc-4700pF-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/TP-A-vs-B.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-relax-osc-4700pF-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;7: Relaxation oscillator with C2 at 4700 pF. Note the horizontal scale range is much smaller than in the previous figure, as the frequency is much higher.
</figcaption>
</figure>
</div>
<p>The built version of the relaxation oscillator corresponds well with the simulation.</p>
</section>
</section>
<section id="version-3-almost-all-the-bells-and-whistles" class="level2">
<h2 class="anchored" data-anchor-id="version-3-almost-all-the-bells-and-whistles">Version 3: Almost All the Bells and Whistles</h2>
<p>This final version contains all the circuits as described by McClain. I decided to measure voltages directly at the output rather than use an Arduino and display to provide an absorbance value.</p>
<p>Figure&nbsp;8 shows the final circuit. Note that several test points are labeled and referred to in the discussion below.</p>
<div id="fig-complete-circuit" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-complete-circuit-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/complete-circuit.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-complete-circuit-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;8: Completed project with key modules labeled. <a href="imgs/complete-circuit.png">Click</a> for full size.
</figcaption>
</figure>
</div>
<section id="relaxation-oscillator" class="level3">
<h3 class="anchored" data-anchor-id="relaxation-oscillator">Relaxation Oscillator</h3>
<p>The details of the relaxation oscillator are exactly as described above.</p>
</section>
<section id="current-amplifier" class="level3">
<h3 class="anchored" data-anchor-id="current-amplifier">Current Amplifier</h3>
<p>As the simulation of the relaxation oscillator shows, the current output of the op amp is very small. Consequently a simple transistor is used to bump up the current driving the LED source to an appropriate value.</p>
</section>
<section id="i-to-v-converter" class="level3">
<h3 class="anchored" data-anchor-id="i-to-v-converter">I to V Converter</h3>
<p>The I to V converter circuit is the same as described earlier.</p>
</section>
<section id="high-pass-filter" class="level3">
<h3 class="anchored" data-anchor-id="high-pass-filter">High Pass Filter</h3>
<p>A high pass filter takes a signal that is time-varying, in our case a square wave, and filters it so that only high frequency components are kept. This is a key part of the detector design, since we create an approximately 1,500 Hz square wave and any other component, like 60 Hz flicker from room lights, should be eliminated. Figure&nbsp;9 shows an isolated version of our high pass filter, and Figure&nbsp;10 shows the frequency dependency filtering.</p>
<div id="fig-high-pass-circuit" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-high-pass-circuit-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/high-pass-circuit.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-high-pass-circuit-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;9: Isolated high pass filter circuit.
</figcaption>
</figure>
</div>
<div id="fig-high-pass-performance" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-high-pass-performance-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/high-pass-performance.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-high-pass-performance-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;10: Frequency dependence of the high pass filter. Lower values on the vertical axis means greater attenuation.
</figcaption>
</figure>
</div>
</section>
<section id="half-wave-rectifier" class="level3">
<h3 class="anchored" data-anchor-id="half-wave-rectifier">Half Wave Rectifier</h3>
<p>A half wave rectifier converts an alternating current, alternating between positive and negative values, into a positive only form. Essentially, the negative portion of the signal is converted to positive values, and the positive portion is set to zero. Figure&nbsp;11 shows the action of the rectifier.</p>
<div id="fig-half-wave" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-half-wave-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/TP-D-vs-E.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-half-wave-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;11: Action of the half wave rectifier. The red trace is observed at test point D, and fluctuates positive and negative. The blue trace is the rectified wave observed at test point E. Notice that its voltage is always positive.
</figcaption>
</figure>
</div>
</section>
<section id="active-low-pass-filter" class="level3">
<h3 class="anchored" data-anchor-id="active-low-pass-filter">Active Low Pass Filter</h3>
<p>The final step is an active low pass filter which only passes signals below a certain frequency <em>and</em> amplifies them (that’s the active part). Importantly, in addition to amplifying the signal, the op amp emits a steady DC voltage which is ultimately proportional to the current hitting the photodiode. This is the value we are after when making absorbance measurements. Figure&nbsp;12 shows the actual output.</p>
<div id="fig-low-pass" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-low-pass-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/TP-E-vs-F.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-low-pass-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;12: Effect of the low pass filter. The red curve is the same as in the previous figure, namely test poiont D. The blue line is the final DC output at test point F. This is where the final voltages are measured.
</figcaption>
</figure>
</div>
<p>If we isolate the low pass filter circuit we can try to understand its operation in greater detail. Figure&nbsp;13 shows the isolated circuit with simulation inputs configured to match the measured inputs.</p>
<div id="fig-active-LPF-circuit" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-active-LPF-circuit-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/active-LPF-circuit.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-active-LPF-circuit-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;13: Isolated active low pass filter circuit.
</figcaption>
</figure>
</div>
<p>If we look at the frequency dependence of this circuit, we see that low frequencies are passed relatively unattenuated (Figure&nbsp;14), as expected. The combination of the earlier high pass filter and this low pass filter amounts to a band pass filter. This suggests a potential follow up design which uses a band pass filter followed by rectification and conversion to DC by some combination of op amps.</p>
<div id="fig-active-LPF-frequency" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-active-LPF-frequency-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/active-LPF-frequency.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-active-LPF-frequency-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;14: Attenuation of high frequencies by the low pass filter.
</figcaption>
</figure>
</div>
<p>In addition to the filtering behavior, we know that the circuit produces a steady DC current from the approximately square wave input. Let’s check this using the simulator again, but this time looking at output voltages. Figure&nbsp;15 shows the results, which should ideally be close to those in Figure&nbsp;12.</p>
<div id="fig-active-LPF-voltage" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-active-LPF-voltage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/active-LPF-voltage.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-active-LPF-voltage-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;15: Voltages produce by the active low pass filer. The square wave is the simulated input. The gold/orange line is the output DC voltage, which is higher than observed, probably due to an imperfect simulation configuration. The key point is that a steady DC voltage is produced.
</figcaption>
</figure>
</div>
</section>
<section id="calibration-curve" class="level3">
<h3 class="anchored" data-anchor-id="calibration-curve">Calibration Curve</h3>
<p>A calibration curve was prepared using a 10 mL plastic syringe and some small bottles. Two drops of red food coloring were added to 10 mL of water to create the first solution. Three mL of the stock solution was added to seven mL of water. This 2nd solution was then diluted in similar fashion and so forth, to get five total solutions. Tap water was used. The green LED was disconnected and the dark current was measured. Next, tap water was used as a blank. Then the voltage for each sample was recorded (voltage measurements are taken at point F in Figure&nbsp;8). Listing&nbsp;1 shows the computational steps. Figure&nbsp;16 shows the samples from most concentrated to least concentrated.</p>
<div id="fig-cal-samples" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-cal-samples-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/cal-samples.png" class="img-fluid figure-img">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-cal-samples-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;16: Calibration samples.
</figcaption>
</figure>
</div>
<div class="cell">
<div id="lst-comp" class="r cell-code listing quarto-float quarto-figure quarto-figure-left anchored">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-comp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;1: Computation of absorbance values.
</figcaption>
<div aria-describedby="lst-comp-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode cell-code" id="lst-comp" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="lst-comp-1">dark <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.0e-3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dark voltage</span></span>
<span id="lst-comp-2">blank <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.281</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tap water</span></span>
<span id="lst-comp-3">voltage <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">26.2e-3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">26.8e-3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">34.0e-3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">99.9e-3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">196.0e-3</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample readings</span></span>
<span id="lst-comp-4">stock <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2 drops red food coloring in 10 mL tap water</span></span>
<span id="lst-comp-5">dil <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># serial dilution factor</span></span>
<span id="lst-comp-6">conc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(stock, dil<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="lst-comp-7">DF <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Concentration =</span> conc, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Voltage =</span> voltage)</span>
<span id="lst-comp-8">DF<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Absorbance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>((DF<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Voltage <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dark)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(blank <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dark))</span></code></pre></div>
</div>
</figure>
</div>
</div>
<p>Table&nbsp;1 shows the results. A calibration curve is shown in Figure&nbsp;17. Clearly the most concentrated samples exceed the linear behavior expected for Beer’s Law (as observed by McClain). If the two most concentrated samples are dropped, the result is a nice linear relationship, as seen in Figure&nbsp;18 and the summary of the fit in Listing&nbsp;2.</p>
<div class="cell" data-tbl-colwidths="[30,30,30]">
<div id="tbl-results" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-tbl-colwidths="[30,30,30]">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-results-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;1: Relative sample concentrations and corresponding voltages and absorbances.
</figcaption>
<div aria-describedby="tbl-results-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output-display">
<table quarto-disable-processing="true" class="table table-striped table-bordered" style="width: auto !important; margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:right;"> Concentration </th>
   <th style="text-align:right;"> Voltage </th>
   <th style="text-align:right;"> Absorbance </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:right;"> 1.0000 </td>
   <td style="text-align:right;"> 0.0262 </td>
   <td style="text-align:right;"> 2.611089 </td>
  </tr>
  <tr>
   <td style="text-align:right;"> 0.3000 </td>
   <td style="text-align:right;"> 0.0268 </td>
   <td style="text-align:right;"> 2.581818 </td>
  </tr>
  <tr>
   <td style="text-align:right;"> 0.0900 </td>
   <td style="text-align:right;"> 0.0340 </td>
   <td style="text-align:right;"> 2.284567 </td>
  </tr>
  <tr>
   <td style="text-align:right;"> 0.0270 </td>
   <td style="text-align:right;"> 0.0999 </td>
   <td style="text-align:right;"> 1.074541 </td>
  </tr>
  <tr>
   <td style="text-align:right;"> 0.0081 </td>
   <td style="text-align:right;"> 0.1960 </td>
   <td style="text-align:right;"> 0.369747 </td>
  </tr>
</tbody>
</table>

</div>
</div>
</figure>
</div>
</div>
<div class="cell">
<div class="cell-output-display">
<div id="fig-calcurve1" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-calcurve1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/Photometer_files/figure-html/fig-calcurve1-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-calcurve1-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;17: Calibration curve, hardware version 3.
</figcaption>
</figure>
</div>
</div>
</div>
<div class="cell">
<div id="lst-fit" class="r cell-code listing quarto-float quarto-figure quarto-figure-left anchored">
<figure class="quarto-float quarto-float-lst figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-lst" id="lst-fit-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Listing&nbsp;2: Results of fitting the three lowest concentration samples.
</figcaption>
<div aria-describedby="lst-fit-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="sourceCode cell-code" id="lst-fit" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="lst-fit-1">DF35 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> DF[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,]</span>
<span id="lst-fit-2">fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(DF35<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Absorbance <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> DF35<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Concentration)</span>
<span id="lst-fit-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(fit)</span></code></pre></div>
</div>
</figure>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = DF35$Absorbance ~ DF35$Concentration)

Residuals:
       1        2        3 
-0.03688  0.15983 -0.12294 

Coefficients:
                   Estimate Std. Error t value Pr(&gt;|t|)  
(Intercept)          0.3118     0.1840   1.694   0.3394  
DF35$Concentration  22.3292     3.3801   6.606   0.0956 .
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.205 on 1 degrees of freedom
Multiple R-squared:  0.9776,    Adjusted R-squared:  0.9552 
F-statistic: 43.64 on 1 and 1 DF,  p-value: 0.09564</code></pre>
</div>
</div>
<div class="cell">
<div class="cell-output-display">
<div id="fig-calcurve2" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-calcurve2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="http://chemospec.org/posts/2023-07-16-Photometer/Photometer_files/figure-html/fig-calcurve2-1.png" class="img-fluid figure-img" width="672">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-calcurve2-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;18: Calibration curve, hardware version 3, dropping the two most concentrated samples.
</figcaption>
</figure>
</div>
</div>
</div>
<p>Not too bad!</p>
</section>
</section>
<section id="references" class="level2 unnumbered">




</section>


<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-Kvittingen2017" class="csl-entry">
Kvittingen, Eivind V, Lise Kvittingen, Thor Bernt Melo, Birte Johanne Sjursnes, and Richard Verley. 2017. <span>“Demonstrating Basic Properties of Spectroscopy Using a Self-Constructed Combined Fluorimeter and UV-Photometer.”</span> <em>Journal of Chemical Education</em> 94: 1486–91.
</div>
<div id="ref-McClain2014" class="csl-entry">
McClain, Robert L. 2014. <span>“Construction of a Photometer as an Instructional Tool for Electronics and Instrumentation.”</span> <em>Journal of Chemical Education</em> 91: 747–50.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I have not tested the fluoresence measurement as other projects are calling me. In addition to changing the position of the photodiode, a few resistors may need to be changed in order to achieve sufficient signal.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2023,
  author = {Hanson, Bryan},
  title = {Home {Built} {Photometer}},
  date = {2023-07-16},
  url = {http://chemospec.org/posts/2023-07-16-Photometer/Photometer.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2023" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2023. <span>“Home Built Photometer.”</span> July 16,
2023. <a href="http://chemospec.org/posts/2023-07-16-Photometer/Photometer.html">http://chemospec.org/posts/2023-07-16-Photometer/Photometer.html</a>.
</div></div></section></div> ]]></description>
  <category>hardware</category>
  <category>electronics</category>
  <category>photometer</category>
  <guid>http://chemospec.org/posts/2023-07-16-Photometer/Photometer.html</guid>
  <pubDate>Sun, 16 Jul 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>DIY NMR in Earth’s Field</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2023-06-12-DIY-NMR/DIY-NMR.html</link>
  <description><![CDATA[ 




<p>I have always loved every aspect of NMR. My first introduction was as an undergraduate at Cal State Los Angeles, where I was introduced to a Bruker instrument that used a folded punched tape to read in its operating system. Fortunately, that machine was already quite older and there was a Varian EM-360 which was the work horse for routine spectra (bonus points if you can guess roughly what year this was!). Besides the extremely broad usefulness of NMR instruments, the combination of physics, chemistry, computer science and electronics that undergird the practical aspects of NMR are endlessly fascinating to me.</p>
<p>The development of simple, home-built NMR instruments over the past two decades is very interesting and appealing. These instruments typically don’t have a magnet, but rather use the earth’s magnetic field and some type of polarization process to improve sensitivity. Most of these instruments use an inexpensive microprocessor like an Arduino or Raspberry Pi to control the instrument, along with some purpose-built electronic circuits. Good examples are the work of Michal (<span class="citation" data-cites="Michal2010">Michal (2010)</span>, <span class="citation" data-cites="Michal2020">Michal (2020)</span>), Trevelyan (<span class="citation" data-cites="Trevelyan">Manley (2019)</span>) and Bryden (<span class="citation" data-cites="Bryden2021">Bryden et al. (2021)</span>). These instruments of course aren’t able to give the same results as higher-field instruments with superconducting magnets or Halbach arrays. What can you do with these instruments? Because earth’s magnetic field is very homogeneous locally, the line widths are very narrow, and thus coupling constants and <img src="https://latex.codecogs.com/png.latex?T_2"> can be measured.<sup>1</sup> However, the chemical shift range is really small, so structural studies are out. Sensitivity is relatively poor as well. Imaging (MRI) is in principle possible. By the way, there are also examples of DIY Nuclear Quadropole Resonce (NQR) instruments as well, which require no magnetic field (<span class="citation" data-cites="Hiblot2008">Hiblot et al. (2008)</span>).</p>
<p>Recently, a simpler DIY NMR instrument was published as a <a href="https://hackaday.io/">Hackaday</a> project by Andy Nichol. This <a href="https://hackaday.io/project/191192-nuclear-magnetic-resonance-for-everyone">“Nuclear Magnetic Resonance for Everybody”</a> project is unique due to its use of only off-the-shelf commericially available hardware components. Because the hydrogen Larmor precession frequency in earth’s magnetic field is in the audio range, the project uses a standard and readily available audio amplifier to simplify the signal detection process. In addition, the complexities of pulse programming are avoided in this project by using a mechanical switch to switch between polarization and detection modes. Finally, a single coil is employed for both polarization and detection. Signal processing is handled by readily available software.</p>
<p>This is an interesting project and it is the most basic entry point into DIY NMR that I have encountered. If it whets your appetite, the project can be made progressively more sophisticated by selectively bringing in the more advanced features of some of the other designs.</p>





<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-Bryden2021" class="csl-entry">
Bryden, Nicolas, Michael Antonacci, Michele Kelley, and Rosa T. Branca. 2021. <span>“An Open-Source, Low-Cost NMR Spectrometer Operating in the mT Field Regime.”</span> <em>Journal Magnetic Resonance</em> 332. <a href="https://doi.org/10.1016/j.jmr.2021.107076">https://doi.org/10.1016/j.jmr.2021.107076</a>.
</div>
<div id="ref-Hiblot2008" class="csl-entry">
Hiblot, Nicolas, Benoit Cordier, Maude Ferrari, Alain Retournard, Denis Gradclaude, Jerome Bedet, Sebastien Leclerc, and Daniel Canet. 2008. <span>“A Fully Homemade <img src="https://latex.codecogs.com/png.latex?%5E%7B14%7DN"> Quadrupole Resonance Spectrometer.”</span> <em>Comptus Rendus Chemie</em> 11: 568–79. <a href="https://doi.org/10.1016/j.crci.2007.08.011">https://doi.org/10.1016/j.crci.2007.08.011</a>.
</div>
<div id="ref-Trevelyan" class="csl-entry">
Manley, S. W. 2019. <em>MRI and NMR Spectroscopy in the Earth’s Field</em>.
</div>
<div id="ref-Michal2010" class="csl-entry">
Michal, Carl T. 2010. <span>“A Low-Cost Spectrometer for NMR Measurements in the Earth’s Magnetic Field.”</span> <em>Meas. Sci. Technol.</em> 21. <a href="https://doi.org/10.1088/0957-0233/21/10/105902">https://doi.org/10.1088/0957-0233/21/10/105902</a>.
</div>
<div id="ref-Michal2020" class="csl-entry">
———. 2020. <span>“Low-Cost Low-Field NMR and MRI: Instrumentation and Applications.”</span> <em>Journal Magnetic Resonance</em> 319. <a href="https://doi.org/10.1016/j.jmr.2020.106800">https://doi.org/10.1016/j.jmr.2020.106800</a>.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Locally homogeneous provided you are away from buildings, electrical transmission lines etc.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2023,
  author = {Hanson, Bryan},
  title = {DIY {NMR} in {Earth’s} {Field}},
  date = {2023-06-12},
  url = {http://chemospec.org/posts/2023-06-12-DIY-NMR/DIY-NMR.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2023" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2023. <span>“DIY NMR in Earth’s Field.”</span> June 12,
2023. <a href="http://chemospec.org/posts/2023-06-12-DIY-NMR/DIY-NMR.html">http://chemospec.org/posts/2023-06-12-DIY-NMR/DIY-NMR.html</a>.
</div></div></section></div> ]]></description>
  <category>NMR</category>
  <category>EF-NMR</category>
  <category>NQR</category>
  <category>DIY</category>
  <guid>http://chemospec.org/posts/2023-06-12-DIY-NMR/DIY-NMR.html</guid>
  <pubDate>Mon, 12 Jun 2023 07:00:00 GMT</pubDate>
</item>
<item>
  <title>You Can Now Subscribe</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2022-11-07-Announce-Subscribe/Announce-Subscribe.html</link>
  <description><![CDATA[ 




<p>Just a short post to let readers know that you can now subscribe to this blog. Of course, you have always been able to get the RSS feed via the buttons in the navbar, but now you can submit your e-mail and my cheap-ass free level MailChimp account will let you know when there is a new post. You might find this useful if you are leaving Twitter or Twitter collapses completely!</p>



<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2022,
  author = {Hanson, Bryan},
  title = {You {Can} {Now} {Subscribe}},
  date = {2022-11-07},
  url = {http://chemospec.org/posts/2022-11-07-Announce-Subscribe/Announce-Subscribe.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2022" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2022. <span>“You Can Now Subscribe.”</span> November 7,
2022. <a href="http://chemospec.org/posts/2022-11-07-Announce-Subscribe/Announce-Subscribe.html">http://chemospec.org/posts/2022-11-07-Announce-Subscribe/Announce-Subscribe.html</a>.
</div></div></section></div> ]]></description>
  <category>Housekeeping</category>
  <guid>http://chemospec.org/posts/2022-11-07-Announce-Subscribe/Announce-Subscribe.html</guid>
  <pubDate>Mon, 07 Nov 2022 07:00:00 GMT</pubDate>
</item>
<item>
  <title></title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2022-10-05-Linear-Alg-Notes-Pt5/Linear-Alg-Notes-Pt5.html</link>
  <description><![CDATA[ undefined ]]></description>
  <category>R</category>
  <category>Linear Algebra</category>
  <guid>http://chemospec.org/posts/2022-10-05-Linear-Alg-Notes-Pt5/Linear-Alg-Notes-Pt5.html</guid>
  <pubDate>Wed, 05 Oct 2022 07:00:00 GMT</pubDate>
</item>
<item>
  <title></title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2023-03-03-Create-MUD/Creating-MUD.html</link>
  <description><![CDATA[ undefined ]]></description>
  <category>R</category>
  <category>Linear Algebra</category>
  <guid>http://chemospec.org/posts/2023-03-03-Create-MUD/Creating-MUD.html</guid>
  <pubDate>Wed, 05 Oct 2022 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Notes on Linear Algebra Part 4</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2022-11-07-Announce-Subscribe/2022-09-26-Linear-Alg-Notes-Pt4/Linear-Alg-Notes-Pt4.html</link>
  <description><![CDATA[ 




<p>Series: <a href="https://chemospec.org/posts/2022-08-14-Linear-Alg-Notes/2022-08-14-Linear-Alg-Notes.html">Part 1</a> <a href="https://chemospec.org/posts/2022-09-01-Linear-Alg-Notes-Pt2/Linear-Alg-Notes-Pt2.html">Part 2</a> <a href="https://chemospec.org/posts/2022-09-10-Linear-Alg-Notes-Pt3/Linear-Alg-Notes-Pt3.html">Part 3</a></p>
<p>Back in Part 2 I mentioned some of the challenges of learning linear algebra. One of those challenges is making sense of all the special types of matrices one encounters. In this post I hope to shed a little light on that topic.</p>
<section id="a-taxonomy-of-matrices" class="level1">
<h1>A Taxonomy of Matrices</h1>
<p>I am strongly drawn to thinking in terms of categories and relationships. I find visual presentations like phylogenies showing the relationships between species very useful. In the course of my linear algebra journey, I came across an interesting Venn diagram developed by the very creative thinker <a href="https://github.com/kenjihiranabe/The-Art-of-Linear-Algebra">Kenji Hiranabe</a>. The diagram is discussed at <a href="https://anagileway.com/2020/09/29/matrix-world-in-linear-algebra-for-everyone/">Matrix World</a>, but the latest version is at the Github link. A Venn diagram is a useful format, but I was inspired to recast the information in different format. Figure&nbsp;1 shows a taxonomy I created using a portion of the information in Hiranabe’s Venn diagram.<sup>1</sup> The taxonomy is primarily organized around what I am calling the <em>structure</em> of a matrix: what does it look like upon visual inspection? Of course this is most obvious with small matrices. To me at least, structure is one of the most obvious characteristics of a matrix: an upper triangular matrix really stands out for instance. Secondarily, the taxonomy includes a number of queries that one can ask about a matrix: for instance, is the matrix invertible? We’ll need to expand on all of this of course, but first take a look at the figure.<sup>2</sup></p>
<div style="page-break-after: always;"></div>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div id="fig-flow" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-flow-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div>
<pre class="mermaid mermaid-js" data-label="fig-flow">flowchart TD
A(all matrices &lt;br/&gt; n x m) --&gt; C(row matrices &lt;br/&gt; 1 x n)
A --&gt; D(column matrices &lt;br/&gt; n x 1)
A ---&gt; B(square matrices &lt;br/&gt; n x n)
B --&gt; E(upper triangular&lt;br/&gt;matrices)
B --&gt; F(lower triangular&lt;br/&gt;matrices)
B --&gt; G{{either:&lt;br/&gt;is singular?}}
B --&gt; H{{or:&lt;br/&gt;is invertible?}}
H --&gt; I{{is diagonalizable?}}
I --&gt; J{{is normal?}}
J --&gt; K(symmetric)
K --&gt; L(diagonal)
L --&gt; M(identity)
J --&gt; N{{is orthogonal?}}
N --&gt; M
style G fill:#FFF0F5
style H fill:#FFF0F5
style I fill:#FFF0F5
style J fill:#FFF0F5
style N fill:#FFF0F5
</pre>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-flow-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Hierarchical relationships between different types of matrices. <em>Blue Rectangles</em> denote matrices with particular, recognizable <em>structures</em>. <em>Pink Hexagons</em> indicate properties that can be <em>queried</em>.
</figcaption>
</figure>
</div>
</div>
</div>
<div style="page-break-after: always;"></div>
</section>
<section id="touring-the-taxonomy" class="level1">
<h1>Touring the Taxonomy</h1>
<section id="structure-examples" class="level2">
<h2 class="anchored" data-anchor-id="structure-examples">Structure Examples</h2>
<p>Let’s use <code>R</code> to construct and inspect examples of each type of matrix. We’ll use integer matrices to keep the print output nice and neat, but of course real numbers could be used as well.<sup>3</sup> Most of these are pretty straightforward so we’ll keep comments to a minimum for the simple cases.</p>
<section id="rectangular-matrix-m-times-n" class="level3">
<h3 class="anchored" data-anchor-id="rectangular-matrix-m-times-n">Rectangular Matrix <img src="https://latex.codecogs.com/png.latex?m%20%5Ctimes%20n"></h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb1-1">A_rect <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if you give nrow,</span></span>
<span id="cb1-2">A_rect <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># R will compute ncol from the length of the data</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12</code></pre>
</div>
</div>
<p>Notice that <code>R</code> is “column major” meaning data fills the first column, then the second column and so forth.</p>
</section>
<section id="row-matrixvector-1-times-n" class="level3">
<h3 class="anchored" data-anchor-id="row-matrixvector-1-times-n">Row Matrix/Vector <img src="https://latex.codecogs.com/png.latex?1%20%5Ctimes%20n"></h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb3-1">A_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-2">A_row</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4]
[1,]    1    2    3    4</code></pre>
</div>
</div>
</section>
<section id="column-matrixvector-m-times-1" class="level3">
<h3 class="anchored" data-anchor-id="column-matrixvector-m-times-1">Column Matrix/Vector <img src="https://latex.codecogs.com/png.latex?m%20%5Ctimes%201"></h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb5-1">A_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-2">A_col</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1]
[1,]    1
[2,]    2
[3,]    3
[4,]    4</code></pre>
</div>
</div>
<p>Keep in mind that to save space in a text-dense document one would often write <code>A_col</code> as its transpose.<sup>4</sup></p>
</section>
<section id="square-matrix-n-times-n" class="level3">
<h3 class="anchored" data-anchor-id="square-matrix-n-times-n">Square Matrix <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"></h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb7-1">A_sq <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb7-2">A_sq</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9</code></pre>
</div>
</div>
</section>
<section id="upper-and-lower-triangular-matrices" class="level3">
<h3 class="anchored" data-anchor-id="upper-and-lower-triangular-matrices">Upper and Lower Triangular Matrices</h3>
<p>Creating an upper triangular matrix requires a few more steps. Function <code>upper.tri()</code> returns a logical matrix which can be used as a mask to select entries. Function <code>lower.tri()</code> can be used similarly. Both functions have an argument <code>diag = TRUE/FALSE</code> indicating whether to include the diagonal.<sup>5</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">upper.tri</span>(A_sq, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">diag =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      [,1]  [,2] [,3]
[1,]  TRUE  TRUE TRUE
[2,] FALSE  TRUE TRUE
[3,] FALSE FALSE TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb11-1">A_upper <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> A_sq[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">upper.tri</span>(A_sq)] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gives a logical matrix</span></span>
<span id="cb11-2">A_upper <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># notice that a vector is returned, not quite what might have been expected!</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4 7 8</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb13-1">A_upper <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> A_sq <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># instead, create a copy to be modified</span></span>
<span id="cb13-2">A_upper[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lower.tri</span>(A_upper)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assign the lower entries to zero</span></span>
<span id="cb13-3">A_upper</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    0    5    8
[3,]    0    0    9</code></pre>
</div>
</div>
<p>Notice to create an upper triangular matrix we use <code>lower.tri()</code> to assign zeros to the lower part of an existing matrix.</p>
</section>
<section id="identity-matrix" class="level3">
<h3 class="anchored" data-anchor-id="identity-matrix">Identity Matrix</h3>
<p>If you give <code>diag()</code> a single value it defines the dimensions and creates a matrix with ones on the diagonal, in other words, an identity matrix.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb15-1">A_ident <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-2">A_ident</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1</code></pre>
</div>
</div>
</section>
<section id="diagonal-matrix" class="level3">
<h3 class="anchored" data-anchor-id="diagonal-matrix">Diagonal Matrix</h3>
<p>If instead you give <code>diag()</code> a vector of values these go on the diagonal and the length of the vector determines the dimensions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb17-1">A_diag <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb17-2">A_diag</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    2    0    0
[3,]    0    0    3    0
[4,]    0    0    0    4</code></pre>
</div>
</div>
</section>
<section id="symmetric-matrices" class="level3">
<h3 class="anchored" data-anchor-id="symmetric-matrices">Symmetric Matrices</h3>
<p>Matrices created by <code>diag()</code> are symmetric matrices, but any matrix where <img src="https://latex.codecogs.com/png.latex?a_%7Bij%7D%20=%20a_%7Bji%7D"> is symmetric. There is no general function to create symmetric matrices since there is no way to know what data should be used. However, one can ask if a matrix is symmetric, using the function <code>isSymmetric()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isSymmetric</span>(A_diag)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
</section>
</section>
<section id="the-queries" class="level2">
<h2 class="anchored" data-anchor-id="the-queries">The Queries</h2>
<p>Let’s take the queries in the taxonomy in order, as the hierarchy is everything.</p>
<section id="is-the-matrix-singular-or-invertible" class="level3">
<h3 class="anchored" data-anchor-id="is-the-matrix-singular-or-invertible">Is the Matrix Singular or Invertible?</h3>
<p>A singular matrix is one in which one or more rows are multiples of another row, or alternatively, one or more columns are multiples of another column. Why do we care? Well, it turns out a singular matrix is a bit of a dead end, you can’t do much with it. An invertible matrix, however, is a very useful entity and has many applications. What is an invertible matrix? In simple terms, being invertible means the matrix has an inverse. This is not the same as the algebraic definition of an inverse, which is related to division:</p>
<p><span id="eq-1"><img src="https://latex.codecogs.com/png.latex?%0Ax%5E%7B-1%7D%20=%20%5Cfrac%7B1%7D%7Bx%7D%0A%5Ctag%7B1%7D"></span></p>
<p>Instead, for matrices, invertibility of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> is defined as the existence of another matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BB%7D"> such that</p>
<p><span id="eq-2"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%5Cmathbf%7BB%7D%20=%20%5Cmathbf%7BB%7D%5Cmathbf%7BA%7D%20=%20%5Cmathbf%7BI%7D%0A%5Ctag%7B2%7D"></span></p>
<p>Just as <img src="https://latex.codecogs.com/png.latex?x%5E%7B-1%7D"> cancels out <img src="https://latex.codecogs.com/png.latex?x"> in <img src="https://latex.codecogs.com/png.latex?x%5E%7B-1%7Dx%20=%20%5Cfrac%7Bx%7D%7Bx%7D%20=%201">, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BB%7D"> cancels out <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> to give the identity matrix. In other words, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BB%7D"> is really <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%5E%7B-1%7D">.</p>
<p>A singular matrix has determinant of zero. On the other hand, an invertible matrix has a non-zero determinant. So to determine which type of matrix we have before us, we can simply compute the determinant.</p>
<p>Let’s look at a few simple examples.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb21-1">A_singular <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb21-2">A_singular <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># notice that col 2 is col 1 * -3, they are not independent</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2]
[1,]    1   -3
[2,]   -2    6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">det</span>(A_singular)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb25-1">A_invertible <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb25-2">A_invertible</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2]
[1,]    2    7
[2,]    2    8</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">det</span>(A_invertible)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>
</section>
<section id="is-the-matrix-diagonalizable" class="level3">
<h3 class="anchored" data-anchor-id="is-the-matrix-diagonalizable">Is the Matrix Diagonalizable?</h3>
<p>A matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> that is diagonalizable can be expressed as:</p>
<p><span id="eq-3"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7B%5CLambda%7D%20=%20%5Cmathbf%7BX%7D%5E%7B-1%7D%5Cmathbf%7BA%7D%5Cmathbf%7BX%7D%0A%5Ctag%7B3%7D"></span></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D"> is a diagonal matrix – the diagonalized version of the original matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D">. How do we find out if this is possible, and if possible, what are the values of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D">? The answer is to decompose <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> using the eigendecomposition:</p>
<p><span id="eq-4"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%20=%20%5Cmathbf%7BX%7D%5Cmathbf%7B%5CLambda%7D%5Cmathbf%7BX%7D%5E%7B-1%7D%0A%5Ctag%7B4%7D"></span></p>
<p>Now there is a lot to know about the eigendecomposition, but for now let’s just focus on a few key points:</p>
<ul>
<li>The columns of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D"> contains the eigenvectors. Eigenvectors are the most natural basis for describing the data in <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D">.<sup>6</sup></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D"> is a diagonal matrix with the eigenvalues on the diagonal, in descending order. The individual eigenvalues are typically denoted <img src="https://latex.codecogs.com/png.latex?%5Clambda_i">.</li>
<li>Eigenvectors and eigenvalues always come in pairs.</li>
</ul>
<p>We can answer the original question by using the <code>eigen()</code> function in <code>R</code>. Let’s do an example.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb29-1">A_eigen <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb29-2">A_eigen</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    2    0
[2,]    0    3    0
[3,]    2   -4    2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb31-1">eA <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eigen</span>(A_eigen)</span>
<span id="cb31-2">eA</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>eigen() decomposition
$values
[1] 3 2 1

$vectors
           [,1] [,2]       [,3]
[1,]  0.4082483    0  0.4472136
[2,]  0.4082483    0  0.0000000
[3,] -0.8164966    1 -0.8944272</code></pre>
</div>
</div>
<p>Since <code>eigen(A_eigen)</code> was successful, we can conclude that <code>A_eigen</code> was diagonalizable. You can see the eigenvalues and eigenvectors in the returned value. We can reconstruct <code>A_eigen</code> using Equation&nbsp;4:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb33-1">eA<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vectors <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(eA<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(eA<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vectors)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    2    0
[2,]    0    3    0
[3,]    2   -4    2</code></pre>
</div>
</div>
<p>Remember, <code>diag()</code> creates a matrix with the values along the diagonal, and <code>solve()</code> computes the inverse when it gets only one argument.</p>
<p>The only loose end is which matrices are <em>not</em> diagonalizable? These are covered in this <a href="https://en.wikipedia.org/wiki/Diagonalizable_matrix#Matrices_that_are_not_diagonalizable">Wikipedia article</a>. Briefly, most non-diagonalizable matrices are fairly exotic and real data sets will likely not be a problem.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Nuances About the Presentation of “Eigenstuff”
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>In texts, eigenvalues and eigenvectors are universally introduced as a scaling relationship</p>
<p><span id="eq-4a"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%5Cmathbf%7Bv%7D%20=%20%5Clambda%5Cmathbf%7Bv%7D%0A%5Ctag%7B5%7D"></span></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bv%7D"> is a column eigenvector and <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is a scalar eigenvalue. One says “<img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> scales <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bv%7D"> by a factor of <img src="https://latex.codecogs.com/png.latex?%5Clambda">.” A single vector is used as one can readily illustrate how that vector grows or shrinks in length when multiplied by <img src="https://latex.codecogs.com/png.latex?%5Clambda">. Let’s call this the “bottom up” explanation.</p>
<p>Let’s check that is true using our values from above by extracting the first eigenvector and eigenvalue from <code>eA</code>. Notice that we are using regular multiplication on the right-hand-side, i.e.&nbsp;<code>*</code>, rather than <code>%*%</code>, because <code>eA$values[1]</code> is a scalar. Also on the right-hand-side, we have to add <code>drop = FALSE</code> to the subsetting process or the result is no longer a matrix.<sup>7</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(</span>
<span id="cb35-2">  A_eigen <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> eA<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vectors[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb35-3">  eA<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> eA<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vectors[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drop =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>If instead we start from Equation&nbsp;4 and rearrange it to show the relationship between <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5CLambda%7D"> we get:</p>
<p><span id="eq-4b"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%5Cmathbf%7BX%7D%20=%20%5Cmathbf%7BX%7D%5Cmathbf%7B%5CLambda%7D%0A%5Ctag%7B6%7D"></span></p>
<p>Let’s call this the “top down” explanation. We can verify this as well, making sure to convert <code>eA$values</code> to a diagonal matrix as the values are stored as a vector to save space.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(A_eigen <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> eA<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vectors, eA<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vectors <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(eA<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Notice that in Equation&nbsp;6 <img src="https://latex.codecogs.com/png.latex?%5CLambda"> is on the right of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D">, but in Equation&nbsp;5 the corresponding value, <img src="https://latex.codecogs.com/png.latex?%5Clambda">, is to the left of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bv%7D">. This is a bit confusing until one realizes that Equation&nbsp;5 could have been written</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%5Cmathbf%7Bv%7D%20=%20%5Cmathbf%7Bv%7D%5Clambda%0A"></p>
<p>since <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is a scalar. It’s too bad that the usual, bottom up, presentation seems to conflict with the top down approach. Perhaps the choice in Equation&nbsp;5 is a historical artifact.</p>
</div>
</div>
</div>
</section>
<section id="is-the-matrix-normal" class="level3">
<h3 class="anchored" data-anchor-id="is-the-matrix-normal">Is the Matrix Normal?</h3>
<p>A normal matrix is one where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%5E%7B%5Cmathsf%7BT%7D%7D%5Cmathbf%7BA%7D%20=%20%5Cmathbf%7BA%7D%5Cmathbf%7BA%7D%5E%7B%5Cmathsf%7BT%7D%7D">. As far as I know, there is no function in <code>R</code> to check this condition, but we’ll write our own in a moment. One reason being “normal” is interesting is if <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> is a normal matrix, then the results of the eigendecomposition change slightly:</p>
<p><span id="eq-5"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%20=%20%5Cmathbf%7BO%7D%5Cmathbf%7B%5CLambda%7D%5Cmathbf%7BO%7D%5E%7B-1%7D%0A%5Ctag%7B7%7D"></span></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BO%7D"> is an orthogonal matrix, which we’ll talk about next.</p>
</section>
<section id="is-the-matrix-orthogonal" class="level3">
<h3 class="anchored" data-anchor-id="is-the-matrix-orthogonal">Is the Matrix Orthogonal?</h3>
<p>An orthogonal matrix takes the definition of a normal matrix one step further: <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%5E%7B%5Cmathsf%7BT%7D%7D%5Cmathbf%7BA%7D%20=%20%5Cmathbf%7BA%7D%5Cmathbf%7BA%7D%5E%7B%5Cmathsf%7BT%7D%7D%20=%20%5Cmathbb%7BI%7D">. If a matrix is orthogonal, then its transpose is equal to its inverse: <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%5E%7B-1%7D%20=%20%5Cmathbf%7BA%7D%5E%7B%5Cmathsf%7BT%7D%7D">, which of course makes any special computation of the inverse unnecessary. This is a significant advantage in computations.</p>
<p>To aid our learning, let’s write a simple function that will report if a matrix is normal, orthogonal, or neither.<sup>8</sup></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb39-1">normal_or_orthogonal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(M) {</span>
<span id="cb39-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inherits</span>(M, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matrix"</span>)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M must be a matrix"</span>)</span>
<span id="cb39-3">  norm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> orthog <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb39-4">  tst1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> M <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(M)</span>
<span id="cb39-5">  tst2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(M) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> M</span>
<span id="cb39-6">  norm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(tst1, tst2))</span>
<span id="cb39-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (norm) orthog <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(tst1, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(M)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])))</span>
<span id="cb39-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (orthog) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This matrix is orthogonal</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> </span>
<span id="cb39-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (norm) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This matrix is normal</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb39-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This matrix is neither orthogonal nor normal</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb39-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb39-12">}</span></code></pre></div>
</div>
<p>And let’s run a couple of tests.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normal_or_orthogonal</span>(A_singular)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>This matrix is neither orthogonal nor normal</code></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb42-1">Norm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb42-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normal_or_orthogonal</span>(Norm)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>This matrix is normal</code></pre>
</div>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normal_or_orthogonal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the identity matrix is orthogonal</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>This matrix is orthogonal</code></pre>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb46-1">Orth <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb46-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normal_or_orthogonal</span>(Orth)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>This matrix is orthogonal</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Some other properties of an orthogonal matrix
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The columns of an orthogonal matrix are orthogonal to each other. We can show this by taking the dot product between any pair of columns. Remember is the dot product is zero the vectors are orthogonal.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(Orth[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> Orth[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># col 1 dot col 2</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1]
[1,]    0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(Orth[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> Orth[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># col 1 dot col 3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1]
[1,]    0</code></pre>
</div>
</div>
<p>Finally, not only are the columns orthogonal, but each column vector has length one, making them orthonormal.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(Orth[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
</div>
</div>
</div>
</section>
<section id="appreciating-the-queries" class="level3">
<h3 class="anchored" data-anchor-id="appreciating-the-queries">Appreciating the Queries</h3>
<p>Taking these queries together, we see that symmetric and diagonal matrices are necessarily invertible, diagonalizable and normal. They are not however orthogonal. Identity matrices however, have all these properties. Let’s double-check these statements.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb54-1">A_sym <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb54-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb54-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># symmetric matrix, not diagonal</span></span>
<span id="cb54-4">A_sym</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    5    4
[2,]    5    2    9
[3,]    4    9    3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normal_or_orthogonal</span>(A_sym)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>This matrix is normal</code></pre>
</div>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normal_or_orthogonal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># diagonal matrix, symmetric, but not the identity matrix</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>This matrix is normal</code></pre>
</div>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">normal_or_orthogonal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># identity matrix (also symmetric, diagonal)</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>This matrix is orthogonal</code></pre>
</div>
</div>
<p>So what’s the value of these queries? As mentioned, they help us understand the relationships between different types of matrices, so they help us learn more deeply. On a practical computational level they may not have much value, especially when dealing with real-world data sets. However, there are some other interesting aspects of these queries that deal with decompositions and eigenvalues. We might cover these in the future.</p>
</section>
</section>
</section>
<section id="an-emerging-theme" class="level1">
<h1>An Emerging Theme?</h1>
<p>A more personal thought: In the course of writing these posts, and learning more linear algebra, it increasingly seems to me that a lot of the “effort” that goes into linear algebra is about making tedious operations simpler. Anytime one can have more zeros in a matrix, or have orthogonal vectors, or break a matrix into parts, the simpler things become. However, I haven’t really seen this point driven home in texts or tutorials. I think linear algebra learners would do well to keep this in mind.</p>
</section>
<section id="annotated-bibliography" class="level1">
<h1>Annotated Bibliography</h1>
<p>These are the main sources I relied on for this post.</p>
<ul>
<li><em>The No Bullshit Guide to Linear Algebra</em> by <a href="https://minireference.com">Ivan Savov</a>.
<ul>
<li>Section 6.2 Special types of matrices</li>
<li>Section 6.6 Eigendecomposition</li>
</ul></li>
<li><em>Linear Algebra: step by step</em> by Kuldeep Singh, Oxford Univerity Press, 2014.
<ul>
<li>Section 4.4 Orthogonal Matrices</li>
<li>Section 7.3.2 Diagonalization</li>
<li>Section 7.4 Diagonalization of Symmetric Matrices</li>
</ul></li>
<li>Wikipedia articles on the types of matrices.</li>
</ul>


</section>


<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I’m only using a portion because the Hiranbe’s original contains a bit too much information for someone trying to get their footing in the field.↩︎</p></li>
<li id="fn2"><p>I’m using the term taxonomy a little loosely of course, you can call it whatever you want. The name is not so important really, what is important is the hierarchy of concepts.↩︎</p></li>
<li id="fn3"><p>As could complex numbers.↩︎</p></li>
<li id="fn4"><p>Usually in written text a row matrix, sometimes called a row vector, is written as <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20=%20%5Cbegin%7Bbmatrix%7D1%20&amp;%202%20&amp;%203%5Cend%7Bbmatrix%7D">. In order to save space in documents, rather than writing <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20=%20%5Cbegin%7Bbmatrix%7D1%20%5C%5C%202%20%5C%5C%203%5Cend%7Bbmatrix%7D">, a column matrix/vector can be kept to a single line by writing it as its transpose: <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20=%20%5Cbegin%7Bbmatrix%7D1%20&amp;%202%20&amp;%203%5Cend%7Bbmatrix%7D%5E%7B%5Cmathsf%7BT%7D%7D">, but this requires a little mental gymnastics to visualize.↩︎</p></li>
<li id="fn5"><p>Upper and lower triangular matrices play a special role in linear algebra. Because of the presence of many zeros, multiplying them and inverting them is relatively easy, because the zeros cause terms to drop out.↩︎</p></li>
<li id="fn6"><p>This idea of the “most natural basis” is most easily visualized in two dimensions. If you have some data plotted on <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> axes, determining the line of best fit is one way of finding the most natural basis for describing the data. However, more generally and in more dimensions, principal component analysis (PCA) is the most rigorous way of finding this natural basis, and PCA can be calculated with the <code>eigen()</code> function. Lots more information <a href="https://bryanhanson.github.io/LearnPCA/">here</a>.↩︎</p></li>
<li id="fn7"><p>The <code>drop</code> argument to subsetting/extracting defaults to <code>TRUE</code> which means that if subsetting reduces the necessary number of dimensions, the unneeded dimension attributes are dropped. Under the default, selecting a single column of a matrix leads to a vector, not a one column vector. In this <code>all.equal()</code> expression we need both sides to evaluate to a matrix.↩︎</p></li>
<li id="fn8"><p>One might ask why <code>R</code> does not provide a user-facing version of such a function. I think a good argument can be made that the authors of <code>R</code> passed down a robust and lean set of linear algebra functions, geared toward getting work done, and throwing errors as necessary.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2022,
  author = {Hanson, Bryan},
  title = {Notes on {Linear} {Algebra} {Part} 4},
  date = {2022-09-26},
  url = {http://chemospec.org/posts/2022-11-07-Announce-Subscribe/2022-09-26-Linear-Alg-Notes-Pt4/Linear-Alg-Notes-Pt4.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2022" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2022. <span>“Notes on Linear Algebra Part 4.”</span>
September 26, 2022. <a href="http://chemospec.org/posts/2022-11-07-Announce-Subscribe/2022-09-26-Linear-Alg-Notes-Pt4/Linear-Alg-Notes-Pt4.html">http://chemospec.org/posts/2022-11-07-Announce-Subscribe/2022-09-26-Linear-Alg-Notes-Pt4/Linear-Alg-Notes-Pt4.html</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Linear Algebra</category>
  <guid>http://chemospec.org/posts/2022-11-07-Announce-Subscribe/2022-09-26-Linear-Alg-Notes-Pt4/Linear-Alg-Notes-Pt4.html</guid>
  <pubDate>Mon, 26 Sep 2022 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Notes on Linear Algebra Part 3</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2022-09-10-Linear-Alg-Notes-Pt3/Linear-Alg-Notes-Pt3.html</link>
  <description><![CDATA[ 




<p>Series: <a href="https://chemospec.org/posts/2022-08-14-Linear-Alg-Notes/2022-08-14-Linear-Alg-Notes.html">Part 1</a> <a href="https://chemospec.org/posts/2022-09-01-Linear-Alg-Notes-Pt2/Linear-Alg-Notes-Pt2.html">Part 2</a></p>
<p><em>Update 19 September 2022: in “Use of outer() for Matrix Multiplication”, corrected use of “cross” to be “outer” and added example in <code>R</code>. Also added links to work by Hiranabe.</em></p>
<p>This post is a survey of the linear algebra-related functions from base <code>R</code>. Some of these I’ve disccused in other posts and some I may discuss in the future, but this post is primarily an inventory: these are the key tools we have available. “Notes” in the table are taken from the help files.</p>
<p>Matrices, including row and column vectors, will be shown in bold e.g.&nbsp;<img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> or <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Ba%7D"> while scalars and variables will be shown in script, e.g.&nbsp;<img src="https://latex.codecogs.com/png.latex?n">. <code>R</code> code will appear like <code>x &lt;- y</code>.</p>
<p>In the table, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BR%7D"> or <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D"> is an upper/right triangular matrix. <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BL%7D"> is a lower/left triangular matrix (triangular matrices are square). <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> is a generic matrix of dimensions <img src="https://latex.codecogs.com/png.latex?m%20%5Ctimes%20n">. <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BM%7D"> is a square matrix of dimensions <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n">.</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th style="text-align: left;">Function</th>
<th style="text-align: left;">Uses</th>
<th style="text-align: left;">Notes</th>
<th style="text-align: left;"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>operators</strong></td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>*</code></td>
<td style="text-align: left;">scalar multiplication</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>%*%</code></td>
<td style="text-align: left;">matrix multiplication</td>
<td style="text-align: left;">two vectors <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> the dot product; vector + matrix <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> cross product (vector will be promoted as needed)<sup>1</sup></td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>basic functions</strong></td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>t()</code></td>
<td style="text-align: left;">transpose</td>
<td style="text-align: left;">interchange rows and columns</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>crossprod()</code></td>
<td style="text-align: left;">matrix multiplication</td>
<td style="text-align: left;">faster version of <code>t(A) %*% A</code></td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>tcrossprod()</code></td>
<td style="text-align: left;">matrix multiplication</td>
<td style="text-align: left;">faster version of <code>A %*% t(A)</code></td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>outer()</code></td>
<td style="text-align: left;">outer product &amp; more</td>
<td style="text-align: left;">see discussion below</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>det()</code></td>
<td style="text-align: left;">computes determinant</td>
<td style="text-align: left;">uses the LU decomposition; determinant is a volume</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>isSymmetric()</code></td>
<td style="text-align: left;">name says it all</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>Conj()</code></td>
<td style="text-align: left;">computes complex conjugate</td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><strong>decompositions</strong></td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>backsolve()</code></td>
<td style="text-align: left;">solves <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BRx%7D%20=%20%5Cmathbf%7Bb%7D"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>forwardsolve()</code></td>
<td style="text-align: left;">solves <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BLx%7D%20=%20%5Cmathbf%7Bb%7D"></td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>solve()</code></td>
<td style="text-align: left;">solves <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BMx%7D%20=%20%5Cmathbf%7Bb%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BM%7D%5E%7B-1%7D"></td>
<td style="text-align: left;">e.g.&nbsp;linear systems; if given only one matrix returns the inverse</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>qr()</code></td>
<td style="text-align: left;">solves <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%20=%20%5Cmathbf%7BQR%7D"></td>
<td style="text-align: left;"><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BQ%7D"> is an orthogonal matrix; can be used to solve <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BAx%7D%20=%20%5Cmathbf%7Bb%7D">; see <code>?qr</code> for several <code>qr.*</code> extractor functions</td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>chol()</code></td>
<td style="text-align: left;">solves <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BM%7D%20=%20%5Cmathbf%7BL%7D%5Cmathbf%7BL%7D%5E%7B%5Cmathsf%7BT%7D%7D%20=%20%5Cmathbf%7BU%7D%5E%7B%5Cmathsf%7BT%7D%7D%5Cmathbf%7BU%7D"></td>
<td style="text-align: left;">Only applies to positive semi-definite matrices (where <img src="https://latex.codecogs.com/png.latex?%5Clambda%20%5Cge%200">); related to LU decomposition</td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>chol2inv()</code></td>
<td style="text-align: left;">computes <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BM%7D%5E%7B-1%7D"> from the results of <code>chol(M)</code></td>
<td style="text-align: left;"></td>
<td style="text-align: left;"></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>svd()</code></td>
<td style="text-align: left;">singular value decomposition</td>
<td style="text-align: left;">input <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%5E%7B(m%20%5Ctimes%20n)%7D">; can compute PCA; <a href="https://bryanhanson.github.io/LearnPCA/">details</a></td>
<td style="text-align: left;"></td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>eigen()</code></td>
<td style="text-align: left;">eigen decomposition</td>
<td style="text-align: left;">requires <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BM%7D%5E%7B(n%20%5Ctimes%20n)%7D">; can compute PCA; <a href="https://bryanhanson.github.io/LearnPCA/">details</a></td>
<td style="text-align: left;"></td>
</tr>
</tbody>
</table>
<p>One thing to notice is that there is no LU decomposition in base <code>R</code>. It is apparently used “under the hood” in <code>solve()</code> and there are versions available in contributed packages.<sup>2</sup></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What is the use of outer()?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>As seen in <a href="https://chemospec.org/posts/2022-08-14-Linear-Alg-Notes/2022-08-14-Linear-Alg-Notes.html">Part 1</a> calling <code>outer()</code> on two vectors does indeed give the cross product (technically corresponding to <code>tcrossprod()</code>). This works because the defaults carry out multiplication.<sup>3</sup> However, looking through the <code>R</code> source code for uses of <code>outer()</code>, the function should really be thought of in simple terms as creating all possible combinations of the two inputs. In that way it is similar to <code>expand.grid()</code>. Here are two illustrations of the flexibility of <code>outer()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate a grid of x,y values modified by a function</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from ?colorRamp</span></span>
<span id="cb1-3">m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x,y) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(m)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> num [1:20, 1:20] 0.327 0.454 0.546 0.618 0.678 ...</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate all combinations of month and year</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># modified from ?outer; any function accepting 2 args can be used</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outer</span>(month.abb, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2002</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> paste)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      [,1]       [,2]       [,3]      
 [1,] "Jan 2000" "Jan 2001" "Jan 2002"
 [2,] "Feb 2000" "Feb 2001" "Feb 2002"
 [3,] "Mar 2000" "Mar 2001" "Mar 2002"
 [4,] "Apr 2000" "Apr 2001" "Apr 2002"
 [5,] "May 2000" "May 2001" "May 2002"
 [6,] "Jun 2000" "Jun 2001" "Jun 2002"
 [7,] "Jul 2000" "Jul 2001" "Jul 2002"
 [8,] "Aug 2000" "Aug 2001" "Aug 2002"
 [9,] "Sep 2000" "Sep 2001" "Sep 2002"
[10,] "Oct 2000" "Oct 2001" "Oct 2002"
[11,] "Nov 2000" "Nov 2001" "Nov 2002"
[12,] "Dec 2000" "Dec 2001" "Dec 2002"</code></pre>
</div>
</div>
<p>Bottom line: <code>outer()</code> can be used for linear algebra but its main uses lie elsewhere. You don’t need it for linear algebra!</p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Using outer() for matrix multiplication
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Here’s an interesting connection discussed in this <a href="https://en.wikipedia.org/wiki/Outer_product#Connection_with_the_matrix_product">Wikipedia entry</a>. In Part 1 we demonstrated how the repeated application of the dot product underpins matrix multiplication. The first row of the first matrix is multiplied element-wise by the first column of the second matrix, shown in red, to give the first element of the answer matrix. This process is then repeated so that every row (first matrix) has been multiplied by every column (second matrix).</p>
<p><span id="eq-1"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bmultline%7D%0A%5Cmathbf%7BA%7D%5Cmathbf%7BB%7D%20=%20%5Cmathbf%7BC%7D%20=%0A%5Cbegin%7Bbmatrix%7D%0A%5Ctextcolor%7Bred%7D%7Ba_%7B11%7D%7D%20&amp;%20%5Ctextcolor%7Bred%7D%7Ba_%7B12%7D%7D%20&amp;%20%5Ctextcolor%7Bred%7D%7Ba_%7B13%7D%7D%20%5C%5C%0Aa_%7B21%7D%20&amp;%20a_%7B22%7D%20&amp;%20a_%7B23%7D%20%5C%5C%0A%5Cend%7Bbmatrix%7D%0A%5Cbegin%7Bbmatrix%7D%0A%5Ctextcolor%7Bred%7D%7Bb_%7B11%7D%7D%20&amp;%20b_%7B12%7D%20&amp;%20b_%7B13%7D%20%5C%5C%0A%5Ctextcolor%7Bred%7D%7Bb_%7B21%7D%7D%20&amp;%20b_%7B22%7D%20&amp;%20b_%7B23%7D%20%5C%5C%0A%5Ctextcolor%7Bred%7D%7Bb_%7B31%7D%7D%20&amp;%20b_%7B32%7D%20&amp;%20b_%7B33%7D%20%5C%5C%0A%5Cend%7Bbmatrix%7D%20=%20%5C%5C%0A%5Cbegin%7Bbmatrix%7D%0A%5Ctextcolor%7Bred%7D%7Ba_%7B11%7Db_%7B11%7D%20+%20a_%7B12%7Db_%7B21%7D%20+%20a_%7B13%7Db_%7B31%7D%7D%20&amp;%20a_%7B11%7Db_%7B12%7D%20+%20a_%7B12%7Db_%7B22%7D%20+%20a_%7B13%7Db_%7B32%7D%20&amp;%20a_%7B11%7Db_%7B13%7D%20+%20a_%7B12%7Db_%7B23%7D%20+%20a_%7B13%7Db_%7B33%7D%5C%5C%0Aa_%7B21%7Db_%7B11%7D%20+%20a_%7B22%7Db_%7B21%7D%20+%20a_%7B23%7Db_%7B31%7D%20&amp;%20a_%7B21%7Db_%7B12%7D%20+%20a_%7B22%7Db_%7B22%7D%20+%20a_%7B23%7Db_%7B32%7D%20&amp;%20a_%7B21%7Db_%7B13%7D%20+%20a_%7B22%7Db_%7B23%7D%20+%20a_%7B23%7Db_%7B33%7D%5C%5C%0A%5Cend%7Bbmatrix%7D%0A%5Cend%7Bmultline%7D%0A%5Ctag%7B1%7D"></span></p>
<p>If instead, we treat the first <em>column</em> of the first matrix as a column vector and outer multiply it by the first <em>row</em> of the second matrix as a row vector, we get the following matrix:</p>
<p><span id="eq-2"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bmultline%7D%0A%5Cbegin%7Bbmatrix%7D%0A%5Ctextcolor%7Bred%7D%7Ba_%7B11%7D%7D%20&amp;%20a_%7B12%7D%20&amp;%20a_%7B13%7D%20%5C%5C%0A%5Ctextcolor%7Bred%7D%7Ba_%7B21%7D%7D%20&amp;%20a_%7B22%7D%20&amp;%20a_%7B23%7D%20%5C%5C%0A%5Cend%7Bbmatrix%7D%0A%5Cbegin%7Bbmatrix%7D%0A%5Ctextcolor%7Bred%7D%7Bb_%7B11%7D%7D%20&amp;%20%5Ctextcolor%7Bred%7D%7Bb_%7B12%7D%7D%20&amp;%20%5Ctextcolor%7Bred%7D%7Bb_%7B13%7D%7D%20%5C%5C%0Ab_%7B21%7D%20&amp;%20b_%7B22%7D%20&amp;%20b_%7B23%7D%20%5C%5C%0Ab_%7B31%7D%20&amp;%20b_%7B32%7D%20&amp;%20b_%7B33%7D%20%5C%5C%0A%5Cend%7Bbmatrix%7D%20%5CRightarrow%0A%5Cbegin%7Bbmatrix%7D%0A%5Ctextcolor%7Bred%7D%7Ba_%7B11%7Db_%7B11%7D%7D%20&amp;%20%5Ctextcolor%7Bred%7D%7Ba_%7B11%7Db_%7B12%7D%7D%20&amp;%20%5Ctextcolor%7Bred%7D%7Ba_%7B11%7Db_%7B13%7D%7D%5C%5C%0A%5Ctextcolor%7Bred%7D%7Ba_%7B21%7Db_%7B11%7D%7D%20&amp;%20%5Ctextcolor%7Bred%7D%7Ba_%7B21%7Db_%7B12%7D%7D%20&amp;%20%5Ctextcolor%7Bred%7D%7Ba_%7B21%7Db_%7B13%7D%7D%5C%5C%0A%5Cend%7Bbmatrix%7D%0A%5Cend%7Bmultline%7D%0A%5Ctag%7B2%7D"></span></p>
<p>Now if you repeat this process for the second column of the first matrix and the second row of the second matrix, you get another matrix. And if you do it one more time using the third column/third row, you get a third matrix. If you then add these three matrices together, you get <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BC%7D"> as seen in Equation&nbsp;1. Notice how each element in <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BC%7D"> in Equation&nbsp;1 is a sum of three terms? Each of those terms comes from one of the three matrices just described.</p>
<p>To sum up, one can use the dot product on each row (first matrix) by each column (second matrix) to get the answer, or you can use the outer product on the columns sequentially (first matrix) by rows sequentially (second matrix) to get several matrices, which one then sums to get the answer. It’s pretty clear which option is less work and easier to follow, but I think it’s an interesting connection between operations. The first case corresponds to view “MM1” in <em>The Art of Linear Algebra</em> while the second case is view “MM4”. See this work by <a href="https://github.com/kenjihiranabe/The-Art-of-Linear-Algebra">Kenji Hiranabe</a>.</p>
<p>Here’s a simple proof in <code>R</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb5-1">M1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb5-2">M1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2]
[1,]    1    2
[2,]    3    4
[3,]    5    6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb7-1">M2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb7-2">M2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2]
[1,]    7    8
[2,]    9   10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb9-1">tst1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> M1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> M2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># uses dot product</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># next line is sum of sequential outer products:</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1st col M1 by 1st row M2 + 2nd col M1 by 2nd row M2</span></span>
<span id="cb9-4">tst2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outer</span>(M1[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], M2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outer</span>(M1[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], M2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,])</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(tst1, tst2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
</div>
</div>
</div>




<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>For details see the discussion in <a href="https://chemospec.org/posts/2022-08-14-Linear-Alg-Notes/2022-08-14-Linear-Alg-Notes.html">Part 1</a>.↩︎</p></li>
<li id="fn2"><p>Discussed in this <a href="https://stackoverflow.com/q/51687808/633251">Stackoverflow question</a>, which also has an implementation.↩︎</p></li>
<li id="fn3"><p>In fact, for the default <code>outer()</code>, <code>FUN = "*"</code>, <code>outer()</code> actually calls <code>tcrossprod()</code>.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2022,
  author = {Hanson, Bryan},
  title = {Notes on {Linear} {Algebra} {Part} 3},
  date = {2022-09-10},
  url = {http://chemospec.org/posts/2022-09-10-Linear-Alg-Notes-Pt3/Linear-Alg-Notes-Pt3.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2022" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2022. <span>“Notes on Linear Algebra Part 3.”</span>
September 10, 2022. <a href="http://chemospec.org/posts/2022-09-10-Linear-Alg-Notes-Pt3/Linear-Alg-Notes-Pt3.html">http://chemospec.org/posts/2022-09-10-Linear-Alg-Notes-Pt3/Linear-Alg-Notes-Pt3.html</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Linear Algebra</category>
  <guid>http://chemospec.org/posts/2022-09-10-Linear-Alg-Notes-Pt3/Linear-Alg-Notes-Pt3.html</guid>
  <pubDate>Sat, 10 Sep 2022 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Notes on Linear Algebra Part 2</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2022-09-01-Linear-Alg-Notes-Pt2/Linear-Alg-Notes-Pt2.html</link>
  <description><![CDATA[ 




<section id="tldr" class="level4">
<h4 class="anchored" data-anchor-id="tldr">TL;DR</h4>
<ul>
<li>Linear algebra is complex. We need a way to penetrate the thicket. Here’s one.</li>
<li>Linear systems of equations are at the heart, not surprisingly, of linear algebra.</li>
<li>A key application is linear regression, which has a matrix solution.</li>
<li>Solving the needed equations requires inverting a matrix.</li>
<li>Inverting a matrix is more easily done after decomposing the matrix into upper and lower triangular matrices.</li>
<li>The upper and lower triangular matrices are individually easy to invert, giving access to the inverse of the original matrix.</li>
<li>Changes in notations and symbols as you move between presentations add significantly to the cognitive burden in learning this material.</li>
</ul>
<hr>
<p>For Part 1 of this series, see <a href="https://chemospec.org/posts/2022-08-14-Linear-Alg-Notes/2022-08-14-Linear-Alg-Notes.html">here</a>.</p>
<p>If you open a linear algebra text, it’s quickly apparent how complex the field is. There are so many special types of matrices, so many different decompositions of matrices. Why are all these needed? Should I care about null spaces? What’s really important? What are the threads that tie the different concepts together? As someone who is trying to improve their understanding of the field, especially with regard to its applications in chemometrics, it can be a tough slog.</p>
<p>In this post I’m going to try to demonstrate how some simple chemometric tasks can be solved using linear algebra. Though I cover some math here, the math is secondary right now – the conceptual connections are more important. I’m more interested in finding (and sharing) a path through the thicket of linear algebra. We can return as needed to expand the basic math concepts. The cognitive effort to work through the math details is likely a lot lower if we have a sense of the big picture.</p>
<p>In this post, matrices, including row and column vectors, will be shown in bold e.g.&nbsp;<img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> while scalars and variables will be shown in script, e.g.&nbsp;<img src="https://latex.codecogs.com/png.latex?n">. Variables used in <code>R</code> code will appear like <code>A</code>.</p>
</section>
<section id="systems-of-equations" class="level2">
<h2 class="anchored" data-anchor-id="systems-of-equations">Systems of Equations</h2>
<p>If you’ve had algebra, you have certainly run into “system of equations” such as the following:</p>
<p><span id="eq-1"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bmultline%7D%0Ax%20+%202y%20-3z%20=%203%20%5C%5C%0A2x%20-%20y%20-%20z%20=%2011%20%5C%5C%0A3x%20+%202y%20+%20z%20=%20-5%20%5C%5C%0A%5Cend%7Bmultline%7D%0A%5Ctag%7B1%7D"></span></p>
<p>In algebra, such systems can be solved several ways, for instance by isolating one or more variables and substituting, or geometrically (particularly for 2D systems, by plotting the lines and looking for the intersection). Once there are more than a few variables however, the only manageable way to solve them is with matrix operations, or more explicitly, linear algebra. <em>This sort of problem is the core of linear algebra, and the reason the field is called linear algebra.</em></p>
<p>To solve the system above using linear algebra, we have to write it in the form of matrices and column vectors:</p>
<p><span id="eq-2"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%0A1%20&amp;%202%20&amp;%20-3%20%5C%5C%202%20&amp;%20-1%20&amp;%20-1%20%5C%5C%203%20&amp;%202%20&amp;%201%20%5C%5C%0A%5Cend%7Bbmatrix%7D%0A%5Cbegin%7Bbmatrix%7D%0Ax%20%5C%5C%20y%20%5C%5C%20z%0A%5Cend%7Bbmatrix%7D%20=%0A%5Cbegin%7Bbmatrix%7D%0A3%20%5C%5C%2011%20%5C%5C%20-5%0A%5Cend%7Bbmatrix%7D%0A%5Ctag%7B2%7D"></span></p>
<p>or more generally</p>
<p><span id="eq-3"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7Bb%7D%0A%5Ctag%7B3%7D"></span></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> is the matrix of coefficients, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"> is the column vector of variable names<sup>1</sup> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bb%7D"> is a column vector of constants. Notice that these matrices are conformable:<sup>2</sup></p>
<p><span id="eq-4"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%5E%7B3%20%5Ctimes%203%7D%5Cmathbf%7Bx%7D%5E%7B3%20%5Ctimes%201%7D%20=%20%5Cmathbf%7Bb%7D%5E%7B3%20%5Ctimes%201%7D%0A%5Ctag%7B4%7D"></span></p>
<p>To solve such a system, when we have <img src="https://latex.codecogs.com/png.latex?n"> unknowns, we need <img src="https://latex.codecogs.com/png.latex?n"> equations.<sup>3</sup> <em>This means that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> has to be a square matrix, and square matrices play a special role in linear algebra.</em> I’m not sure this point is always conveyed clearly when this material is introduced. In fact, it seems like many texts on linear algebra seem to bury the lede.</p>
<p>To find the values of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20=%20x,%20y,%20z"><sup>4</sup>, we can do a little rearranging following the rules of linear algebra and matrix operations. First we pre-multiply both sides by the inverse of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D">, which then gives us the identity matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BI%7D">, which drops out.<sup>5</sup></p>
<p><span id="eq-5"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%5E%7B-1%7D%5Cmathbf%7BA%7D%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7BI%7D%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7BA%7D%5E%7B-1%7D%5Cmathbf%7Bb%7D%0A%5Ctag%7B5%7D"></span></p>
<p>So it’s all sounding pretty simple right? Ha. This is actually where things potentially break down. For this to work, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> must be invertible, which is not always the case.<sup>6</sup> If there is no inverse, then the system of equations either has no solution or infinite solutions. <em>So finding the inverse of a matrix, or discovering it doesn’t exist, is essential to solving these systems of linear equations.</em><sup>7</sup> More on this eventually, but for now, <em>we know <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> must be a square matrix and we hope it is invertible.</em></p>
</section>
<section id="a-key-application-linear-regression" class="level2">
<h2 class="anchored" data-anchor-id="a-key-application-linear-regression">A Key Application: Linear Regression</h2>
<p>We learn in algebra that a line takes the form <img src="https://latex.codecogs.com/png.latex?y%20=%20mx%20+%20b">. If one has measurements in the form of <img src="https://latex.codecogs.com/png.latex?x,%20y"> pairs that one expects to fit to a line, we need linear regression. Carrying out a linear regression is arguably one of the most important, and certainly a very common application of the linear systems described above. One can get the values of <img src="https://latex.codecogs.com/png.latex?m"> and <img src="https://latex.codecogs.com/png.latex?b"> by hand using algebra, but any computer will solve the system using a matrix approach.<sup>8</sup> Consider this data:</p>
<p><span id="eq-6"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bmatrix%7D%0Ax%20&amp;%20y%20%5C%5C%0A2.1%20&amp;%2011.8%20%5C%5C%0A0.9%20&amp;%207.2%20%5C%5C%0A3.9%20&amp;%2021.5%20%5C%5C%0A3.2%20&amp;%2017.2%20%5C%5C%0A5.1%20&amp;%2026.8%20%5C%5C%0A%5Cend%7Bmatrix%7D%0A%5Ctag%7B6%7D"></span></p>
<p>To express this in a matrix form, we recast</p>
<p><span id="eq-12"><img src="https://latex.codecogs.com/png.latex?%0Ay%20=%20mx%20+%20b%0A%5Ctag%7B7%7D"></span></p>
<p>into</p>
<p><span id="eq-10"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7By%7D%20=%20%5Cmathbf%7BX%7D%5Cmathbf%7B%5Cbeta%7D%20+%20%5Cmathbf%7B%5Cepsilon%7D%0A%5Ctag%7B8%7D"></span></p>
<p>where:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D"> is the column vector of <img src="https://latex.codecogs.com/png.latex?y"> values. That seems sensible.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D"> is a matrix composed of a column of ones plus a column of the <img src="https://latex.codecogs.com/png.latex?x"> values. This is called a <a href="https://en.wikipedia.org/wiki/Design_matrix#Simple_linear_regression">design matrix</a>. At least here <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D"> contains only <img src="https://latex.codecogs.com/png.latex?x"> values as variables.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5Cbeta%7D"> is a column vector of coefficients (including, as we will see, the values of <img src="https://latex.codecogs.com/png.latex?m"> and <img src="https://latex.codecogs.com/png.latex?b"> if we are thinking back <img src="https://latex.codecogs.com/png.latex?y%20=%20mx%20+%20b">).</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B%5Cepsilon%7D"> is new, it is a column vector giving the errors at each point.</li>
</ul>
<p>With our data above, this looks like:</p>
<p><span id="eq-8"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%0A11.8%20%5C%5C%0A7.2%20%5C%5C%0A21.5%20%5C%5C%0A17.2%20%5C%5C%0A26.8%20%5C%5C%0A%5Cend%7Bbmatrix%7D%0A=%0A%5Cbegin%7Bbmatrix%7D%0A1%20&amp;%202.1%20%5C%5C%0A1%20&amp;%200.9%20%5C%5C%0A1%20&amp;%203.9%20%5C%5C%0A1%20&amp;%203.2%20%5C%5C%0A1%20&amp;%205.1%20%5C%5C%0A%5Cend%7Bbmatrix%7D%0A%5Cbegin%7Bbmatrix%7D%0A%5Cbeta_0%20%5C%5C%20%5Cbeta_1%0A%5Cend%7Bbmatrix%7D%0A+%0A%5Cbegin%7Bbmatrix%7D%0A%5Cepsilon_1%20%5C%5C%20%5Cepsilon_2%20%5C%5C%20%5Cepsilon_3%20%5C%5C%20%5Cepsilon_4%20%5C%5C%20%5Cepsilon_5%0A%5Cend%7Bbmatrix%7D%0A%5Ctag%7B9%7D"></span></p>
<p>If we multiply this out, each row works out to be an instance of <img src="https://latex.codecogs.com/png.latex?y_i%20=%20%5Cbeta_1%20x_i%20+%20%5Cbeta_0">. Hopefully you can appreciate that <img src="https://latex.codecogs.com/png.latex?%5Cbeta_1"> corresponds to <img src="https://latex.codecogs.com/png.latex?m"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta_0"> corresponds to <img src="https://latex.codecogs.com/png.latex?b">.<sup>9</sup></p>
<p>This looks similar to <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7Bb%7D"> seen in Equation&nbsp;3, if you set <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bb%7D"> to <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> to <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"> to <img src="https://latex.codecogs.com/png.latex?%5Cbeta">:</p>
<p><span id="eq-11"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Cmathbf%7Bb%7D%20&amp;%5Capprox%20%5Cmathbf%7BA%7D%5Cmathbf%7Bx%7D%20%5C%5C%0A%5Cdownarrow%20&amp;%5Cphantom%7B%5Capprox%7D%20%5C;%20%5Cdownarrow%20%5C;%20%5Cdownarrow%20%5C%5C%0A%5Cmathbf%7By%7D%20&amp;%5Capprox%20%5Cmathbf%7BX%7D%5Cmathbf%7B%5Cbeta%7D%20%5C%5C%0A%5Cend%7Balign%7D%0A%5Ctag%7B10%7D"></span></p>
<p>This contortion of symbols is pretty nasty, but honestly not uncommon when moving about in the world of linear algebra.</p>
<p>As it is composed of real data, presumably with measurement errors, there is not an exact solution to <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7Bb%7D"> due to the error term. There is however, an approximate solution, which is what is meant when we say we are looking for the line of best fit. This is how linear regression is carried out on a computer. The relevant equation is:</p>
<p><span id="eq-9"><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%7B%5Cbeta%7D%20=%20(%5Cmathbf%7BX%7D%5E%7B%5Cmathsf%7BT%7D%7D%5Cmathbf%7BX%7D)%5E%7B-1%7D%5Cmathbf%7BX%7D%5E%7B%5Cmathsf%7BT%7D%7Dy%0A%5Ctag%7B11%7D"></span></p>
<p>The key point here is that once again we need to invert a matrix to solve this. The details of where Equation&nbsp;11 comes from are covered in a number of places, but I will note here that <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cbeta%7D"> refers to the best estimate of <img src="https://latex.codecogs.com/png.latex?%5Cbeta">.<sup>10</sup></p>
</section>
<section id="inverting-matrices" class="level2">
<h2 class="anchored" data-anchor-id="inverting-matrices">Inverting Matrices</h2>
<p>We now have two examples where inverting a matrix is a key step: solving a system of linear equations, and approximating the solution to a system of linear equations (the regression case). These cases are not outliers, the ability to invert a matrix is very important. So how do we do this? The LU decomposition can do it, and is widely used so worth spending some time on. A decomposition is the process of breaking a matrix into pieces that are easier to handle, or that give us special insight, or both. If you are a chemometrician you have almost certainly carried out Principal Components Analysis (PCA). Under the hood, PCA requires either a singular value decomposition, or an eigen decomposition (more info <a href="https://bryanhanson.github.io/LearnPCA/">here</a>).</p>
<p>So, about the LU decomposition: it breaks a matrix into two matrices, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BL%7D">, a “lower triangular matrix”, and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D">, an “upper triangular matrix”. These special matrices contain only zeros except along the diagonal and the entries below it (in the lower case), or along the diagonal and the entries above it (in the upper case). The advantage of triangular matrices is that they are very easy to invert (all those zeros make many terms drop out). So the LU decomposition breaks the tough job of inverting <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> into two easier jobs.</p>
<p><span id="eq-12"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Cmathbf%7BA%7D%20&amp;=%20%5Cmathbf%7BL%7D%5Cmathbf%7BU%7D%20%5C%5C%0A%5Cmathbf%7BA%7D%5E%7B-1%7D%20&amp;=%20(%5Cmathbf%7BL%7D%5Cmathbf%7BU%7D)%5E%7B-1%7D%20%5C%5C%0A%5Cmathbf%7BA%7D%5E%7B-1%7D%20&amp;=%20%5Cmathbf%7BU%7D%5E%7B-1%7D%5Cmathbf%7BL%7D%5E%7B-1%7D%20%5C%5C%0A%5Cend%7Balign%7D%0A%5Ctag%7B12%7D"></span></p>
<p>When all is done, we only need to figure out <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D%5E%7B-1%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BL%7D%5E%7B-1%7D"> which as mentioned is straightforward.<sup>11</sup></p>
<p>To summarize, if we want to solve a system of equations we need to carry out matrix inversion, which is turn is much easier to do if one uses the LU decomposition to get two easy to invert triangular matrices. I hope you are beginning to see how pieces of linear algebra fit together, and why it might be good to learn more.</p>
</section>
<section id="r-functions" class="level2">
<h2 class="anchored" data-anchor-id="r-functions">R Functions</h2>
<section id="inverting-matrices-1" class="level3">
<h3 class="anchored" data-anchor-id="inverting-matrices-1">Inverting Matrices</h3>
<p>Let’s look at how <code>R</code> does these operations, and check our understanding along the way. <code>R</code> makes this really easy. We’ll start with the issue of invertibility. Let’s create a matrix for testing.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb1-1">A1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-2">A1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    3   11   -5
[2,]    5    2    2
[3,]   -1    0    5</code></pre>
</div>
</div>
<p>In the <code>matlib</code> package there is a function <code>inv</code> that inverts matrices. It returns the inverted matrix, which we can verify by multiplying the inverted matrix by the original matrix to give the identity matrix (if inversion was successful). <code>diag(3)</code> creates a 3 x 3 matrix with 1’s on the diagonal, in other words an identity matrix.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matlib"</span>)</span>
<span id="cb3-2">A1_inv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inv</span>(A1)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(A1_inv <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> A1, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Mean relative difference: 8.999999e-08"</code></pre>
</div>
</div>
<p>The difference here is really small, but not zero. Let’s use a different function, <code>solve</code> which is part of base <code>R</code>. If <code>solve</code> is given a single matrix, it returns the inverse of that matrix.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb5-1">A1_solve <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(A1) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> A1</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(A1_solve, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>That’s a better result. Why are there differences? <code>inv</code> uses a method called Gaussian elimination which is similar to how one would invert a matrix using pencil and paper. On the other hand, <code>solve</code> uses the LU decomposition discussed earlier, and no matrix inversion is necessary. Looks like the LU decomposition gives a somewhat better numerical result.</p>
<p>Now let’s look at a different matrix, created by replacing the third column of <code>A1</code> with different values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb7-1">A2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb7-2">A2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    3   11    6
[2,]    5    2   10
[3,]   -1    0   -2</code></pre>
</div>
</div>
<p>And let’s compute its inverse using <code>solve</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(A2)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in solve.default(A2): system is computationally singular: reciprocal condition number = 6.71337e-19</code></pre>
</div>
</div>
<p>When <code>R</code> reports that <code>A2</code> is computationally singular, it is saying that it cannot be inverted. Why not? If you look at <code>A2</code>, notice that column 3 is a multiple of column 1. Anytime one column is a multiple of another, or one row is a multiple of another, then the matrix cannot be inverted because the rows or columns are not independent.<sup>12</sup> If this was a matrix of coefficients from an experimental measurement of variables, this would mean that some of your variables are not independent, they must be measuring the same underlying phenomenon.</p>
</section>
<section id="solving-systems-of-linear-equations" class="level3">
<h3 class="anchored" data-anchor-id="solving-systems-of-linear-equations">Solving Systems of Linear Equations</h3>
<p>Let’s solve the system from Equation&nbsp;2. It turns out that the <code>solve</code> function also handles this case, if you give it two arguments. Remember, <code>solve</code> is using the LU decomposition behind the scenes, no matrix inversion is required.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb11-1">A3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-2">A3</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    2   -3
[2,]    2   -1   -1
[3,]    3    2    1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(A3) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># naming the columns will label the answer</span></span>
<span id="cb13-2">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>(A3, b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> x  y  z 
 2 -4 -3 </code></pre>
</div>
</div>
<p>The answer is the values of <img src="https://latex.codecogs.com/png.latex?x,%20y,%20z"> that make the system of equations true.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
How does LU decomposition avoid inversion?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>While we’ve emphasized the importance and challenges of inverting matrices, we’ve also pointed out that to solve a linear system there are alternatives to looking at the problem from the perspective of Equation&nbsp;5. Here’s an approach using the LU decomposition, starting with substituting <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> with <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BL%7D%5Cmathbf%7BU%7D">:</p>
<p><span id="eq-20"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7BL%7D%5Cmathbf%7BU%7D%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7Bb%7D%0A%5Ctag%7B13%7D"></span></p>
<p>We want to solve for <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"> the column vector of variables. To do so, define a new vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D%20=%20%5Cmathbf%7BU%7D%5Cmathbf%7Bx%7D"> and substitute it in:</p>
<p><span id="eq-21"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BL%7D%5Cmathbf%7BU%7D%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7BL%7D%5Cmathbf%7By%7D%20=%20%5Cmathbf%7Bb%7D%0A%5Ctag%7B14%7D"></span></p>
<p>Next we solve for <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D">. One way we could do this is to pre-multiply both sides by <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BL%7D%5E%7B-1%7D"> but we are looking for a way to avoid using the inverse. Instead, we evaluate <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BL%7D%5Cmathbf%7By%7D"> to give a series of expressions using the dot product (in other words plain matrix multiplication). Because <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BL%7D"> is lower triangular, many of the terms we might have gotten actually disappear because of the zero coefficients. What remains is simple enough that we can algebraically find each element of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D"> starting from the first row (this is called forward substitution). Once we have <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D">, we can find <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"> by solving <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D%20=%20%5Cmathbf%7BU%7D%5Cmathbf%7Bx%7D"> using a similar approach, but working from the last row upward (this is backward substitution). This is a good illustration of the utility of triangular matrices: some operations can move from the linear algebra realm to the algebra realm. <a href="https://en.wikipedia.org/wiki/Triangular_matrix#Forward_and_back_substitution">Wikipedia</a> has a good illustration of forward and backward substitution.</p>
</div>
</div>
</div>
</section>
<section id="computing-linear-regression" class="level3">
<h3 class="anchored" data-anchor-id="computing-linear-regression">Computing Linear Regression</h3>
<p>Let’s compute the values for <img src="https://latex.codecogs.com/png.latex?m,%20b"> in our regression data shown in Equation&nbsp;6. First, let’s set up the needed matrices and plot the data since visualizing the data is always a good idea.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb15-1">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">21.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">17.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">26.8</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-2">X <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># design matrix</span></span>
<span id="cb15-3">X</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2]
[1,]    1  2.1
[2,]    1  0.9
[3,]    1  3.9
[4,]    1  3.2
[5,]    1  5.1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(X[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># column 2 of X has the x values</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="http://chemospec.org/posts/2022-09-01-Linear-Alg-Notes-Pt2/Linear-Alg-Notes-Pt2_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The value of <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cbeta%7D"> can be found via Equation&nbsp;11:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">solve</span>((<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(X) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> X)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(X) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         [,1]
[1,] 2.399618
[2,] 4.769862</code></pre>
</div>
</div>
<p>The first value is for <img src="https://latex.codecogs.com/png.latex?b"> or <img src="https://latex.codecogs.com/png.latex?%5Cbeta_0"> or intecept, the second value is for <img src="https://latex.codecogs.com/png.latex?m"> or <img src="https://latex.codecogs.com/png.latex?%5Cbeta_1"> or slope.</p>
<p>Let’s compare this answer to <code>R</code>’s built-in <code>lm</code> function (for linear model):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb20-1">fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> X[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb20-2">fit</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = y ~ X[, 2])

Coefficients:
(Intercept)       X[, 2]  
       2.40         4.77  </code></pre>
</div>
</div>
<p>We have good agreement! If you care to learn about the goodness of the fit, the residuals etc, then you can look at the help file <code>?lm</code> and <code>str(fit)</code>. <code>lm</code> returns pretty much all one needs to know about the results, but if you wish to calculate all the interesting values yourself you can do so by manipulating Equation&nbsp;11 and its relatives.</p>
<p>Finally, let’s plot the line of best fit found by <code>lm</code> to make sure everything looks reasonable.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(X[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">coef =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(fit), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="http://chemospec.org/posts/2022-09-01-Linear-Alg-Notes-Pt2/Linear-Alg-Notes-Pt2_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<hr>
<p>That’s all for now, and a lot to digest. I hope you are closer to finding your own path through linear algebra. Remember that investing in learning the fundamentals prepares you for tackling the more complex topics. Thanks for reading!</p>
</section>
</section>
<section id="annotated-bibliography" class="level2">
<h2 class="anchored" data-anchor-id="annotated-bibliography">Annotated Bibliography</h2>
<p>These are the main sources I relied on for this post.</p>
<ul>
<li><em>The No Bullshit Guide to Linear Algebra</em> by <a href="https://minireference.com">Ivan Savov</a>.
<ul>
<li>Section 1.15: Solving systems of linear equations.</li>
<li>Section 6.6: LU decomposition.</li>
</ul></li>
<li><em>Linear Algebra: step by step</em> by Kuldeep Singh, Oxford Univerity Press, 2014.
<ul>
<li>Section 1.8.5: Singluar (non-invertible) matrices mean there is no solution or infinite solutions to the linear system. For graphical illustration see sections 1.1.3 and 1.7.2.</li>
<li>Section 1.6.4: Definition of the inverse and conceptual meaning.</li>
<li>Section 1.8.4: Solving linear systems when <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> is invertible.</li>
<li>Section 6.4: LU decomposition.</li>
<li>Section 6.4.3: Solving linear systems without using inversion, via the LU decomposition.</li>
</ul></li>
<li><em>Linear Models with R</em> by Julian J. Faraway, Chapman and Hall/CRC, 2005.
<ul>
<li>Sections 2.1-2.4: Linear regression from the algebraic and matrix perspectives, derivation of Equation&nbsp;11.</li>
</ul></li>
<li>The vignettes of the <code>matlib</code> package are very helpful.</li>
</ul>


</section>


<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Here we have the slightly unfortunate circumstance where symbol conventions cannot be completely harmonized. We are saying that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20=%20x,%20y,%20z"> which seems a bit silly since vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"> contains <img src="https://latex.codecogs.com/png.latex?y"> and <img src="https://latex.codecogs.com/png.latex?z"> components in addition to <img src="https://latex.codecogs.com/png.latex?x">. I ask you to accept this for two reasons: First, most linear algebra texts use the symbols in Equation&nbsp;3 as the general form for this topic, so if you go to study this further that’s what you’ll find. Second, I feel like using <img src="https://latex.codecogs.com/png.latex?x">, <img src="https://latex.codecogs.com/png.latex?y"> and <img src="https://latex.codecogs.com/png.latex?z"> in Equation&nbsp;1 will be familar to the most people. If you want to get rid of this infelicity, then you have to write Equation&nbsp;1 (in part) as <img src="https://latex.codecogs.com/png.latex?x_1%20+%202x_2%20+%203x_3%20=%203"> which I think clouds the interpretation. Perhaps however you feel my choices are equally bad.↩︎</p></li>
<li id="fn2"><p>Conformable means that the number of columns in the first matrix equals the number of rows in the second matrix. This is necessary because of the dot product definition of matrix multiplication. More details <a href="https://chemospec.org/posts/2022-08-14-Linear-Alg-Notes/2022-08-14-Linear-Alg-Notes.html">here</a>.↩︎</p></li>
<li id="fn3"><p>Remember “story problems” where you had to read closely to express what was given in terms of equations, and find enough equations? “If Sally bought 10 pieces of candy and a drink for $1.50…”↩︎</p></li>
<li id="fn4"><p>We could also write this as <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20=%20(x,%20y,%20z)%5E%5Cmathsf%7BT%7D"> to emphasize that it is a column vector. One might prefer this because the only vector one can write in a row of text is a row vector, so if we mean a column vector many people would prefer to write it transposed.↩︎</p></li>
<li id="fn5"><p>The inverse of a matrix is analogous to dividing a variable by itself, since it leads to that variable canceling out and thus simplifying the equation. However, strictly speaking there is no operation that qualifies as division in the matrix world.↩︎</p></li>
<li id="fn6"><p>For a matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> to be invertible, there must exist another matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BB%7D"> such that <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%5Cmathbf%7BB%7D%20=%20%5Cmathbf%7BB%7D%5Cmathbf%7BA%7D%20=%20%5Cmathbf%7BI%7D">. However, this definition doesn’t offer any clues about how we might find the inverse.↩︎</p></li>
<li id="fn7"><p>In truth, there are other ways to solve <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%5Cmathbf%7Bx%7D%20=%20%5Cmathbf%7Bb%7D"> that don’t require inversion of a matrix. However, if a matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> isn’t invertible, these other methods will also break down. We’ll demonstrate this later when we talk about the LU decomposition.↩︎</p></li>
<li id="fn8"><p>A very good discussion of the algebraic approach is available <a href="https://en.wikipedia.org/wiki/Simple_linear_regression#Fitting_the_regression_line">here</a>.↩︎</p></li>
<li id="fn9"><p>This is another example of an infelicity of symbol conventions. The typical math/statistics text symbols are not the same as the symbols a student in Physics 101 would likely encounter.↩︎</p></li>
<li id="fn10"><p>The careful reader will note that the data set shown in Equation&nbsp;9 is not square, there are more observations (rows) than variables (columns). This is fine and desireable for a linear regression, we don’t want to use just two data points as that would have no error but not necessarily be accurate. However, only square matrices have inverses, so what’s going on here? In practice, what’s happening is we are using something called a pseudoinverse. The first part of the right side of Equation&nbsp;11 is in fact the pseudoinverse: <img src="https://latex.codecogs.com/png.latex?(%5Cmathbf%7BX%7D%5E%7B%5Cmathsf%7BT%7D%7D%5Cmathbf%7BX%7D)%5E%7B-1%7D%5Cmathbf%7BX%7D%5E%7B%5Cmathsf%7BT%7D%7D">. Perhaps we’ll cover this in a future post.↩︎</p></li>
<li id="fn11"><p>The switch in the order of matrices on the last line of Equation&nbsp;12 is one of the properties of the inverse operator.↩︎</p></li>
<li id="fn12"><p>This means that the rank of the matrix is less than the number of columns. You can get the rank of a matrix by counting the number of non-zero eigenvalues via <code>eigen(A2)$values</code>, which in this case gives 8.9330344, -5.9330344, -3.5953271^{-16}. There are only two non-zero values, so the rank is two. Perhaps in another post we’ll discuss this in more detail.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2022,
  author = {Hanson, Bryan},
  title = {Notes on {Linear} {Algebra} {Part} 2},
  date = {2022-09-01},
  url = {http://chemospec.org/posts/2022-09-01-Linear-Alg-Notes-Pt2/Linear-Alg-Notes-Pt2.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2022" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2022. <span>“Notes on Linear Algebra Part 2.”</span>
September 1, 2022. <a href="http://chemospec.org/posts/2022-09-01-Linear-Alg-Notes-Pt2/Linear-Alg-Notes-Pt2.html">http://chemospec.org/posts/2022-09-01-Linear-Alg-Notes-Pt2/Linear-Alg-Notes-Pt2.html</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Linear Algebra</category>
  <guid>http://chemospec.org/posts/2022-09-01-Linear-Alg-Notes-Pt2/Linear-Alg-Notes-Pt2.html</guid>
  <pubDate>Thu, 01 Sep 2022 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Notes on Linear Algebra Part 1</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2022-08-14-Linear-Alg-Notes/2022-08-14-Linear-Alg-Notes.html</link>
  <description><![CDATA[ 




<p>If you are already familiar with much of linear algebra, as well as the relevant functions in <code>R</code>, read no further and do something else!</p>
<p>If you are like me, you’ve had <em>no</em> formal training in linear algebra, which means you learn what you need to when you need to use it. Eventually, you cobble together some hard-won knowledge. That’s good, because almost everything in chemometrics involves linear algebra.</p>
<p>This post is essentially a set of personal notes about the dot product and the cross product, two important manipulations in linear algebra. I’ve tried to harmonize things I learned way back in college physics and math courses, and integrate information I’ve found in various sources I have leaned on more recently. Without a doubt, the greatest impediment to really understanding this material is the use of multiple terminology and notations. I’m going to try really hard to be clear and to the point in my dicussion.</p>
<p>The main sources I’ve relied on are:</p>
<ul>
<li><em>The No Bullshit Guide to Linear Algebra</em> by <a href="https://minireference.com">Ivan Savov</a>. This is by far my favorite treatment of linear algebra. It gets to the point quickly.</li>
<li>The Wikipedia pages on <a href="https://en.wikipedia.org/wiki/Dot_product">dot product</a>, <a href="https://en.wikipedia.org/wiki/Cross_product">cross product</a> and <a href="https://en.wikipedia.org/wiki/Outer_product">outer product</a>.</li>
</ul>
<p>Let’s get started. For sanity and consistency, let’s define two 3D vectors and two matrices to illustrate our examples. Most of the time I’m going to write vectors with an arrow over the name, as a nod to the treatment usually given in a physics course. This reminds us that we are thinking about a quantity with direction and magnitude in some coordinate system, something geometric. Of course in the <code>R</code> language a vector is simply a list of numbers with the same data type; <code>R</code> doesn’t care if a vector is a vector in the geometric sense or a list of states.</p>
<p><span id="eq-def-u"><img src="https://latex.codecogs.com/png.latex?%0A%5Cvec%7Bu%7D%20=%20(u_x,%20u_y,%20u_z)%0A%5Ctag%7B1%7D"></span></p>
<p><span id="eq-def-v"><img src="https://latex.codecogs.com/png.latex?%0A%5Cvec%7Bv%7D%20=%20(v_x,%20v_y,%20v_z)%0A%5Ctag%7B2%7D"></span></p>
<p><span id="eq-def-A"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%20=%0A%5Cbegin%7Bbmatrix%7D%0Aa_%7B11%7D%20&amp;%20a_%7B12%7D%20&amp;%20a_%7B13%7D%20%5C%5C%0Aa_%7B21%7D%20&amp;%20a_%7B22%7D%20&amp;%20a_%7B23%7D%20%5C%5C%0A%5Cend%7Bbmatrix%7D%0A%5Ctag%7B3%7D"></span></p>
<p><span id="eq-def-B"><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BB%7D%20=%0A%5Cbegin%7Bbmatrix%7D%0Ab_%7B11%7D%20&amp;%20b_%7B12%7D%20&amp;%20b_%7B13%7D%20%5C%5C%0Ab_%7B21%7D%20&amp;%20b_%7B22%7D%20&amp;%20b_%7B23%7D%20%5C%5C%0Ab_%7B31%7D%20&amp;%20b_%7B32%7D%20&amp;%20b_%7B33%7D%20%5C%5C%0A%5Cend%7Bbmatrix%7D%0A%5Ctag%7B4%7D"></span></p>
<section id="dot-product" class="level2">
<h2 class="anchored" data-anchor-id="dot-product">Dot Product</h2>
<section id="terminology" class="level3">
<h3 class="anchored" data-anchor-id="terminology">Terminology</h3>
<p>The dot product goes by these other names: inner product, scalar product. Typical notations include:<sup>1</sup></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D%20%5Ccdot%20%5Cvec%7Bv%7D"> (the <img src="https://latex.codecogs.com/png.latex?%5Ccdot"> is the origin of the name “dot” product)</li>
<li><img src="https://latex.codecogs.com/png.latex?u%20%5Ccdot%20v"></li>
<li><img src="https://latex.codecogs.com/png.latex?u%5E%5Cmathsf%7BT%7Dv"> (when thinking of the vectors as column vectors)</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Clangle%20u,%20v%20%5Crangle"> (typically used when <img src="https://latex.codecogs.com/png.latex?u,%20v"> are complex)</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Clangle%20u%20%7C%20v%20%5Crangle"></li>
</ul>
</section>
<section id="formulas" class="level3">
<h3 class="anchored" data-anchor-id="formulas">Formulas</h3>
<p>There are two main formulas for the dot product with <em>vectors</em>, the algebraic formula (Equation&nbsp;5) and the geometric formula (Equation&nbsp;6).</p>
<p><span id="eq-dp1"><img src="https://latex.codecogs.com/png.latex?%0A%5Cvec%7Bu%7D%20%5Ccdot%20%5Cvec%7Bv%7D%20=%20%5Csum%7Bu_i%20v_i%7D%0A%5Ctag%7B5%7D"></span></p>
<p><span id="eq-dp2"><img src="https://latex.codecogs.com/png.latex?%0A%5Cvec%7Bu%7D%20%5Ccdot%20%5Cvec%7Bv%7D%20=%20%5C%7C%20%5Cvec%7Bu%7D%20%5C%7C%20%5C%7C%20%5Cvec%7Bv%7D%20%5C%7C%20cos%20%5Ctheta%0A%5Ctag%7B6%7D"></span></p>
<p><img src="https://latex.codecogs.com/png.latex?%5C%7C%20%5Cvec%7Bx%7D%20%5C%7C"> refers to the <img src="https://latex.codecogs.com/png.latex?L_2"> or Euclidian norm, namely the length of the vector:<sup>2</sup></p>
<p><span id="eq-L2"><img src="https://latex.codecogs.com/png.latex?%0A%5C%7C%20%5Cvec%7Bx%7D%20%5C%7C%20=%20%20%5Csqrt%7Bx%5E%7B2%7D_1%20+%20%5Cldots%20+%20x%5E%7B2%7D_n%7D%0A%5Ctag%7B7%7D"></span></p>
<p>The result of the dot product is a scalar. The dot product is also commutative: <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D%20%5Ccdot%20%5Cvec%7Bv%7D%20=%20%5Cvec%7Bv%7D%20%5Ccdot%20%5Cvec%7Bu%7D">.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Watch out when using row or column vectors
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>From the perspective of <em>matrices</em>, if we think of <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bv%7D"> as <strong>column vectors</strong> with dimensions 3 x 1, then transposing <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D"> gives us conformable matrices and we find the result of matrix multiplication is the dot product (compare to Equation&nbsp;5):</p>
<p><span id="eq-dp3"><img src="https://latex.codecogs.com/png.latex?%0A%5Cvec%7Bu%7D%20%5Ccdot%20%5Cvec%7Bv%7D%20=%20%5Cvec%7Bu%7D%5E%5Cmathsf%7BT%7D%20%5C%20%5Cvec%7Bv%7D%20=%20%5Cbegin%7Bbmatrix%7D%20u_x%20&amp;%20u_y%20&amp;%20u_z%5Cend%7Bbmatrix%7D%20%5Cbegin%7Bbmatrix%7D%20v_x%20%5C%5C%20v_y%20%5C%5C%20v_z%20%5Cend%7Bbmatrix%7D%20=%20u_x%20v_x%20+%20u_y%20v_y%20+%20u_z%20v_z%0A%5Ctag%7B8%7D"></span></p>
<p>Even though this is matrix multiplication, the answer is still a scalar.</p>
<p>Now, rather confusingly, if we think of <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bv%7D"> as <strong>row vectors</strong>, and we transpose <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bv%7D">,then we get the dot product:</p>
<p><span id="eq-dp5"><img src="https://latex.codecogs.com/png.latex?%0A%5Cvec%7Bu%7D%20%5Ccdot%20%5Cvec%7Bv%7D%20=%20%5Cvec%7Bu%7D%20%5C%20%5Cvec%7Bv%7D%5E%5Cmathsf%7BT%7D%20=%20%5Cbegin%7Bbmatrix%7D%20u_x%20&amp;%20u_y%20&amp;%20u_z%5Cend%7Bbmatrix%7D%20%5Cbegin%7Bbmatrix%7D%20v_x%20%5C%5C%20v_y%20%5C%5C%20v_z%20%5Cend%7Bbmatrix%7D%20=%20u_x%20v_x%20+%20u_y%20v_y%20+%20u_z%20v_z%0A%5Ctag%7B9%7D"></span></p>
<p>Equations Equation&nbsp;8 and Equation&nbsp;9 can be a source of real confusion at first. They give the impression that the dot product can be either <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D%5E%5Cmathsf%7BT%7D%20%5C%20%5Cvec%7Bv%7D"> or <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D%20%5C%20%5Cvec%7Bv%7D%5E%5Cmathsf%7BT%7D">. <em>However, this is only true in the limited contexts defined above.</em> To summarize:</p>
<ul>
<li>Thinking of the vectors as <em>column vectors</em> with dimensions <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%201"> then one can use <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D%5E%5Cmathsf%7BT%7D%20%5C%20%5Cvec%7Bv%7D"></li>
<li>Thinking of the vectors as <em>row vectors</em> with dimensions <img src="https://latex.codecogs.com/png.latex?1%20%5Ctimes%20n"> then one can use <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D%20%5C%20%5Cvec%7Bv%7D%5E%5Cmathsf%7BT%7D"></li>
</ul>
<p>Unfortunately I think this distinction is not always clearly made by authors, and is a source of great confusion to linear algebra learners. <strong>Be careful when working with row and column vectors.</strong></p>
</div>
</div>
</div>
</section>
<section id="matrix-multiplication" class="level3">
<h3 class="anchored" data-anchor-id="matrix-multiplication">Matrix Multiplication</h3>
<p>Suppose we wanted to compute <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%5Cmathbf%7BB%7D%20=%20%5Cmathbf%7BC%7D">.<sup>3</sup> We use the idea of row and column vectors to accomplish this task. In the process, we discover that matrix multiplication is a series of dot products:</p>
<p><span id="eq-dp4"><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bmultline%7D%0A%5Cmathbf%7BA%7D%5Cmathbf%7BB%7D%20=%20%5Cmathbf%7BC%7D%20=%0A%5Cbegin%7Bbmatrix%7D%0A%5Ctextcolor%7Bred%7D%7Ba_%7B11%7D%7D%20&amp;%20%5Ctextcolor%7Bred%7D%7Ba_%7B12%7D%7D%20&amp;%20%5Ctextcolor%7Bred%7D%7Ba_%7B13%7D%7D%20%5C%5C%0Aa_%7B21%7D%20&amp;%20a_%7B22%7D%20&amp;%20a_%7B23%7D%20%5C%5C%0A%5Cend%7Bbmatrix%7D%0A%5Cbegin%7Bbmatrix%7D%0A%5Ctextcolor%7Bred%7D%7Bb_%7B11%7D%7D%20&amp;%20b_%7B12%7D%20&amp;%20b_%7B13%7D%20%5C%5C%0A%5Ctextcolor%7Bred%7D%7Bb_%7B21%7D%7D%20&amp;%20b_%7B22%7D%20&amp;%20b_%7B23%7D%20%5C%5C%0A%5Ctextcolor%7Bred%7D%7Bb_%7B31%7D%7D%20&amp;%20b_%7B32%7D%20&amp;%20b_%7B33%7D%20%5C%5C%0A%5Cend%7Bbmatrix%7D%20=%20%5C%5C%0A%5Cbegin%7Bbmatrix%7D%0A%5Ctextcolor%7Bred%7D%7Ba_%7B11%7Db_%7B11%7D%20+%20a_%7B12%7Db_%7B21%7D%20+%20a_%7B13%7Db_%7B31%7D%7D%20&amp;%20a_%7B11%7Db_%7B12%7D%20+%20a_%7B12%7Db_%7B22%7D%20+%20a_%7B13%7Db_%7B32%7D%20&amp;%20a_%7B11%7Db_%7B13%7D%20+%20a_%7B12%7Db_%7B23%7D%20+%20a_%7B13%7Db_%7B33%7D%5C%5C%0Aa_%7B21%7Db_%7B11%7D%20+%20a_%7B22%7Db_%7B21%7D%20+%20a_%7B23%7Db_%7B31%7D%20&amp;%20a_%7B21%7Db_%7B12%7D%20+%20a_%7B22%7Db_%7B22%7D%20+%20a_%7B23%7Db_%7B32%7D%20&amp;%20a_%7B21%7Db_%7B13%7D%20+%20a_%7B22%7Db_%7B23%7D%20+%20a_%7B23%7Db_%7B33%7D%5C%5C%0A%5Cend%7Bbmatrix%7D%0A%5Cend%7Bmultline%7D%0A%5Ctag%7B10%7D"></span></p>
<p>The red color shows how the dot product of the first row of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> and the first column of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BB%7D"> gives the first entry in <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BC%7D">. Every entry in <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BC%7D"> results from a dot product. Every entry is a scalar, embedded in a matrix.</p>
</section>
<section id="what-can-we-do-with-the-dot-product" class="level3">
<h3 class="anchored" data-anchor-id="what-can-we-do-with-the-dot-product">What Can We Do With the Dot Product?</h3>
<ul>
<li>Determine the angle between two vectors, as in Equation&nbsp;6.</li>
<li>As such, determine if two vectors intersect at a right angle (at least in 2-3D). More generally, two vectors of any dimension are <em>orthogonal</em> if their dot product is zero.</li>
<li>Matrix multiplication, when applied repeatedly.</li>
<li>Compute the length of a vector, via <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7Bv%20%5Ccdot%20v%7D"></li>
<li>Compute the projection of one vector on another, for instance how much of a force is along the <img src="https://latex.codecogs.com/png.latex?x">-direction? A verbal interpretation of <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D%20%5Ccdot%20%5Cvec%7Bv%7D"> is it gives the amount of <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bv%7D"> in the direction of <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D">.</li>
</ul>
</section>
</section>
<section id="cross-product" class="level2">
<h2 class="anchored" data-anchor-id="cross-product">Cross Product</h2>
<section id="terminology-and-notation" class="level3">
<h3 class="anchored" data-anchor-id="terminology-and-notation">Terminology and Notation</h3>
<p>The cross product goes by these other names: outer product<sup>4</sup>, tensor product, vector product.</p>
</section>
<section id="formulas-1" class="level3">
<h3 class="anchored" data-anchor-id="formulas-1">Formulas</h3>
<p>The cross product of two vectors returns a vector rather than a scalar. Vectors are defined in terms of a <em>basis</em> which is a coordinate system. Earlier, when we defined <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D%20=%20(u_x,%20u_y,%20u_z)"> it was intrinsically defined in terms of the standard basis set <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bi%7D,%20%5Chat%7Bj%7D,%20%5Chat%7Bk%7D"> (in some fields this would be called the unit coordinate system). Thus a fuller definition of <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D"> would be:</p>
<p><span id="eq-cp1"><img src="https://latex.codecogs.com/png.latex?%0A%5Cvec%7Bu%7D%20=%20u_x%5Chat%7Bi%7D%20+%20u_y%5Chat%7Bj%7D%20+%20u_z%5Chat%7Bk%7D%0A%5Ctag%7B11%7D"></span></p>
<p>In terms of <em>vectors</em>, the cross product is defined as: <span id="eq-cp2"><img src="https://latex.codecogs.com/png.latex?%0A%5Cvec%7Bu%7D%20%5Ctimes%20%5Cvec%7Bv%7D%20=%20(a_%7By%7Db_%7Bz%7D%20-%20a_%7Bz%7Db_%7By%7D)%5Chat%7Bi%7D%20+%20(a_%7Bz%7Db_%7Bx%7D%20-%20a_%7Bx%7Db_%7Bz%7D)%5Chat%7Bj%7D%20+%20(a_%7Bx%7Db_%7By%7D%20-a_%7By%7Db_%7Bx%7D)%5Chat%7Bk%7D%0A%5Ctag%7B12%7D"></span></p>
<p>In my opinion, this is not exactly intuitive, but there is a pattern to it: notice that the terms for <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bi%7D"> don’t involve the <img src="https://latex.codecogs.com/png.latex?x"> component. The details of how this result is computed relies on some properties of the basis set; this <a href="https://en.wikipedia.org/wiki/Cross_product#Coordinate_notation">Wikipedia</a> article has a nice explanation. We need not dwell on it however.</p>
<p>There is also a geometric formula for the cross product:</p>
<p><span id="eq-cp4"><img src="https://latex.codecogs.com/png.latex?%0A%5Cvec%7Bu%7D%20%5Ctimes%20%5Cvec%7Bv%7D%20=%20%5C%7C%20%5Cvec%7Bu%7D%20%5C%7C%20%5C%7C%20%5Cvec%7Bv%7D%20%5C%7C%20sin%20%5Ctheta%20%5Chat%7Bn%7D%0A%5Ctag%7B13%7D"></span></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bn%7D"> is the unit vector perpendicular to the plane defined by <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bv%7D">. The direction of <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bn%7D"> is defined by the <a href="https://en.wikipedia.org/wiki/Right-hand_rule">right-hand rule</a>. Because of this, the cross product is not commutative, i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D%20%5Ctimes%20%5Cvec%7Bv%7D%20%5Cne%20%5Cvec%7Bv%7D%20%5Ctimes%20%5Cvec%7Bu%7D">. The cross product is however anti-commutative: <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D%20%5Ctimes%20%5Cvec%7Bv%7D%20=%20-%20(%5Cvec%7Bv%7D%20%5Ctimes%20%5Cvec%7Bu%7D)"></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Cross product using column vectors
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>As we did for the dot product, we can look at the cross product from the perspective of column vectors. Instead of transposing the first matrix as we did for the dot product, we transpose the second one: <span id="eq-cp3"><img src="https://latex.codecogs.com/png.latex?%0A%5Cvec%7Bu%7D%20%5Ctimes%20%5Cvec%7Bv%7D%20=%20%5Cvec%7Bu%7D%20%5C%20%5Cvec%7Bv%7D%5E%5Cmathsf%7BT%7D%20=%20%5Cbegin%7Bbmatrix%7D%20u_x%20%5C%5C%20u_y%20%5C%5C%20u_z%5Cend%7Bbmatrix%7D%20%5Cbegin%7Bbmatrix%7D%20v_x%20&amp;%20v_y%20&amp;%20v_z%20%5Cend%7Bbmatrix%7D%20=%20%5Cbegin%7Bbmatrix%7D%20u_%7Bx%7Dv_%7Bx%7D%20&amp;%20u_%7Bx%7Dv_%7By%7D%20&amp;%20u_%7Bx%7Dv_%7Bz%7D%20%5C%5C%20u_%7By%7Dv_%7Bx%7D%20&amp;%20u_%7By%7Dv_%7By%7D%20&amp;%20u_%7By%7Dv_%7Bz%7D%20%5C%5C%20u_%7Bz%7Dv_%7Bx%7D%20&amp;%20u_%7Bz%7Dv_%7By%7D%20&amp;%20u_%7Bz%7Dv_%7Bz%7D%5C%5C%20%5Cend%7Bbmatrix%7D%0A%5Ctag%7B14%7D"></span></p>
<p>Interestingly, we are using the dot product to compute the cross product.</p>
<p>The case where we treat <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bv%7D"> as row vectors is left to the reader.<sup>5</sup></p>
</div>
</div>
</div>
<p>Finally, there is a matrix definition of the cross product as well. Evaluation of the following <a href="https://en.wikipedia.org/wiki/Determinant">determinant</a> gives the cross product:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cvec%7Bu%7D%20%5Ctimes%20%5Cvec%7Bv%7D%20=%20%5Cbegin%7Bvmatrix%7D%20%5Chat%7Bi%7D%20&amp;%20%5Chat%7Bj%7D%20&amp;%20%5Chat%7Bk%7D%5C%5C%20u_%7Bx%7D%20&amp;%20u_%7By%7D%20&amp;%20u_%7Bz%7D%20%5C%5C%20v_%7Bx%7D%20&amp;%20v_%7By%7D%20&amp;%20v_%7Bz%7D%5C%5C%5Cend%7Bvmatrix%7D%0A"></p>
</section>
<section id="what-can-we-do-with-the-cross-product" class="level3">
<h3 class="anchored" data-anchor-id="what-can-we-do-with-the-cross-product">What Can We Do With the Cross Product?</h3>
<ul>
<li>In 3D, the result of the cross product is perpendicular or normal to the plane defined by the two input vectors.</li>
<li>If however, the two vectors are parallel or anti-parallel, the cross product is zero.</li>
<li>The length of the cross product is the area of the parallelogram defined by the two input vectors: <img src="https://latex.codecogs.com/png.latex?%5C%7C%20%5Cvec%7Bu%7D%20%5Ctimes%20%5Cvec%7Bv%7D%20%5C%7C"></li>
</ul>
</section>
</section>
<section id="r-functions" class="level2">
<h2 class="anchored" data-anchor-id="r-functions">R Functions</h2>
<section id="section" class="level3">
<h3 class="anchored" data-anchor-id="section"><code>%*%</code></h3>
<p>The workhorse for matrix multiplication in <code>R</code> is the <code>%*%</code> function. This function will accept any combination of vectors and matrices as inputs, so it is flexible. It is also smart: given a vector and a matrix, the vector will be treated as row or column matrix as needed to ensure conformity, if possible. Let’s look at some examples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Some data for examples</span></span>
<span id="cb1-2">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-3">q <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-4">M <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-5">M</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4] [,5]
[1,]    1    4    7   10   13
[2,]    2    5    8   11   14
[3,]    3    6    9   12   15</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A vector times a vector</span></span>
<span id="cb3-2">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> q</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1]
[1,]  130</code></pre>
</div>
</div>
<p>Notice that <code>R</code> returns a data type of matrix, but it is a <img src="https://latex.codecogs.com/png.latex?1%20%5Ctimes%201"> matrix, and thus a scalar value. That means we just computed the dot product, a descision <code>R</code> made internally. We can verify this by noting that <code>q %*% p</code> gives the same answer. Thus, <code>R</code> handled these vectors as column vectors and computed <img src="https://latex.codecogs.com/png.latex?p%5E%7B%5Cintercal%7Dq">.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A vector times a matrix</span></span>
<span id="cb5-2">M <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> p</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1]
[1,]  135
[2,]  150
[3,]  165</code></pre>
</div>
</div>
<p>As <code>M</code> had dimensions <img src="https://latex.codecogs.com/png.latex?3%20%5Ctimes%205">, <code>R</code> treated <code>p</code> as a <img src="https://latex.codecogs.com/png.latex?5%20%5Ctimes%201"> column vector in order to be conformable. The result is a <img src="https://latex.codecogs.com/png.latex?3%20%5Ctimes%201"> vector, so this is the cross product.</p>
<p>If we try to compute <code>p %*% M</code> we get an error, because there is nothing <code>R</code> can do to <code>p</code> which will make it conformable to <code>M</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb7-1">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> M</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in p %*% M: non-conformable arguments</code></pre>
</div>
</div>
<p>What about multiplying matrices?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb9-1">M <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> M</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in M %*% M: non-conformable arguments</code></pre>
</div>
</div>
<p>As you can see, when dealing with matrices, <code>%*%</code> will not change a thing, and if your matrices are non-conformable then it’s an error. Of course, if we transpose either instance of <code>M</code> we do have conformable matrices, but the answers are different, and this is neither the dot product or the cross product, just matrix multiplication.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(M) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> M</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4] [,5]
[1,]   14   32   50   68   86
[2,]   32   77  122  167  212
[3,]   50  122  194  266  338
[4,]   68  167  266  365  464
[5,]   86  212  338  464  590</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb13-1">M <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(M)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]  335  370  405
[2,]  370  410  450
[3,]  405  450  495</code></pre>
</div>
</div>
<p>What can we take from these examples?</p>
<ul>
<li><code>R</code> will give you the <strong>dot product</strong> if you give it two vectors. Note that this is a design decision, as it could have returned the cross product (see Equation&nbsp;14).</li>
<li><code>R</code> will promote a vector to a row or column vector if it can to make it conformable with a matrix you provide. If it cannot, <code>R</code> will give you an error. If it can, the <strong>cross product</strong> is returned.</li>
<li>When it comes to two matrices, <code>R</code> will give an error when they are not conformable.</li>
<li>One function, <code>%*%</code>, does it all: dot product, cross product, or matrix multiplication, but you need to pay attention.</li>
<li>The documentation says as much, but more tersely: “Multiplies two matrices, if they are conformable. If one argument is a vector, it will be promoted to either a row or column matrix to make the two arguments conformable. If both are vectors of the same length, it will return the inner product (as a matrix)”</li>
</ul>
</section>
<section id="other-functions" class="level3">
<h3 class="anchored" data-anchor-id="other-functions">Other Functions</h3>
<p>There are other <code>R</code> functions that do some of the same work:</p>
<ul>
<li><code>crossprod</code> equivalent to <code>t(M) %*% M</code> but faster.</li>
<li><code>tcrossprod</code> equivalent to <code>M %*% t(M)</code> but faster.</li>
<li><code>outer</code> or <code>%o%</code></li>
</ul>
<p>The first two functions will accept combinations of vectors and matrices, as does <code>%*%</code>. Let’s try it with two vectors:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">crossprod</span>(p, q)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1]
[1,]  130</code></pre>
</div>
</div>
<p>Huh. <code>crossprod</code> is returning the <em>dot product</em>! So this is the case where “the cross product is not the cross product.” From a clarity perspective, this is not ideal. Let’s try the other function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tcrossprod</span>(p, q)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4] [,5]
[1,]    6    7    8    9   10
[2,]   12   14   16   18   20
[3,]   18   21   24   27   30
[4,]   24   28   32   36   40
[5,]   30   35   40   45   50</code></pre>
</div>
</div>
<p>There’s the cross product!</p>
<p>What about <code>outer</code>? Remember that another name for the cross product is the outer product. So is <code>outer</code> the same as <code>tcrossprod</code>? In the case of two vectors, it is:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outer</span>(p, q), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tcrossprod</span>(p, q))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>What about a vector with a matrix?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb21-1">tst <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outer</span>(p, M)</span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(tst)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5 3 5</code></pre>
</div>
</div>
<p>Alright, that clearly is not a cross product. The result is an array with dimensions <img src="https://latex.codecogs.com/png.latex?5%20%5Ctimes%203%20%5Ctimes%205">, not a matrix (which would have only two dimensions). <code>outer</code> <em>does</em> correspond to the cross product in the case of two vectors, but anything with higher dimensions gives a different beast. So perhaps using “outer” as a synonym for cross product is not a good idea.</p>
</section>
</section>
<section id="advice" class="level2">
<h2 class="anchored" data-anchor-id="advice">Advice</h2>
<p>Given what we’ve seen above, make your life simple and stick to <code>%*%</code>, and pay close attention to the dimensions of the arguments, especially if row or column vectors are in use. In my experience, thinking about the units and dimensions of whatever it is you are calculating is very helpful. Later, if speed is really important in your work, you can use one of the faster alternatives.</p>


</section>


<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>An extensive dicussion of notations can be found <a href="https://mathoverflow.net/q/366070">here</a>.↩︎</p></li>
<li id="fn2"><p>And curiously, the <img src="https://latex.codecogs.com/png.latex?L_2"> norm works out to be equal to the square root of the dot product of a vector with itself: <img src="https://latex.codecogs.com/png.latex?%5C%7C%20v%20%5C%7C%20=%20%5Csqrt%7Bv%20%5Ccdot%20v%7D">↩︎</p></li>
<li id="fn3"><p>To be multiplied, matrices must be <em>conformable</em>, namely the number of columns of the first matrix must match the number of rows of the second matrix. The reason is so that the dot product terms will match. In the present case we have <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%5E%7B2%5Ctimes3%7D%5Cmathbf%7BB%7D%5E%7B3%5Ctimes3%7D%20=%20%5Cmathbf%7BC%7D%5E%7B2%5Ctimes3%7D">.↩︎</p></li>
<li id="fn4"><p>Be careful, it turns out that “outer” may not be a great synonym for cross product, as explained later.↩︎</p></li>
<li id="fn5"><p>OK fine, here is the answer when treating <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bv%7D"> as row vectors: <img src="https://latex.codecogs.com/png.latex?%5Cvec%7Bu%7D%20%5Ctimes%20%5Cvec%7Bv%7D%20=%20%5Cvec%7Bu%7D%5E%5Cmathsf%7BT%7D%20%5C%20%5Cvec%7Bv%7D"> which expands exactly as the right-hand side of Equation&nbsp;14.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2022,
  author = {Hanson, Bryan},
  title = {Notes on {Linear} {Algebra} {Part} 1},
  date = {2022-08-14},
  url = {http://chemospec.org/posts/2022-08-14-Linear-Alg-Notes/2022-08-14-Linear-Alg-Notes.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2022" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2022. <span>“Notes on Linear Algebra Part 1.”</span>
August 14, 2022. <a href="http://chemospec.org/posts/2022-08-14-Linear-Alg-Notes/2022-08-14-Linear-Alg-Notes.html">http://chemospec.org/posts/2022-08-14-Linear-Alg-Notes/2022-08-14-Linear-Alg-Notes.html</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>Linear Algebra</category>
  <guid>http://chemospec.org/posts/2022-08-14-Linear-Alg-Notes/2022-08-14-Linear-Alg-Notes.html</guid>
  <pubDate>Sun, 14 Aug 2022 07:00:00 GMT</pubDate>
</item>
<item>
  <title>FOSS4Spectroscopy: R vs Python</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2022-07-06-F4S-Update/2022-07-06-F4S-Update.html</link>
  <description><![CDATA[ 




<p>If you aren’t familiar with it, the <a href="https://bryanhanson.github.io/FOSS4Spectroscopy/">FOSS for Spectroscopy web site</a> lists Free and Open Source Software for spectroscopic applications. The collection is of course never really complete, and your package suggestions are most welcome (<a href="https://github.com/bryanhanson/FOSS4Spectroscopy">how to contribute</a>). My methods for finding packages are improving and at this point the major repositories have been searched reasonably well.</p>
<p>A few days ago I pushed a major update, and <strong>at this point <code>Python</code> packages outnumber <code>R</code> packages more than two to one</strong>. The update was made possible because I recently had time to figure out how to search the <a href="https://pypi.org/">PyPi.org</a> site automatically.</p>
<p>In a previous <a href="https://chemospec.org/posts/2021-04-19-Search-GH-Topics/2021-04-19-Search-GH-Topics.html">post</a> I explained the methods I used to find packages related to spectroscopy. These have been updated considerably and the rest of this post will cover the updated methods.</p>
<section id="repos-topics" class="level2">
<h2 class="anchored" data-anchor-id="repos-topics">Repos &amp; Topics</h2>
<p>There are four places I search for packages related to spectroscopy.<sup>1</sup></p>
<ul>
<li><a href="https://cran.r-project.org/">CRAN</a>, searched manually using the <a href="https://cran.r-project.org/web/packages/packagefinder/index.html"><code>packagefinder</code></a> package.<sup>2</sup></li>
<li>Github, searched using custom functions and scripts, detailed below.</li>
<li><a href="https://pypi.org/">PyPi.org</a>, searched as for Github.</li>
<li><a href="https://juliapackages.com/">juliapackages.org</a>, searched manually.</li>
</ul>
<p>The topics I search are as follows:</p>
<ul>
<li>NMR</li>
<li>EPR</li>
<li>ESR</li>
<li>UV</li>
<li>VIS</li>
<li>spectrophotometry</li>
<li>NIR (IR search terms overlap a lot, and also generate many false positives dealing with IR communications, e.g.&nbsp;TV remotes)</li>
<li>FT-IR</li>
<li>FTIR</li>
<li>Raman</li>
<li>XRF</li>
<li>XAS</li>
<li>LIBS (on PyPi.org one must use “laser induced breakdown spectroscopy” because LIBS is the name of a popular software and generates hundreds of false positives)</li>
</ul>
</section>
<section id="searching-cran" class="level2">
<h2 class="anchored" data-anchor-id="searching-cran">Searching CRAN</h2>
<p>I search CRAN using <code>packagefinder</code>; the process is quite straightforward and won’t be covered here. However, it is not an automated process (I should probably work on that).</p>
</section>
<section id="searching-github" class="level2">
<h2 class="anchored" data-anchor-id="searching-github">Searching Github</h2>
<p>The broad approach used to search Github is the same as described in the original <a href="https://chemospec.org/posts/2021-04-19-Search-GH-Topics/2021-04-19-Search-GH-Topics.html">post</a>. However, the scripts have been refined and updated, and now exist as functions in a new package I created called <code>webu</code> (for “webutilities”, but that name is taken on CRAN). The repo is <a href="https://github.com/bryanhanson/webu">here</a>. <code>webu</code> is not on CRAN and I don’t currently intend to put it there, but you can install from the repo of course if you wish to try it out.</p>
<p>Searching Github is now carried out by a supervising script called <code>/utilities/run_searches.R</code> (in the <code>FOSS4Spectroscopy</code> <a href="https://github.com/bryanhanson/FOSS4Spectroscopy">repo</a>). The script contains some notes about finicky details, but is pretty simple overall and should be easy enough to follow.</p>
</section>
<section id="searching-pypi.org" class="level2">
<h2 class="anchored" data-anchor-id="searching-pypi.org">Searching PyPi.org</h2>
<p>Unlike Github, it is not necessary to authenticate to use the PyPi.org API. That makes things simpler than the Github case. The needed functions are in <code>webu</code> and include some deliberate delays so as to not overload their servers. As for Github, searches are supervised by <code>/utilities/run_searches.R</code>.</p>
<p>One thing I observed at PyPi.org is that authors do not always fill out all the fields that PyPi.org can accept, which means some fields are <code>NULL</code> and we have to trap for that possibility. Package information is accessed via a JSON record, for instance the entry for <code>nmrglue</code> can be seen <a href="https://pypi.org/pypi/nmrglue/json">here</a>. This package is pretty typical in that the <code>author_email</code> field is filled out, but the <code>maintainer_email</code> field is not (they are presumably the same). If one considers these JSON files to be analogous to DESCRIPTION in <code>R</code> packages, it looks like there is less oversight on PyPi.org compared to CRAN.</p>
</section>
<section id="searching-julia" class="level2">
<h2 class="anchored" data-anchor-id="searching-julia">Searching Julia</h2>
<p>Julia packages are readily searched manually at <a href="https://juliapackages.com/">juliapackages.org</a>.</p>
</section>
<section id="cleaning-final-vetting" class="level2">
<h2 class="anchored" data-anchor-id="cleaning-final-vetting">Cleaning &amp; Final Vetting</h2>
<p>The raw results from the searches described above still need a lot of inspection and cleaning to be usable. The PyPi.org and Github results are saved in an Excel worksheet with the relevant URLs. These links can be followed to determine the suitability of each package. In the <code>/Utilities</code> folder there are additional scripts to remove entries that are already in the main database (FOSS4Spec.xlsx), as well as to check the names of the packages: Python authors and/or policies seem to lead to cases where different packages can have names differing by case, but also authors are sometimes sloppy when referring to their own packages, sometimes using <code>mypkg</code> and at other times <code>myPkg</code> to refer to the same package.</p>


</section>


<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Once in a while users submit their own package to the repo, and I also find interesting packages in my literature reading.↩︎</p></li>
<li id="fn2"><p><code>packagefinder</code> has recently been archived, but hopefully will be back soon.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2022,
  author = {Hanson, Bryan},
  title = {FOSS4Spectroscopy: {R} Vs {Python}},
  date = {2022-07-06},
  url = {http://chemospec.org/posts/2022-07-06-F4S-Update/2022-07-06-F4S-Update.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2022" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2022. <span>“FOSS4Spectroscopy: R Vs Python.”</span> July
6, 2022. <a href="http://chemospec.org/posts/2022-07-06-F4S-Update/2022-07-06-F4S-Update.html">http://chemospec.org/posts/2022-07-06-F4S-Update/2022-07-06-F4S-Update.html</a>.
</div></div></section></div> ]]></description>
  <category>FOSS</category>
  <category>R</category>
  <category>Python</category>
  <category>Julia</category>
  <category>Github</category>
  <category>PyPi</category>
  <guid>http://chemospec.org/posts/2022-07-06-F4S-Update/2022-07-06-F4S-Update.html</guid>
  <pubDate>Wed, 06 Jul 2022 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Introducing LearnPCA</title>
  <dc:creator>Bryan Hanson</dc:creator>
  <link>http://chemospec.org/posts/2022-05-03-LearnPCA-Intro/2022-05-03-LearnPCA-Intro.html</link>
  <description><![CDATA[ 




<p>PCA, or principal components analysis, is one of the most wide-spread statistical methods in use. It shows up in many disciplines, from political science and psychology, to chemistry and biology. PCA is also really challenging to understand.</p>
<p>I’m pleased to announce that my colleague David Harvey and I have recently released <code>LearnPCA</code>, an <code>R</code> package to help people with understanding PCA. In <code>LearnPCA</code> we’ve tried to integrate our years of experience teaching the topic, along with the best insights we can find in books, tutorials and the nooks and crannies of the internet. Though our experience is in a chemometrics context, we use examples from different disciplines so that the package will be broadly helpful.</p>
<p>The package contains seven vignettes that proceed from the conceptual basics to advanced topics. As of version 0.2.0, there is also a Shiny app to help visualize the process of finding the principal component axes. The current vignettes are:</p>
<ul>
<li>A Guide to the LearnPCA Package</li>
<li>A Conceptual Introduction to PCA</li>
<li>Step-by-Step PCA</li>
<li>Understanding Scores and Loadings</li>
<li>Visualizing PCA in 3D</li>
<li>The Math Behind PCA</li>
<li>A Comparison of Functions for PCA</li>
</ul>
<p>You can access the vignettes at the <a href="https://bryanhanson.github.io/LearnPCA/">Github Site</a>, you don’t even have to install the package. For the Shiny app, do the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LearnPCA"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># you'll need version 0.2.0</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LearnPCA"</span>)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">PCsearch</span>()</span></code></pre></div>
</div>
<p>We would really appreciate your feedback on this package. You can do so in the comments below, or open an <a href="https://github.com/bryanhanson/LearnPCA/issues">issue</a>. 
<script type="application/shiny-prerendered" data-context="server-extras">
ojs_define <- function(..., .session = shiny::getDefaultReactiveDomain()) {
  quos <- rlang::enquos(...)
  vars <- rlang::list2(...)
  nm <- names(vars)
  if (is.null(nm)) {
    nm <- rep_len("", length(vars))
  }
  mapply(function(q, nm, val) {
    # Infer name, if possible
    if (nm == "") {
      tryCatch({
        nm <- rlang::as_name(q)
      }, error = function(e) {
        code <- paste(collapse = "\n", deparse(rlang::f_rhs(q)))
        stop("ojs_define() could not create a name for the argument: ", code)
      })
    }
    .session$output[[nm]] <- val
    outputOptions(.session$output, nm, suspendWhenHidden = FALSE)
    .session$sendCustomMessage("ojs-export", list(name = nm))
    NULL
  }, quos, nm, vars, SIMPLIFY = FALSE, USE.NAMES = FALSE)
  invisible()
}
</script>
</p>
<!--html_preserve-->
<script type="application/shiny-prerendered" data-context="dependencies">
{"type":"list","attributes":{},"value":[]}
</script>
<!--/html_preserve-->
<!--html_preserve-->
<script type="application/shiny-prerendered" data-context="execution_dependencies">
{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["packages"]}},"value":[{"type":"list","attributes":{"names":{"type":"character","attributes":{},"value":["packages","version"]},"class":{"type":"character","attributes":{},"value":["data.frame"]},"row.names":{"type":"integer","attributes":{},"value":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]}},"value":[{"type":"character","attributes":{},"value":["base","cli","compiler","datasets","digest","ellipsis","evaluate","fastmap","graphics","grDevices","htmltools","htmlwidgets","httpuv","jsonlite","knitr","later","lifecycle","magrittr","methods","mime","promises","R6","Rcpp","rlang","rmarkdown","shiny","stats","stringi","stringr","tools","utils","xfun","xtable","yaml"]},{"type":"character","attributes":{},"value":["4.2.0","3.3.0","4.2.0","4.2.0","0.6.29","0.3.2","0.15","1.1.0","4.2.0","4.2.0","0.5.2","1.5.4","1.6.5","1.8.0","1.39","1.3.0","1.0.1","2.0.3","4.2.0","0.12","1.2.0.1","2.5.1","1.0.8.3","1.0.2","2.14","1.7.1","4.2.0","1.7.6","1.4.0","4.2.0","4.2.0","0.30","1.8-4","2.3.5"]}]}]}
</script>
<!--/html_preserve-->



<script data-goatcounter="https://chemospec.goatcounter.com/count" async="" src="//gc.zgo.at/count.js"></script><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{hanson2022,
  author = {Hanson, Bryan},
  title = {Introducing {LearnPCA}},
  date = {2022-05-03},
  url = {http://chemospec.org/posts/2022-05-03-LearnPCA-Intro/2022-05-03-LearnPCA-Intro.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-hanson2022" class="csl-entry quarto-appendix-citeas">
Hanson, Bryan. 2022. <span>“Introducing LearnPCA.”</span> May 3, 2022.
<a href="http://chemospec.org/posts/2022-05-03-LearnPCA-Intro/2022-05-03-LearnPCA-Intro.html">http://chemospec.org/posts/2022-05-03-LearnPCA-Intro/2022-05-03-LearnPCA-Intro.html</a>.
</div></div></section></div> ]]></description>
  <category>R</category>
  <category>PCA</category>
  <guid>http://chemospec.org/posts/2022-05-03-LearnPCA-Intro/2022-05-03-LearnPCA-Intro.html</guid>
  <pubDate>Tue, 03 May 2022 07:00:00 GMT</pubDate>
</item>
</channel>
</rss>
