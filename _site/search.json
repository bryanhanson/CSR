[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Chemometrics and Spectroscopy Using R",
    "section": "",
    "text": "Spectral Heatmaps\n\n\n\n\n\n\n\nR\n\n\nHeatmap\n\n\nSeriation\n\n\nChemoSpec\n\n\n\n\nInsights into how samples and frequencies affect clustering\n\n\n\n\n\n\nApr 25, 2020\n\n\n\n\n\n\n\n\nAligning 2D NMR Spectra Part 1\n\n\n\n\n\n\n\nR\n\n\nChemoSpec\n\n\nAlignment\n\n\nNMR\n\n\n\n\nQuantifying the mis-alignment\n\n\n\n\n\n\nFeb 20, 2020\n\n\n\n\n\n\n\n\nChemoSpec2D Update\n\n\n\n\n\n\n\nR\n\n\nChemoSpec2D\n\n\n\n\nImprovements to ChemoSpec2D\n\n\n\n\n\n\nFeb 19, 2020\n\n\n\n\n\n\n\n\nExploring Github Topics\n\n\n\n\n\n\n\nR\n\n\nGithub\n\n\n\n\nScrape Github for Repos of Interest\n\n\n\n\n\n\nJan 25, 2020\n\n\n\n\n\n\n\n\nChemoSpec Update\n\n\n\n\n\n\n\nR\n\n\nChemoSpec\n\n\n\n\nImprovements to ChemoSpec\n\n\n\n\n\n\nJan 24, 2020\n\n\n\n\n\n\n\n\nChemoSpecUtils Update\n\n\n\n\n\n\n\nR\n\n\nChemoSpecUtils\n\n\n\n\nNew version of ChemoSpecUtils\n\n\n\n\n\n\nJan 22, 2020\n\n\n\n\n\n\n\n\nFOSS for Spectroscopy Update\n\n\n\n\n\n\n\nR\n\n\nPython\n\n\n\n\nImprovements to FOSS for Spectroscopy\n\n\n\n\n\n\nJan 22, 2020\n\n\n\n\n\n\n\n\nreadJDX Overhaul\n\n\n\n\n\n\n\nR\n\n\nreadJDX\n\n\nData Formats\n\n\n\n\nImprovements to readJDX\n\n\n\n\n\n\nJan 2, 2020\n\n\n\n\n\n\n\n\nFOSS for Spectroscopy\n\n\n\n\n\n\n\nR\n\n\nPython\n\n\n\n\nA Collection of Free & Open Source Spectroscopy Resources\n\n\n\n\n\n\nJan 1, 2020\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "The Back Story",
    "section": "",
    "text": "About Your Host\nYou can reach me at hanson@depauw.edu. Occasionally I am on Twitter.\n\nNow\nI am currently a freelance R consultant with expertise in:\n\nDevelopment of R packages supporting science, especially spectroscopy and chemometrics\nSpectroscopy (NMR, IR, UV-Vis etc)\nChemometrics\nExploratory Data Analysis\nData Visualizations\nData Management: organization, cleaning\nReproducible Research: the automated writing of research reports\nR Training\nWeb page creation and maintenance\nFamiliar with R, markdown, LaTeX, html, css, JavaScript\nResume\n\n\n\nThen\nI retired in June 2018 from DePauw University after 32 years of teaching chemistry and biochemistry. It was a good run. No regrets. Just time to do something else.\n\nKarl Broman quote source"
  },
  {
    "objectID": "PlantMetabolomics.html",
    "href": "PlantMetabolomics.html",
    "title": "Plant Metabolomics: Where Spectroscopy Meets Evolution & Ecology",
    "section": "",
    "text": "This page honors and makes available the research of my students. However, it is no longer being updated, as I retired in June 2018.\nIn my group, we conduct research on how plants respond to the stress of climate change. Such stress can take the form of too much heat, too much salt in the soil, or too little water. We use methods from metabolomics, chemistry and ecology, and benefit from collaboration with Prof. Dana Dudle in the Biology Department. We greatly appreciate support from DePauw’s Science Research Fellows program (now discontinued), the Faculty Development Committee, and the Mellon Foundation (through FDC).\nOur plant of choice is Portulaca oleracea, a weed more commonly known as purslane. We have chosen purslane because it is easy to grow and is interesting from a medicinal/nutritional perspective - it has the most omega-3 fatty acids of any plant. Our original objective was to determine whether purslane’s response to stress has a genetic component which also contributes to reproductive fitness. We have been able to confirm this, and we are now focussed on understanding the molecular nature of purslane’s response: What pathways are activated? What molecules are involved?\nOur approach is to blend metabolomic and ecological methods. Metabolomics is the study of an organism’s metabolites under a controlled set of conditions, in our case, normal versus stressful conditions. As far as possible, one tries to measure all the metabolites at once, in a holistic fashion, which is not an easy feat. Typically, this is done with NMR, MS, IR, or other forms of spectroscopy. We also supplement these instrumental techniques with more traditional single point chemical measurements such as antioxidant levels. From the ecological perspective, we record parameters of plant growth that represent measures of fitness, such as biomass produced, the number of flowers, and so forth. To be meaningful, we need to conduct these experiments on large numbers of plants. The resulting data sets, composed of very different sorts of measurements, represent the state of the plant under the conditions tested. We use various statistical methods to figure out which treatments have produced an interesting response, and whether those responses vary with genotype. Our statistical analyses are done with the open source computational statistical program R and in the case of spectroscopic data, with the ChemoSpec package for R, written by Bryan.\n\n\n\n\n\n\n\n\n\n\nThe following students have carried out this research. Click on their names to download the posters they prepared about their work:\n\nAcademic year 2016-2017\n\nEmma Veon\n\nSummer 2015\n\nShannon Jager\nBrian Saulnier\n\nSummer 2013\n\nKristina Mulry Kristina’s work has been published\n\nFall 2012\n\nPolly Haight\n\nSummer 2011\n\nMatt Kukurugya\nPolly Haight\nVincent Guzzetta\nMatt Keinsley\nPoster presented at the joint annual meeting of the Society for Economic Botany and The Botanical Society of America in St. Louis.\n\nSummer 2010\n\nElizabeth Botts\nMatt Keinsley\n\nSummer 2009 (The Pioneers!)\n\nTanner Miller\nCourtney Brimmer\nKelly Summers\n\n2008 (Bryan’s first metabolomics work!)\n\nPoster evaluating various brands of Saw Palmetto (Serenoa repens) by NMR and IR. Presented at the Society for Economic Botany meeting, July 2008."
  },
  {
    "objectID": "posts/2020-01-01-Intro-F4S/2021-01-01-Intro-F4S.html",
    "href": "posts/2020-01-01-Intro-F4S/2021-01-01-Intro-F4S.html",
    "title": "FOSS for Spectroscopy",
    "section": "",
    "text": "For this initial version, I searched the CRAN ecosystem via packagefinder and the Python world via PyPi.org using spectroscopy-related keywords. My expertise is in R so I’m pretty confident I have most of the R packages included. I’m not so confident about coverage of the Python packages (where else should I look?).\nCurrently, the “status” column in the main table is empty. I am working on a version which will update the status with a date giving some indication of the age and activity of the repository. Right now the page is updated when I push to Github, but in the long run I hope to get Travis-CI to run it as a weekly cron job.\nI welcome your feedback in any form!\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{hanson2020,\n  author = {Bryan Hanson},\n  title = {FOSS for {Spectroscopy}},\n  date = {2020-01-01},\n  url = {http://chemospec.org/posts/2020-01-01-Intro-F4S/2021-01-01-Intro-F4S.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nBryan Hanson. 2020. “FOSS for Spectroscopy.” January 1,\n2020. http://chemospec.org/posts/2020-01-01-Intro-F4S/2021-01-01-Intro-F4S.html."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Selected Projects",
    "section": "",
    "text": "Misc Projects\n\nFOSS for Spectroscopy A collection of free and open source spectroscopy projects.\n\n\n\nFrom The Past!\nOver 32 years of teaching at DePauw University, I was honored to conduct research with a good number of very talented undergraduates. The last 15 years or so my focus was on plant metabolomics. Checkout this page presenting some of the work conducted by student researchers."
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Bryan A. Hanson",
    "section": "",
    "text": "This is a summary of my professional experience related to software development projects. In prior times I taught chemistry and biochemistry for 32 years at DePauw University. If you would like a more traditional CV covering that phase, please click here. My research into plant metabolomics is featured here.\nExpertise in:"
  },
  {
    "objectID": "resume.html#positions-held",
    "href": "resume.html#positions-held",
    "title": "Bryan A. Hanson",
    "section": "Positions Held",
    "text": "Positions Held\n\n\n\nProfessor of Chemistry & Biochemistry, DePauw University\n\n\n   \n\n\n1986–2018"
  },
  {
    "objectID": "resume.html#education",
    "href": "resume.html#education",
    "title": "Bryan A. Hanson",
    "section": "Education",
    "text": "Education\n\n\n\nPost-doctoral Associate, Oregon State University\n\n\n   \n\n\n1984–1986\n\n\n\n\nPh.D., Chemistry, University of California Los Angeles, California\n\n\n   \n\n\nSeptember 1984\n\n\n\n\nB.S., Biochemistry, California State University Los Angeles, California\n\n\n   \n\n\nOctober 1981"
  },
  {
    "objectID": "resume.html#r-software-packages-authored",
    "href": "resume.html#r-software-packages-authored",
    "title": "Bryan A. Hanson",
    "section": "R Software Packages Authored",
    "text": "R Software Packages Authored\nAll my work can be seen at Github. Here are some highlights:\nChemoSpec: Exploratory Chemometrics for Spectroscopy\nChemoSpec2D: Exploratory Chemometrics for 2D Spectroscopy\nexCon: Interactive Exploration of Contour Data live demo\nreadJDX: Import Data in the JCAMP-DX Format\nSpecHelpers: Spectroscopy Related Utilities\nunmixR: Hyperspectral Unmixing with R, with Anton Belov, Conor McManus, Claudia Beleites and Simon Fuller\nHiveR: Hive Plots in 2D and 3D\nLindenmayeR: Functions to Explore L-Systems (Lindenmayer Systems)"
  },
  {
    "objectID": "resume.html#selected-presentations",
    "href": "resume.html#selected-presentations",
    "title": "Bryan A. Hanson",
    "section": "Selected Presentations",
    "text": "Selected Presentations\n“Development of Chemometric Tools for 2D NMR Data Sets” Poster at PANIC 2018 (Practical Applications of NMR in Industry Conference), La Jolla (San Diego) California, March 2018. Download\n“Using R to Make Sense of NMR Data Sets” invited talk at PANIC 2017 (Practical Applications of NMR in Industry Conference), Hilton Head South Carolina, February 2017. Download\n“unmixR: Hyperspectral Unmixing in ” with Conor McManus, Simon Fuller, and Claudia Beleites. Poster at 2014, University of California at Los Angeles, June 30–July 3, 2014. Download\n“Preliminary Metabolic Investigation of Saline-Stressed Portulac olercea using 1H NMR” with Paulina J. Haight and John S. Harwood. Poster at the ACS National Meeting, Indianpolis, September 2013. Download\n“HiveR: 2 and 3D Hive Plots of Networks” Invited talk at useR! 2012 Conference, Nashville Tennessee, June 12–15, 2012. Download\n“HiveR: 2 and 3D Hive Plots of Networks” Poster at useR! 2012 Conference, Nashville Tennessee, June 12–15, 2012. Download\n“Implementation of ANOVA-PCA in R for Multivariate Exploration” with M. J. Keinsley. Poster at useR! 2012 Conference, Nashville Tennessee, June 12–15, 2012. Download\n“The Effect of Climate Change on the Medicinal Plant Purslane Portulaca oleracea” with Elizabeth Botts, Coutney Brimmer, Tanner Miller, Kelley Summers and Dana Dudle. Presented at the 52\\(^{nd}\\) Annual Meeting of the Society for Economic Botany, July 9–13, 2011, St Louis Missouri. Download\n“ChemoSpec: an R Package for the Chemometric Analysis of Spectroscopic Data” useR! 2010 Conference, National Institute of Standards and Technology, Gaithersburg Maryland, July 2010. Download\n“Assessing Serenoa repens (Arecaceae) Quality at the Retail Level Using Spectroscopic and Chemometric Methods” with Tao Ye and M. Daniel Raftery. Presented at the 49\\(^{th}\\) Annual Meeting of the Society for Economic Botany, June 1–5, 2008, Duke University. Download"
  },
  {
    "objectID": "resume.html#miscellaneous",
    "href": "resume.html#miscellaneous",
    "title": "Bryan A. Hanson",
    "section": "Miscellaneous",
    "text": "Miscellaneous\nGoogle Summer of Code 2021: Mentored Tejasvi Gupta (India) who adapted ChemoSpec to provide ggplot2 and plotly graphics options.\nGoogle Summer of Code 2021: Co-mentored Sang Truong (USA) who continued work on the hyperSpec package.\nGoogle Summer of Code 2020: Co-mentored Erick Oduniyi (USA) who began the work of refactoring hyperSpec into sub-packages.\nGoogle Summer of Code 2016: Co-mentored Anton Belov (Russia) in writing new functions for the unmixR package.\nGoogle Summer of Code 2013: Co-mentored Conor McManus (Ireland) in writing the unmixR package.\nI am a significant contributor to the Valid NMR Chemometrics Wiki.\nYou can see my StackExchange Activity."
  },
  {
    "objectID": "posts/2020-04-25-Heatmaps/2020-04-25-Heatmaps.html",
    "href": "posts/2020-04-25-Heatmaps/2020-04-25-Heatmaps.html",
    "title": "Spectral Heatmaps",
    "section": "",
    "text": "Most everyone is familiar with heatmaps in a general way. It’s hard not to run into them. Let’s consider some variations:\n\nA heatmap is a 2D array of rectangular cells colored by value. Generally, the rows and columns are ordered in some purposeful manner. These are very commonly encountered in microarrays for example.\nAn image is a type of heatmap in which the ordering of the rows and columns is defined spatially – it would not make sense to reorder them. This kind of data arises from the physical dimensions of a sensor, for instance the sensor on a digital camera or a raman microscope. An image might also arise by a decision to subset and present data in a “square” format. An example would be the topographic maps provided by the US government which cover a rectangular latitude/longitude range. This type of data can also be presented as a contour plot. See the examples in ?image for image and contour plots of the classic Maunga Whau volcano data, as well as an overlay of the contours on the image plot.\nA chloropleth is a map with irregular geographic boundaries and regions colored by some value. These are typically used in presenting social or political data. A chloropleth is not really a heatmap but it is often mis-characterized as one.\n\nThese three types of plots are conceptually unified in that they require a 3D data set. In the case of the heatmap and the image, the underlying data are on a regular x, y grid of values; mathematically, a matrix. The row and column indices are mapped to the x, y values, and the matrix entries are the z values. A chloropleth can be thought of as a very warped matrix where the cells are not on a regular grid but instead a series of arbitrary connected paths, namely the geographic boundaries. There is a value inside each connected path (the z value), but naturally the specification of the paths requires a completely different data structure. An intermediate type would be the cartogram heatmap described by Wilke.\n\nHeatmaps in Spectroscopy\nThe hmapSpectra function in ChemoSpec displays a heatmap to help you focus on which frequencies drive the separation of your samples.1 We’ll use the example from ?hmapSpectra which uses the built-in SrE.IR data set. This data set is a series of IR spectra of commercial Serenoa repens oils which are composed of mixtures of triglycerides and free fatty acids (see ?SrE.IR for more information). Thus the carbonyl region is of particular interest. The example narrows the frequency range to the carbonyl region for easy interpretation. Let’s look first at the spectra.\nNote: rather than link every mention of a help page in this post, remember you can see all the documentation at this site.\n\nlibrary(\"ChemoSpec\")\n\nLoading required package: ChemoSpecUtils\n\n\n\nAs of version 6, ChemoSpec offers new graphics output options\n\n\nFor details, please see ?GraphicsOptions\n\n\n\nThe ChemoSpec graphics option is set to 'ggplot2'\n\n\nTo change it, do\n    options(ChemoSpecGraphics = 'option'),\n    where 'option' is one of 'base' or 'ggplot2' or'plotly'.\n\ndata(SrE.IR) # load the data set\n# limit to the carbonyl region\nIR <- removeFreq(SrE.IR, rem.freq = SrE.IR$freq > 1775 | SrE.IR$freq < 1660)\nplotSpectra(IR, which = 1:16, lab.pos = \"none\")\n\n\n\n\nThe blue and green spectra are samples composed only of triglycerides, and hence the ester carbonyl is the primary feature. All other samples are clearly mixtures of ester and carboxylic acid stretching peaks. And now for the heatmap, using defaults:\n\nres <- hmapSpectra(IR)\n\n\n\n\nIn this default display, you’ll notice that the rows and column labels are indices to the underlying sample names and frequency list. This is not so helpful. The color scheme is not so exciting either. hmapSpectra uses the package seriation which in turn uses the heatmap.2 function in package gplots. Fortunately we can use the ... argument to pass additional arguments to heatmap.2 to get a much more useful plot.\n\n\nCustomizing the hmapSpectra Display\n\n# Label samples and frequencies by passing arguments to heatmap.2\n# Also make a few other nice plot adjustments\nres <- hmapSpectra(IR,\n  col = heat.colors(5),\n  row_labels = IR$names, col_labels = as.character(round(IR$freq)),\n  margins = c(4, 6)\n)\n\n\n\n\nThis is a lot nicer plot, since the rows are labeled with the sample names, and the columns with frequencies. Note that not every column is labeled, only every few frequencies. If you need the actual frequencies, which you probably will, they can be obtained from the returned object (res in this case; see the end of this post for an example).\n\n\nInterpreting the Plot\nHow do we interpret this plot? This is a seriated heatmap, which means the rows and columns have been re-ordered according to some algorithm (more on this in a moment). The ordering puts the frequencies most important in distinguishing the samples in the upper left and lower right (the yellow regions). In the lower right corner, we see the two outlier samples TJ_OO and SV_EPO grouped together. On the frequency axis, we see that ester stretching peaks around 1740 \\(\\mathrm{cm}^1\\) are characteristic for these samples. In the upper left corner, we see several samples grouped together, and associated with the fatty acid carboxylic acid peak around 1710 \\(\\mathrm{cm}^1\\). From these two observations, we can conclude that these two peak ranges are most important in separating the samples. Of course, in this simple example using a small part of the spectrum, this answer was already clear by simple inspection. Using a simple/limited range of data helps us to be sure we understand what’s happening when we try a new technique.\n\n\nUsing a Different Distance Measure & Seriation Method\nThe default data treatments for hmapSpectra are inherited from hmap in package seriation. The default distance between the samples is the Euclidean distance. The default seriation method is “OLO” or “optimal leaf ordering”. The full list of seriation methods is described in ?seriate. There are more than 20 options. As with the display details, we can change these defaults via the ... arguments. Let’s use the cosine distance (the same as the Pearson distance), and seriate using the Gruvaeus-Wainer algorithm (there’s a brief explanation of this algorithm at ?seriate).\n\ncosine_dist <- function(x) as.dist(1 - cor(t(x)))\nres <- hmapSpectra(IR,\n  col = heat.colors(5),\n  row_labels = IR$names, col_labels = as.character(round(IR$freq)),\n  margins = c(4, 6),\n    distfun = cosine_dist,\n    method = \"GW\"\n)\n\nRegistered S3 method overwritten by 'gclus':\n  method         from     \n  reorder.hclust seriation\n\n\n\n\n\nYou can see that using different distance measures and seriation algorithms gives a rather different result: the ester “hot spots” which were in the lower right corner are now almost in the lower left corner. Which settings are best will depend on your data set, the goal of your analysis, and there are a lot of options from which to choose. The settings used here are simply for demonstration purposes, I make no claim these settings are appropriate!\nFinally, if you want to capture the re-ordered frequencies, you can access them in the returned object:\n\nround(IR$freq[res$colInd$order])\n\n [1] 1767 1765 1763 1761 1759 1757 1755 1753 1751 1749 1747 1745 1743 1741 1740\n[16] 1738 1736 1734 1732 1730 1768 1774 1770 1772 1728 1726 1724 1722 1720 1718\n[31] 1716 1714 1713 1711 1709 1707 1705 1703 1701 1699 1697 1695 1693 1691 1689\n[46] 1687 1660 1664 1666 1678 1680 1686 1682 1676 1674 1672 1662 1668 1670 1684\n\n\n\n\n\n\n\nFootnotes\n\n\nOther functions in ChemoSpec that can help you explore which frequencies are important are plotLoadings, plot2Loadings and sPlotSpectra.↩︎\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{hanson2020,\n  author = {Bryan Hanson},\n  title = {Spectral {Heatmaps}},\n  date = {2020-04-25},\n  url = {http://chemospec.org/posts/2020-04-25-Heatmaps/2020-04-25-Heatmaps.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nBryan Hanson. 2020. “Spectral Heatmaps.” April 25, 2020. http://chemospec.org/posts/2020-04-25-Heatmaps/2020-04-25-Heatmaps.html."
  },
  {
    "objectID": "posts/2020-01-02-readJDX-update/2020-01-02-readJDX-update.html",
    "href": "posts/2020-01-02-readJDX-update/2020-01-02-readJDX-update.html",
    "title": "readJDX Overhaul",
    "section": "",
    "text": "improved documentation\nthe addition of more vignettes\nimproved output when debug > 0\n2D NMR files are now handled\n\nYou can see more about the package here. As always, if you use the package and have troubles, please file an issue. The JCAMP-DX standard is challenging and vendors have a lot of flexibility, so please do share any problematic files you encounter.\n\n\n\n\nFootnotes\n\n\nThe current version also includes changes in an unreleased version (0.3.372) in which several bugs were squashed.↩︎\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{hanson2020,\n  author = {Bryan Hanson},\n  title = {readJDX {Overhaul}},\n  date = {2020-01-02},\n  url = {http://chemospec.org/posts/2020-01-02-readJDX-update/2020-01-02-readJDX-update.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nBryan Hanson. 2020. “readJDX Overhaul.” January 2, 2020. http://chemospec.org/posts/2020-01-02-readJDX-update/2020-01-02-readJDX-update.html."
  },
  {
    "objectID": "posts/2020-01-22-CSU-update/2020-01-22-CSU-update.html",
    "href": "posts/2020-01-22-CSU-update/2020-01-22-CSU-update.html",
    "title": "ChemoSpecUtils Update",
    "section": "",
    "text": "There are new color options available in addition to the auto color scheme used during data importing. These should be useful to normal-vision individuals when there are a lot of categories. The auto option remains the default to avoid breaking anyone’s code. All the built-in color schemes are shown below. They can be used in any of the import functions in either package. The code used to make the figure below is in ?colorSymbol. Note: you probably should get the devel version to ChemoSpec in order to see the documentation about how to use the new colors.\nThe function removeFreq in ChemoSpec now accepts a formula for the specification of the frequencies to remove. This brings it in line with the corresponding function in ChemoSpec2D. This should be a lot easier to use.\nThe function sampleDist is now available and replaces sampleDistSpectra. Again the functions in the two overlying packages are essentially as similar as they can be.\nThis version is compatible with the upcoming release of R 4.0.\n\n\n\n\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{hanson2020,\n  author = {Bryan Hanson},\n  title = {ChemoSpecUtils {Update}},\n  date = {2020-01-22},\n  url = {http://chemospec.org/posts/2020-01-22-CSU-update/2020-01-22-CSU-update.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nBryan Hanson. 2020. “ChemoSpecUtils Update.” January 22,\n2020. http://chemospec.org/posts/2020-01-22-CSU-update/2020-01-22-CSU-update.html."
  },
  {
    "objectID": "posts/2020-01-22-F4S-update/2020-01-22-F4S-update.html",
    "href": "posts/2020-01-22-F4S-update/2020-01-22-F4S-update.html",
    "title": "FOSS for Spectroscopy Update",
    "section": "",
    "text": "After a lot of wrestling with Github access issues, the Status column in the table now gives the date of the most recent update to the project that I can find in an automated way.\nThe Notes column is now called Focus and reflects the focus of the projects as far as I can determine things. I’m using a more-or-less controlled vocabulary here, so sorting on the Focus column should bring related projects together.\nThe number of entries is greatly expanded (and I have more in the hopper).\nThe page is now automatically updated weekly, which will keep the links and dates fresh.\n\nAs always, I welcome your feedback in any form. You can use the comments below, or if you have additions/corrections to the page itself, there is info there about how to submit updates.\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{hanson2020,\n  author = {Bryan Hanson},\n  title = {FOSS for {Spectroscopy} {Update}},\n  date = {2020-01-22},\n  url = {http://chemospec.org/posts/2020-01-22-F4S-update/2020-01-22-F4S-update.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nBryan Hanson. 2020. “FOSS for Spectroscopy Update.” January\n22, 2020. http://chemospec.org/posts/2020-01-22-F4S-update/2020-01-22-F4S-update.html."
  },
  {
    "objectID": "posts/2020-01-25-GH-Topics/2020-01-25-GH-Topics.html",
    "href": "posts/2020-01-25-GH-Topics/2020-01-25-GH-Topics.html",
    "title": "Exploring Github Topics",
    "section": "",
    "text": "Naturally I turned to StackOverflow to find out how to do this, and quickly encountered this question. It was asked when the topics feature was new, so one needs to do things just a bit differently now, but there is a way forward.\nBefore we get to implementation, let’s think about limitations:\n\nThis will only find repositories where topics have been set. I don’t know how broadly people use this feature, I had missed it when it was added.\nGithub topics are essentially tags with a controlled vocabulary, so for the best results you’ll need to manually explore the tags and then use these as your search terms.\nThe Github API only returns 30 results at a time for most types of queries. For our purposes this probably doesn’t matter much. The documentation explains how to iterate to get all possible results.\nThe Github API also limits the number of queries you can make to 60/hr unless you authenticate, in which case the limit goes to 6000/hr.\n\nLet’s get to it! First, create a Github access token on your local machine using the instructions in this gist. Next, load the needed libraries:\n\n\n\n\nset.seed(123)\nlibrary(\"httr\")\nlibrary(\"knitr\")\nlibrary(\"kableExtra\")\n\nSpecify your desired search terms, and create a list structure to hold the results:\n\nsearch_terms <- c(\"NMR\", \"infrared\", \"raman\", \"ultraviolet\", \"visible\", \"XRF\", \"spectroscopy\")\nresults <- list()\n\nCreate the string needed to access the Github API, then GET the results, and stash them in the list we created:\n\nnt <- length(search_terms) # nt = no. of search terms\nfor (i in 1:nt) {\n  search_string <- paste0(\"https://api.github.com/search/repositories?q=topic:\", search_terms[i])\n    request <- GET(search_string, config(token = github_token))\n  stop_for_status(request) # converts http errors to R errors or warnings\n  results[[i]] <- content(request)\n}\nnames(results) <- search_terms\n\nFigure out how many results we have found, set up a data frame and then put the results into the table. The i, j, and k counters required a little experimentation to get right, as content(request) returns a deeply nested list and only certain items are desired.\n\nnr <- 0L # nr = no. of responses\nfor (i in 1:nt) { # compute total number of results/items found\n    nr <- nr + length(results[[i]]$items)\n}\n\nDF <- data.frame(term = rep(NA_character_, nr),\n  repo_name = rep(NA_character_, nr),\n  repo_url = rep(NA_character_, nr),\n  stringsAsFactors = FALSE)\n\nk <- 1L\nfor (i in 1:nt) {\n    ni <- length(results[[i]]$items) # ni = no. of items\n    for (j in 1:ni) {\n        DF$term[k] <- names(results)[[i]]\n        DF$repo_name[k] <- results[[i]]$items[[j]]$name\n        DF$repo_url[k] <- results[[i]]$items[[j]]$html_url\n        k <- k + 1L\n    }\n}\n# remove duplicated repos which result when repos have several of our\n# search terms of interest.\nDF <- DF[-which(duplicated(DF$repo_name)),]\n\nNow put it all in a table we can inspect manually, send to a web page so it’s clickable, or potentially write it out as a csv (If you want this as a csv you should probably write the results out a bit differently). In this case I want the results as a table in web page so I can click the repo links and go straight to them.\n\nnamelink <- paste0(\"[\", DF$repo_name, \"](\", DF$repo_url, \")\")\nDF2 <- data.frame(DF$term, namelink, stringsAsFactors = FALSE)\nnames(DF2) <- c(\"Search Term\", \"Link to Repo\")\n\nWe’ll show just 10 random rows as an example:\nkeep <- sample(1:nrow(DF2), 10)\noptions(knitr.kable.NA = '')\nkable(DF2[keep, ]) %>%\n  kable_styling(c(\"striped\", \"bordered\"))\n\n\n\n\n\n\n\nSearch Term\n\n\nLink to Repo\n\n\n\n\n\n\n31\n\n\ninfrared\n\n\npycroscopy\n\n\n\n\n79\n\n\nultraviolet\n\n\nwoudc-data-registry\n\n\n\n\n51\n\n\ninfrared\n\n\nir-repeater\n\n\n\n\n14\n\n\nNMR\n\n\nspectra-data\n\n\n\n\n67\n\n\nraman\n\n\nRaman-spectra\n\n\n\n\n42\n\n\ninfrared\n\n\nPrecIR\n\n\n\n\n50\n\n\ninfrared\n\n\nesp32-room-control-panel\n\n\n\n\n118\n\n\nspectroscopy\n\n\nLiveViewLegacy\n\n\n\n\n43\n\n\ninfrared\n\n\narduino-primo-tutorials\n\n\n\n\n101\n\n\nXRF\n\n\nweb_geochemistry\n\n\n\n\nObviously, these results must be inspected carefully as terms like “infrared” will pick up projects that deal with infrared remote control of robots and so forth. As far as my case goes, I have a lot of new material to look through…\nA complete .Rmd file that carries out the search described above, and has a few enhancements, can be found at this gist.\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{hanson2020,\n  author = {Bryan Hanson},\n  title = {Exploring {Github} {Topics}},\n  date = {2020-01-25},\n  url = {http://chemospec.org/posts/2020-01-25-GH-Topics/2020-01-25-GH-Topics.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nBryan Hanson. 2020. “Exploring Github Topics.” January 25,\n2020. http://chemospec.org/posts/2020-01-25-GH-Topics/2020-01-25-GH-Topics.html."
  },
  {
    "objectID": "posts/2020-01-24-CS-update/2020-01-24-CS-update.html",
    "href": "posts/2020-01-24-CS-update/2020-01-24-CS-update.html",
    "title": "ChemoSpec Update",
    "section": "",
    "text": "The most significant user-facing changes are actually in the update to ChemoSpecUtils from a few days ago. In addition, the following documentation changes were made:\n\nAdded documentation for updateGroups which has been in ChemoSpecUtils for a while but effectively hidden from users of ChemoSpec.\nFixed the example in mclustSpectra which had an error and used data that was not a good illustration.\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{hanson2020,\n  author = {Bryan Hanson},\n  title = {ChemoSpec {Update}},\n  date = {2020-01-24},\n  url = {http://chemospec.org/posts/2020-01-24-CS-update/2020-01-24-CS-update.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nBryan Hanson. 2020. “ChemoSpec Update.” January 24, 2020.\nhttp://chemospec.org/posts/2020-01-24-CS-update/2020-01-24-CS-update.html."
  },
  {
    "objectID": "posts/2020-02-19-CS2D-update/2020-02-19-CS2D-update.html",
    "href": "posts/2020-02-19-CS2D-update/2020-02-19-CS2D-update.html",
    "title": "ChemoSpec2D Update",
    "section": "",
    "text": "The most noteworthy user-facing improvements are:\n\nFunction import2DSpectra can now handle JCAMP-DX files, Bruker files exported via the TopSpin “totxt” command, and JEOL spectra exported as “generic ascii”. The design allows additional formats to be added if I have test files to play with (hint hint).\nfiles2Spectra2DObject gains a new argument allowSloppy. This experimental feature will allow one to import data sets that do not have the same dimensions. The intent here is to deal with data sets where the number of points in each dimension is similar but not identical. Additional functions will be needed to handle this kind of data. See the documentation for details.\nfiles2Spectra2DObject has also been modified to allow arguments to be passed to list.files and readJDX. This means for instance you can specify a path other than the current working directory, and have the function recurse through sub-directories. This brings files2Spectra2DObject into line with ChemoSpec::files2SpectraObject.\nFunction hats_alignSpectra2D gains new arguments dist_method and maximize which allows the user to pass their choice of distance measure through to the objective function used to evaluate the overlap of the spectra. This greatly improves the quality of the alignment.\nPlotting is simplified with the addition of two new functions to create Lists of Colors, LofC and Lists of Levels, LofL.\nThe basic color scheme for contours was updated to use a perceptually consistent low/blue -> high/red scheme, based on the principles in the colorspace package. The color-handling infrastructure was also changed to allow easy introduction of different color schemes in the future, though the user cannot yet make changes on the fly.\n\nIn addition, a number of small bugs and annoyances were taken care of, arguments tweaked and documentation improved and expanded. Several functions were rebuilt to make them more robust.\nPlease see the package website for the full changelog and all documentation.\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{hanson2020,\n  author = {Bryan Hanson},\n  title = {ChemoSpec2D {Update}},\n  date = {2020-02-19},\n  url = {http://chemospec.org/posts/2020-02-19-CS2D-update/2020-02-19-CS2D-update.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nBryan Hanson. 2020. “ChemoSpec2D Update.” February 19,\n2020. http://chemospec.org/posts/2020-02-19-CS2D-update/2020-02-19-CS2D-update.html."
  },
  {
    "objectID": "posts/2020-02-20-NMR-Align-Pt1/2020-02-20-NMR-Align-Pt1.html",
    "href": "posts/2020-02-20-NMR-Align-Pt1/2020-02-20-NMR-Align-Pt1.html",
    "title": "Aligning 2D NMR Spectra Part 1",
    "section": "",
    "text": "In one-dimensional \\(^1\\)H NMR spectroscopy, particularly biomolecular NMR, it is frequently necessary to align spectra before chemometric or metabolomics analysis. Poor alignment arises largely from pH and ionic strength induced shifts in aqueous samples. There are a number of published alignment algorithms for the one-dimensional case. The same issue presumably exists for 2D NMR spectra, but alignment options are limited. Instead, for 2D NMR people often work with tables of peaks. Creating these tables is an extra step and decisions about what to include may leave useful information behind.\nNo doubt you’ve compared two spectra by overlaying them on the screen, or printing them out, placing them on top of each other, and holding them up to the light. Conceptually, one can “align” spectra by a similar method: just slide one of the pieces of paper up/down and left/right until the spectra are optimally aligned. But how would one do this algorithmically? A literature searched turned up only a few publications on this topic. Among these, there was only one that I felt I could implement using the description in the paper: the HATS-PR algorithm of Robinette et al. (Robinette et al. 2011).\nWe’ll discuss the HATS algorithm in a future post. As a first step however, we need to consider how we know when two spectra are properly aligned. Visual inspection won’t work, as we will encounter cases where peaks in one region align, but only at the expense of peaks in another region. How would we rank such cases? To automate this process, we need to use an objective function, basically some kind of equation, that we evaluate as we explore the alignment space. A simple but effective option is to compute the distance between the two spectra. This is done by concatenating each row of the 2D spectra to give a long vector of intensities. The distance between these vectors can then be computed using any of the standard distance definitions. Let’s illustrate, starting by taking a look at some mis-aligned data. ChemoSpec2D contains a mis-aligned data set, MUD2, for just this purpose. Here are two spectra from MUD2; note we are using the new convenience functions LofC and LofL to make it easy to overlay the spectra.\n\n\n\n\nlibrary(\"ChemoSpec2D\")\n\nLoading required package: ChemoSpecUtils\n\n\n\nAs of version 6, ChemoSpec2D offers new graphics output options\n\n\n\nFunctions plotScores and plotScree will work with the new options\n\n\nFor details, please see ?GraphicsOptions\n\n\n\nThe ChemoSpec graphics option is set to 'ggplot2'\n\n\nTo change it, do\n    options(ChemoSpecGraphics = 'option'),\n    where 'option' is one of 'base' or 'ggplot2' or'plotly'.\n\ndata(MUD2)\nmylvls <- seq(0, 30, length.out = 10)\nplotSpectra2D(MUD2, which = c(1, 6), showGrid = TRUE,\n  lvls = LofL(mylvls, 2),\n  cols = LofC(c(\"red\", \"black\"), 2, length(mylvls), 2),\n  main = \"MUD2 Spectra 1 & 6\")\n\n\n\n\nThe function sampleDist allows us to compute the distance between every pair of spectra in the MUD2 data set, and present the results as a heat map. Here are the results using cosine as the distance measure.\n\ncos_dist <- sampleDist(MUD2, method = \"cosine\",\n  main = \"Cosine Distance\")\n\n\n\n\nThe actual numerical values are in cos_dist, a matrix. Looking at the heatmap, there are some modest differences among the spectra. However, if one looks at the scale, cosine distances are only defined on [-1 … 1]. While the cosine distance is popular in many spectroscopic contexts, it’s not the best objective function for our purpose because there is little absolute difference between -1 and 1 (and for MUD2 the absolute differences are even smaller, as the range is only 0, 0.99). This limited range affects the alignment process in a subtle way that we won’t cover here (alignment is still successful, however).\nLet’s consider instead the Euclidean distance.\n\neu_dist <- sampleDist(MUD2, method = \"euclidean\",\n  main = \"Euclidean Distance\")\n\n\n\n\nIt turns of that the Euclidean distance gives a wider span of distances, which will serve us well in the next steps. Here, the range is roughly 80, 150. Note that in this plot the distance between identical spectra is zero, plotted as a white squares along the diagonal. When we used cosine as the distance, identical spectra were perfectly correlated and hence the diagonal in that plot was red.\nIn the next post I’ll discuss the general flow of the HATS algorithm, and how to carry it out using ChemoSpec2D.\n\n\n\n\nReferences\n\nRobinette, Steven L., Ramadan Ajredini, Hasan Rasheed, Abdulrahman Zeinomar, Frank C. Schroeder, Aaron T. Dossey, and Arthur S. Edison. 2011. “Hierarchical Alignment and Full Resolution Pattern Recognition of 2d NMR Spectra: Application to Nematode Chemical Ecology.” Analytical Chemistry 83 (5): 1649–57. https://doi.org/10.1021/ac102724x.\n\nReusehttps://creativecommons.org/licenses/by/4.0/CitationBibTeX citation:@online{hanson2020,\n  author = {Bryan Hanson},\n  title = {Aligning {2D} {NMR} {Spectra} {Part} 1},\n  date = {2020-02-20},\n  url = {http://chemospec.org/posts/2020-02-20-NMR-Align-Pt1/2020-02-20-NMR-Align-Pt1.html},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nBryan Hanson. 2020. “Aligning 2d NMR Spectra Part 1.”\nFebruary 20, 2020. http://chemospec.org/posts/2020-02-20-NMR-Align-Pt1/2020-02-20-NMR-Align-Pt1.html."
  }
]