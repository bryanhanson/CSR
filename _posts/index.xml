<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>Chemometrics &amp; Spectroscopy Using R</title>
    <link>https://chemospec.org</link>
    <atom:link href="https://chemospec.org/index.xml" rel="self" type="application/rss+xml"/>
    <description>Chemometrics &amp; Spectroscopy Using R</description>
    <generator>Distill</generator>
    <lastBuildDate>Tue, 01 Feb 2022 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Metabolic Phenotyping Protocol Part 1</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2022-02-01-Protocol-Pt1</link>
      <description>






If you aren’t familiar with ChemoSpec, you might wish to look at the introductory vignette first.
Background
Blaise et al. (2021) have published a detailed protocol for metabolomic phenotyping. They illustrate the protocol using a data set composed of 139 1H HR-MAS SS-NMR spectra (Blaise et al. 2007) of the model organism Caenorhabditis elegans. There are two genotypes, wild type and a mutant, and worms from two life stages.
This series of posts follows the published protocol closely in order to illustrate how to implement the protocol using ChemoSpec. As in any chemometric analysis, there are decisions to be made about how to process the data. In these posts we are interested in which functions to use, and how to examine the results. We are not exploring all possible data processing choices, and argument choices are not necessarily optimized. 
Import the Data
The data set is large, over 30 Mb, so we will grab it directly from the Github repo where it is stored. We will use a custom function to grab the data (you can see the function in the source for this document if interested). The URLs given below point to the frequency scale, the raw data matrix and the variables that describe the sample classification by genotype and life stage (L2 are gravid adults, L4 are larvae).


urls &lt;- c("https://raw.githubusercontent.com/Gscorreia89/chemometrics-tutorials/master/data/ppm.csv",
    "https://raw.githubusercontent.com/Gscorreia89/chemometrics-tutorials/master/data/X_spectra.csv",
    "https://raw.githubusercontent.com/Gscorreia89/chemometrics-tutorials/master/data/worm_yvars.csv")
raw &lt;- get_csvs_from_github(urls, sep = ",")  # a list of data sets
names(raw)


[1] "ppm.csv"        "X_spectra.csv"  "worm_yvars.csv"




Construct the Spectra Object
The format of the data as provided in Github is not really suited to using either of the built-in import functions in ChemoSpec. Therefore we will construct the Spectra object by hand, a useful exercise in its own right. The requirements for a Spectra object are described in ?Spectra.
Process the Raw Data
First, we’ll take the results in raw and convert them to the proper form. Each element of raw is a data frame.


# frequencies are in the 1st list element
freq &lt;- unlist(raw[[1]], use.names = FALSE)

# intensities are in the 2nd list element
data &lt;- as.matrix(raw[[2]])
dimnames(data) &lt;- NULL  # remove the default data frame col names
ns &lt;- nrow(data)  # ns = number of samples - used later

# get genotype &amp; lifestage, recode into something more readible
yvars &lt;- raw[[3]]
names(yvars) &lt;- c("genotype", "stage")
yvars$genotype &lt;- ifelse(yvars$genotype == 1L, "WT", "Mut")
yvars$stage &lt;- ifelse(yvars$stage == 1L, "L2", "L4")
table(yvars)  # quick look at how many in each group


        stage
genotype L2 L4
     Mut 32 33
     WT  34 40

Assemble the Spectra Object by Hand
Next we’ll construct some useful sample names, create the groups vector, assign the colors and symbols, and finally put it all together into a Spectra object.


# build up sample names to include the group membership
sample_names &lt;- as.character(1:ns)
sample_names &lt;- paste(sample_names, yvars$genotype, sep = "_")
sample_names &lt;- paste(sample_names, yvars$stage, sep = "_")
head(sample_names)


[1] "1_WT_L4"  "2_Mut_L4" "3_Mut_L4" "4_WT_L4"  "5_Mut_L4" "6_WT_L4" 

# use the sample names to create the groups vector
grp &lt;- gsub("[0-9]+_", "", sample_names)  # remove 1_ etc, leaving WT_L2 etc
groups &lt;- as.factor(grp)
levels(groups)


[1] "Mut_L2" "Mut_L4" "WT_L2"  "WT_L4" 

# set up the colors based on group membership
data(Col12)  # see ?colorSymbol for a swatch
colors &lt;- grp
colors &lt;- ifelse(colors == "WT_L2", Col12[1], colors)
colors &lt;- ifelse(colors == "WT_L4", Col12[2], colors)
colors &lt;- ifelse(colors == "Mut_L2", Col12[3], colors)
colors &lt;- ifelse(colors == "Mut_L4", Col12[4], colors)

# set up the symbols based on group membership
sym &lt;- grp  # see ?points for the symbol codes
sym &lt;- ifelse(sym == "WT_L2", 1, sym)
sym &lt;- ifelse(sym == "WT_L4", 16, sym)
sym &lt;- ifelse(sym == "Mut_L2", 0, sym)
sym &lt;- ifelse(sym == "Mut_L4", 15, sym)
sym &lt;- as.integer(sym)

# set up the alt symbols based on group membership
alt.sym &lt;- grp
alt.sym &lt;- ifelse(alt.sym == "WT_L2", "w2", alt.sym)
alt.sym &lt;- ifelse(alt.sym == "WT_L4", "w4", alt.sym)
alt.sym &lt;- ifelse(alt.sym == "Mut_L2", "m2", alt.sym)
alt.sym &lt;- ifelse(alt.sym == "Mut_L4", "m4", alt.sym)

# put it all together; see ?Spectra for requirements
Worms &lt;- list()
Worms$freq &lt;- freq
Worms$data &lt;- data
Worms$names &lt;- sample_names
Worms$groups &lt;- groups
Worms$colors &lt;- colors
Worms$sym &lt;- sym
Worms$alt.sym &lt;- alt.sym
Worms$unit &lt;- c("ppm", "intensity")
Worms$desc &lt;- "C. elegans metabolic phenotyping study (Blaise 2007)"
class(Worms) &lt;- "Spectra"
chkSpectra(Worms)  # verify we have everything correct
sumSpectra(Worms)



 C. elegans metabolic phenotyping study (Blaise 2007) 

    There are 139 spectra in this set.
    The y-axis unit is intensity.

    The frequency scale runs from
    8.9995 to 5e-04 ppm
    There are 8600 frequency values.
    The frequency resolution is
    0.001 ppm/point.

    This data set is not continuous
    along the frequency axis.
    Here are the data chunks:

  beg.freq end.freq   size beg.indx end.indx
1   8.9995   5.0005 -3.999        1     4000
2   4.5995   0.0005 -4.599     4001     8600

    The spectra are divided into 4 groups: 

   group no.     color symbol alt.sym
1 Mut_L2  32 #FB0D16FF      0      m2
2 Mut_L4  33 #FFC0CBFF     15      m4
3  WT_L2  34 #511CFCFF      1      w2
4  WT_L4  40 #2E94E9FF     16      w4


*** Note: this is an S3 object
of class 'Spectra'

Plot it to check it
Let’s look at one sample from each group to make sure everything looks reasonable (Figure 1). At least these four spectra look good. Note that we are using the latest ChemoSpec that uses ggplot2 graphics by default (announced here).


p &lt;- plotSpectra(Worms, which = c(35, 1, 34, 2), lab.pos = 7.5, offset = 0.008,
    amplify = 35, yrange = c(-0.05, 1.1))
p




Figure 1: Sample spectra from each group.



In the next post we’ll continue with some basic exploratory data analysis.
This post was created using ChemoSpec version 6.1.0 and ChemoSpecUtils version 1.0.0.



Blaise, Benjamin J., Gonçalo D. S. Correia, Gordon A. Haggart, Izabella Surowiec, Caroline Sands, Matthew R. Lewis, Jake T. M. Pearce, et al. 2021. “Statistical Analysis in Metabolic Phenotyping.” Nature Protocols 16: 4299–4326. https://doi.org/10.1038/s41596-021-00579-1.


Blaise, Benjamin J., Jean Giacomotto, Bénédicte Elena, Marc-Emmanuel Dumas, Pierre Toulhoat, Laurent Ségalat, and Lyndon Emsley. 2007. “Metabotyping of Caenorhabditis Elegans Reveals Latent Phenotypes.” Proceedings of the National Academy of Sciences 104 (50): 19808–12. https://doi.org/10.1073/pnas.0707393104.




</description>
      <distill:md5>208cce194078869c0217b8b4f2cde71b</distill:md5>
      <category>R</category>
      <category>ChemoSpec</category>
      <guid>https://chemospec.org/posts/2022-02-01-Protocol-Pt1</guid>
      <pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate>
      <media:content url="https://chemospec.org/posts/2022-02-01-Protocol-Pt1/2022-02-01-Protocol-Pt1_files/figure-html5/samplePlot-1.png" medium="image" type="image/png" width="1152" height="672"/>
    </item>
    <item>
      <title>GSOC 2021: New Graphics for ChemoSpec</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2021-10-13-GSOC-CS-Graphics</link>
      <description>



It’s been quiet around this blog because supervising two students for Google Summer of Code has kept me pretty busy! But we have some news…

Thanks to Mr. Tejasvi Gupta and the support of GSOC, ChemoSpec and ChemoSpec2D were extended to produce ggplot2 graphics and plotly graphics! ggplot2 is now the default output, and the ggplot2 object is returned, so if one doesn’t like the choice of theme or any other aspect, one can customize the object to one’s desire. The ggplot2 graphics output are generally similar in layout and spirit to the base graphics output, but significant improvements have been made in labeling data points using the ggrepel package. The original base graphics are still available as well. Much of this work required changes in ChemoSpecUtils which supports the common needs of both packages.
Tejasvi did a really great job with this project, and I think users of these packages will really like the results. We have greatly expanded the pre-release testing of the graphics, and as far as we can see every thing works as intended. Of course, please file an issue if you see any problems or unexpected behavior.
To see more about how the new graphics options work, take a look at GraphicsOptions. Here are the functions that were updated:
plotSpectra
surveySpectra
surveySpectra2
reviewAllSpectra (formerly loopThruSpectra)
plotScree (resides in ChemoSpecUtils)
plotScores (resides in ChemoSpecUtils)
plotLoadings (uses patchwork and hence plotly isn’t available)
plot2Loadings
sPlotSpectra
pcaDiag
plotSampleDist
aovPCAscores
aovPCAloadings (uses patchwork and hence plotly isn’t available)
Tejasvi and I are looking forward to your feedback. There are many other smaller changes that we’ll let users discover as they work. And there’s more work to be done, but other projects need attention and I need a little rest!



</description>
      <distill:md5>df4fb54ff492a70cd17fec91680a8768</distill:md5>
      <category>R</category>
      <category>ChemoSpec</category>
      <category>ChemoSpecUtils</category>
      <category>ChemoSpec2D</category>
      <category>GSOC</category>
      <guid>https://chemospec.org/posts/2021-10-13-GSOC-CS-Graphics</guid>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>GSOC 2021: hyperSpec and ChemoSpec!</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2021-05-22-GSOC-hyperSpec-ChemoSpec</link>
      <description>
I’m really happy to announce that this summer I’ll be a co-mentor on two Google Summer of Code spectroscopy projects:
Once again, I’ll co-mentor with Claudia and Vilmantas to continue the work Erick started last summer on hyperSpec (see here for Erick’s wrap up blog post at the end of last year). Sang Truong is the very talented student who will be joining us. Sang’s project is described here.
New this year: ChemoSpec will be upgraded to use ggplot2 graphics along with interactive graphics for many of the plots that are currently rendered in base graphics. Erick, who was the student working on hyperSpec last summer, will be my co-mentor on this project. We are looking forward to having Tejasvi Gupta as the student on this project.



</description>
      <distill:md5>69c84dadaba737a4c2e425d1f484090e</distill:md5>
      <category>R</category>
      <category>hyperSpec</category>
      <category>ChemoSpec</category>
      <category>GSOC</category>
      <guid>https://chemospec.org/posts/2021-05-22-GSOC-hyperSpec-ChemoSpec</guid>
      <pubDate>Sat, 22 May 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Automatically Searching Github Repos by Topic</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2021-04-19-Search-GH-Topics</link>
      <description>



One of the projects I maintain is the FOSS for Spectroscopy web site. The table at that site lists various software for use in spectroscopy. Historically, I have used the Github or Python Package Index search engines to manually search by topic such as “NMR” to find repositories of interest. Recently, I decided to try to automate at least some of this process. In this post I’ll present the code and steps I developed to search Github by topics. Fortunately, I wasn’t starting from scratch, as I had learned some basic web-scraping techniques when I wrote the functions that get the date of the most recent repository update. All the code for this website and project can be viewed here. The steps reported here are current as of the publication of this post, but are subject to change in the future.1
First off, did you know Github allows repository owners to tag their repositories using topical keywords? I didn’t know this for a long time. So add topics to your repositories if you don’t have them already. By the way, the Achilles heel of this project is that good pieces of software may not have any topical tags at all. If you run into this, perhaps you would consider creating an issue to ask the owner to add tags.
The Overall Approach
If you look at the Utilities directory of the project, you’ll see the scripts and functions that power this search process.
Search Repos for Topics Script.R supervises the whole process. It sources:
searchRepos.R (a function)
searchTopic.R (a function)
First let’s look at the supervising script. First, the necessary preliminaries:


library("jsonlite")
library("httr")
library("stringr")
library("readxl")
library("WriteXLS")

source("Utilities/searchTopic.R")
source("Utilities/searchRepos.R")



Note that this assumes one has the top level directory, FOSS4Spectroscopy, as the working directory (this is a bit easier than constantly jumping around).
Next, we pull in the Excel spreadsheet that contains all the basic data about the repositories that we already know about, so we can eventually remove those from the search results.


known &lt;- as.data.frame(read_xlsx("FOSS4Spec.xlsx"))
known &lt;- known$name



Now we define some topics and run the search (more on the search functions in a moment):


topics &lt;- c("NMR", "EPR", "ESR")
res &lt;- searchRepos(topics, "github_token", known.repos = known)



We’ll also talk about that github_token in a moment. With the search results in hand, we have a few steps to make a useful file name and save it in the Searches folder for future use.


file_name &lt;- paste(topics, collapse = "_")
file_name &lt;- paste("Search", file_name, sep = "_")
file_name &lt;- paste(file_name, "xlsx", sep = ".")
file_name &lt;- paste("Searches", file_name, sep = "/")
WriteXLS(res, file_name,
      row.names = FALSE, col.names = TRUE, na = "NA")



At this point, one can open the spreadsheet in Excel and check each URL (the links are live in the spreadsheet). After vetting each site,2 one can append the new results to the existing FOSS4Spec.xlsx data base and refresh the entire site so the table is updated.
To make this job easier, I like to have the search results spreadsheet open and then open all the URLs using the as follows. Then I can quickly clean up the spreadsheet (it helps to have two monitors for this process).


found &lt;- as.data.frame(read_xlsx(file_name))
for (i in 1:nrow(found)) {
  if (grepl("^https?://", found$url[i], ignore.case = TRUE)) BROWSE(found$url[i])
}



Authentificating
In order to use the Github API, you have to authenticate. Otherwise you will be severely rate-limited. If you are authenticated, you can make up to 5,000 API queries per hour.
To authenticate, you need to first establish some credentials with Github, by setting up a “key” and a “secret”. You can set these up here by choosing the “Oauth Apps” tab. Record these items in a secure way, and be certain you don’t actually publish them by pushing.
Now you are ready to authenticate your R instance using “Web Application Flow”.3


myapp &lt;- oauth_app("FOSS", key = "put_your_key_here", secret = "put_your_secret_here")
github_token &lt;- oauth2.0_token(oauth_endpoints("github"), myapp)



If successful, this will open a web page which you can immediately close. In the R console, you’ll need to choose whether to do a one-time authentification, or leave a hidden file behind with authentification details. I use the one-time option, as I don’t want to accidently publish the secrets in the hidden file (since they are easy to overlook, being hidden and all).
searchTopic
searchTopic is a function that accesses the Github API to search for a single topic.4 This function is “pretty simple” in that it is short, but there are six helper functions defined in the same file. So, “short not short”. This function does all the heavy lifting; the major steps are:
Carry out an authenticated query of the topics associated with all Github repositories. This first “hit” returns up to 30 results, and also a header than tells how many more pages of results are out there.
Process that first set of results by converting the response to a JSON structure, because nice people have already built functions to handle such things (I’m looking at you httr).
Check that structure for a message that will tell us if we got stopped by Github access issues (and if so, report access stats).
Extract only the name, description and repository URL from the huge volume of information captured.

Inspect the first response to see how many more pages there are, then loop over page two (we already have page 1) to the number of pages, basically repeating step 2.
Along the way, all the results are stored in a data.frame.
searchRepos
searchRepos does two simple things:
Loops over all topics, since searchTopic only handles one topic at a time.
Optionally, dereplicates the results by excluding any repositories that we already know about.
Other Stuff to Make Life Easier
There are two other scripts in the Utilities folder that streamline maintenance of the project.
mergeSearches.R which will merge several search results into one, removing duplicates along the way.
mergeMaintainers.R which will query CRAN for the maintainers of all packages in FOSS4Spec.xlsx, and add this info to the file.5 Maintainers are not currently displayed on the main website. However, I hope to eventually e-mail all maintainers so they can fine-tune the information about their entries.
Future Work / Contributing
Clearly it would be good for someone who knows Python to step in and write the analogous search code for PyPi.org. Depending upon time contraints, I may use this as an opportunity to learn more Python, but really, if you want to help that would be quicker!
And that folks, is how the sausage is made.
This code has been tested on a number of searches and I’ve captured every exception I’ve encountered. If you have problems using this code, please file an issue. It’s nearly impossible that it is perfect at this point!↩︎
Some search terms produce quite a few false positives. I also review each repository to make sure the project is actually FOSS, is not a student project etc (more details on the main web site).↩︎
While I link to the documentation for completeness, the steps described next do all the work.

↩︎
See notes in the file: I have not been able to get the Github API to work with multiple terms, so we search each one individually.↩︎
Want to contribute? If you know the workings of the PyPi.org API it would be nice to automatically pull the maintainer’s contact info.↩︎
</description>
      <distill:md5>e410a12b3a4a6a08b9e9bac8f0b07c75</distill:md5>
      <category>R</category>
      <category>Github</category>
      <category>FOSS</category>
      <category>httr</category>
      <guid>https://chemospec.org/posts/2021-04-19-Search-GH-Topics</guid>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Using Github Actions &amp; drat to Deploy R Packages</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2021-04-11-GHA-drat</link>
      <description>
Last summer, a GSOC project was approved for work on the hyperSpec package which had grown quite large and hard to maintain.1 The essence of the project was to break the original hyperSpec package into smaller packages.2 As part of that project, we needed to be able to:
Provide development versions of packages
Provide large data-only packages (potentially too large to be hosted on CRAN).
In this post I’ll describe how we used Dirk Eddelbuettel’s drat package and Github Actions to automate the deployment of packages between repositories.
What is drat?
drat is a package that simplifies the creation and modification of CRAN-like repositories. The structure of a CRAN-like repository is officially described briefly here.3 Basically, there is required set of subdirectories, required files containing package metadata, and source packages that are the result of the usual build and check process. One can also have platform-specific binary packages. drat will create the directories and metadata for you, and provides utilities that will move packages to the correct location and update the corresponding metadata.4 The link above provides access to all sorts of documentation. My advice is to not overthink the concept. A repository is simply a directory structure and a couple of required metadata files, which must be kept in sync with the packages present. drat does the heavy-lifting for you.
What are Github Actions?
Github Actions are basically a series of tasks that one can have Github run when there is an “event” on a repo, like a push or pull. Github Actions are used extensively for continuous integrations tasks, but they are not limited to such use. Github Actions are written in a simply yaml-like script that is rather easy to follow even if the details are not familiar. Github Actions uses shell commands, but much of the time the shell simply calls Rscript to run native R functions. One can run tasks on various hardware and OS versions.
The Package Repo
The deployed packages reside on the gh-pages branch of r-hyperspec/pkg-repo in the form of the usual .tar.gz source archives, ready for users to install. One of the important features of this repo is the table of hosted packages displayed in the README. The table portion of README.md file is generated automatically whenever someone, or something, pushes to this repo. I include the notion that something might push because as you will see next, the deploy process will automatically push archives to this repo from the repo where they are created. The details of how this README.md is generated are in drat--update-readme.yaml. If you take a look, you’ll see that we use some shell-scripting to find any .tar.gz archives and create a markdown-ready table structure, which Github then automatically displays (as it does with all README.md files at the top level of a repo). The yaml file also contains a little drat action that will refresh the repo in case that someone manually removes an archive file by git operations. Currently we do not host binary packages at this repo, but that is certainly possible by extension of the methods used for the source packages.
The Automatic Deploy Process
The automatic deploy process is used in several r-hyperSpec repos. I’ll use the chondro repo to illustrate the process. chondro is a simple package containing a &gt; 2 Mb data set. If the package is updated, the package is built and checked and then deployed automatically to r-hyperSpec/pkg-repo (described above). The magic is in drat--insert-package.yaml. The first part of this file does the standard build and check process.5 The second part takes care of deploying to r-hyperspec/pkg-repo. The basic steps are given next (study the file for the details). It is essential to keep in mind that each task in Github Actions starts from the same top level directory.6 Tasks are set off by the syntax - name: task description.
Configure access to Github. Note that we employ a Github user name and e-mail that will uniquely identify the repo that is pushing to r-hyperSpec/pkg-repo. This is helpful for troubleshooting.
Clone r-hyperSpec/pkg-repo into a temporary directory and checkout the gh-pages branch.
Search for any .tar.gz files in the check folder, which is where we directed Github Actions to carry out the build and check process (the first half of this workflow).7 Note that the argument full.names = TRUE is essential to getting the correct path. Use drat to insert the .tar.gz files into the cloned r-hyperSpec/pkg-repo temporary directory.
Move to the temporary directory, then use git commands to send the updated r-hyperspec/pkg-repo branch back to its home, now with the new .tar.gz files included. Use a git commit message that will show where the new tar ball came from.
Thanks for reading. Let me know if you have any questions, via the comments, e-mail, etc.
Acknowledgements
This portion of the hyperSpec GSOC 2020 project was primarily the work of hyperSpec team members Erick Oduniyi, Bryan Hanson and Vilmantas Gegzna. Erick was supported by GSOC in summer 2020.
The work continues this summer, hopefully again with the support of GSOC.↩︎
Project background and results.↩︎
A more loquacious description that may be slightly dated is here.↩︎
drat is using existing R functions, mainly from the tools package. They are just organized and presented from the perspective of a user who wants to create a repo.

↩︎
Modified from the recipes here.↩︎
The toughest part of writing this workflow was knowing where one was in the directory tree of the Github Actions workspace. We made liberal use of getwd(), list.files() and related functions during troubleshooting. All of these “helps” have been removed from the mature version of the workflow. As noted in the workflow, the top directory is /home/runner/work/${{ REPOSITORY_NAME }}/${{ REPOSITORY_NAME }}.↩︎
It’s helpful to understand in a general way what happens during the build and check process (e.g. the directories and files created).↩︎
</description>
      <distill:md5>7b89542b09c6adeef31951098204390f</distill:md5>
      <category>R</category>
      <category>Github Actions</category>
      <category>drat</category>
      <category>GSOC</category>
      <category>hyperSpec</category>
      <guid>https://chemospec.org/posts/2021-04-11-GHA-drat</guid>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Spectroscopy Suite Update</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2021-03-27-Spec-Suite-update</link>
      <description>



My suite of spectroscopy R packages has been updated on CRAN. There are only a few small changes, but they will be important to some of you:
ChemoSpecUtils now provides a set of colorblind-friendly colors, see ?colorSymbol. These are available for use in ChemoSpec and ChemoSpec2D.
At the request of several folks, readJDX now includes a function, splitMultiblockDX, that will split a multiblock JCAMP-DX file into separate files, which can then be imported via the usual functions in the package.
All packages are built against the upcoming R 4.1 release (due in April).
Here are the links to the documentation:
ChemoSpec
ChemSpec2D
ChemoSpecUtils
readJDX
As always, let me know if you discover trouble or have questions.



</description>
      <distill:md5>acce39057512ea99209b2dde1b428ae7</distill:md5>
      <category>R</category>
      <category>ChemoSpec</category>
      <category>ChemoSpec2D</category>
      <category>ChemoSpecUtils</category>
      <category>readJDX</category>
      <guid>https://chemospec.org/posts/2021-03-27-Spec-Suite-update</guid>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      <media:content url="https://chemospec.org/posts/2021-03-27-Spec-Suite-update/emAnnotated.png" medium="image" type="image/png" width="1512" height="432"/>
    </item>
    <item>
      <title>Interfacing ChemoSpec to PLS</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2021-02-08-PLS</link>
      <description>



The ChemoSpec package carries out exploratory data analysis (EDA) on spectroscopic data. EDA is often described as “letting that data speak”, meaning that one studies various descriptive plots, carries out clustering (HCA) as well as dimension reduction (e.g. PCA), with the ultimate goal of finding any natural structure in the data.
As such, ChemoSpec does not feature any predictive modeling functions because other packages provide the necessary tools. I do however hear from users several times a year about how to interface a ChemoSpec object with these other packages, and it seems like a post about how to do this is overdue. I’ll illustrate how to carry out partial least squares (PLS) using data stored in a ChemoSpec object and the package chemometrics by Peter Filzmoser and Kurt Varmuza (Filzmoser and Varmuza 2017). One can also use the pls package (Mevik, Wehrens, and Liland 2020).
PLS is a technique related to regression and PCA that tries to develop a mathematical model between a matrix of sample vectors, in our case, spectra, and one or more separately measured dependent variables that describe the same samples (typically, chemical analyses). If one can develop a reliable model, then going forward one can measure the spectrum of a new sample and use the model to predict the value of the dependent variables, presumably saving time and money. This post will focus on interfacing ChemoSpec objects with the needed functions in chemometrics. I won’t cover how to evaluate and refine your model, but you can find plenty on this in Varmuza and Filzmoser (2009) chapter 4, along with further background (there’s a lot of math in there, but if you aren’t too keen on the math, gloss over it to get the other nuggets). Alternatively, take a look at the vignette that ships with chemometrics via browseVignettes("chemometrics").
As our example we’ll use the marzipan NIR data set that one can download in Matlab format from here.1 The corresponding publication is (Christensen et al. 2004). This data set contains NIR spectra of marzipan candies made with different recipes and recorded using several different instruments, along with data about moisture and sugar content. We’ll use the data recorded on the NIRSystems 6500 instrument, covering the 400-2500 nm range. The following code chunk gives a summary of the data set and shows a plot of the data. Because we are focused on how to carry out PLS, we won’t worry about whether this data needs to be normalized or otherwise pre-processed (see the Christensen paper for lots of details).


library("ChemoSpec")
load("Marzipan.RData")
sumSpectra(Marzipan)



 Marzipan NIR data set from www.models.life.ku.dk/Marzipan 

    There are 32 spectra in this set.
    The y-axis unit is absorbance.

    The frequency scale runs from
    450 to 2448 wavelength (nm)
    There are 1000 frequency values.
    The frequency resolution is
    2 wavelength (nm)/point.


    The spectra are divided into 9 groups: 

  group no.     color symbol alt.sym
1     a   5 #FB0D16FF      1       a
2     b   4 #FFC0CBFF     16       b
3     c   4 #2AA30DFF      2       c
4     d   4 #9BCD9BFF     17       d
5     e   3 #700D87FF      3       e
6     f   3 #A777F2FF      8       f
7     g   2 #FD16D4FF      4       g
8     h   3 #B9820DFF      5       h
9     i   4 #B9820DFF      5       i


*** Note: this is an S3 object
of class 'Spectra'

plotSpectra(Marzipan, which = 1:32, lab.pos = 3000)




In order to carry out PLS, one needs to provide a matrix of spectroscopic data, with samples in rows (let’s call it \(X\), you’ll see why in a moment). Fortunately this data is available directly from the ChemoSpec object as Marzipan$data.2 One also needs to provide a matrix of the additional dependent data (let’s call it \(Y\)). It is critical that the order of rows in \(Y\) correspond to the order of rows in the matrix of spectroscopic data, \(X\).
Since we are working in R we know there are a lot of ways to do most tasks. Likely you will have the additional data in a spreadsheet, so let’s see how to bring that into the workspace. You’ll need samples in rows, and variables in columns. For your sanity and error-avoidance, you should include a header of variable names and the names of the samples in the first column. Save the spreadsheet as a csv file. I did these steps using the sugar and moisture data from the original paper. Read the file in as follows.


Y &lt;- read.csv("Marzipan.csv", header = TRUE)
str(Y)


'data.frame':   32 obs. of  3 variables:
 $ sample  : chr  "a1" "a2" "a3" "a4" ...
 $ sugar   : num  32.7 34.9 33.9 33.2 33.2 ...
 $ moisture: num  15 14.9 14.7 14.9 14.9 ...

The function we’ll be using wants a matrix as input, so convert the data frame that read.csv generates to a matrix. Note that we’ll select only the numeric variables on the fly, as unlike a data frame, a matrix can only be composed of one data type.


Y &lt;- as.matrix(Y[, c("sugar", "moisture")])
str(Y)


 num [1:32, 1:2] 32.7 34.9 33.9 33.2 33.2 ...
 - attr(*, "dimnames")=List of 2
  ..$ : NULL
  ..$ : chr [1:2] "sugar" "moisture"

Now we are ready to carry out PLS. Since we have a multivariate \(Y\), we need to use the appropriate function (use pls1_nipals if your \(Y\) matrix is univariate).


library("chemometrics")
pls_out &lt;- pls2_nipals(X = Marzipan$data, Y, a = 5)



And we’re done! Be sure to take a look at str(pls_out) to see what you got back from the calculation. For the next steps in evaluating your model, see section 3.3 in the chemometrics vignette.


Christensen, Jakob, Lars Nørgaard, Hanne Heimdal, Joan Grønkjær Pedersen, and Søren Balling Engelsen. 2004. “Rapid Spectroscopic Analysis of Marzipan-Comparative Instrumentation.” Journal of Near Infrared Spectroscopy 12 (1): 63–75. https://doi.org/10.1255/jnirs.408.


Filzmoser, Peter, and Kurt Varmuza. 2017. Chemometrics: Multivariate Statistical Analysis in Chemometrics. https://CRAN.R-project.org/package=chemometrics.


Mevik, Bjørn-Helge, Ron Wehrens, and Kristian Hovde Liland. 2020. Pls: Partial Least Squares and Principal Component Regression. https://CRAN.R-project.org/package=pls.


Varmuza, K., and P. Filzmoser. 2009. Introduction to Multivariate Statistical Analysis in Chemometrics. CRC Press.


I have converted the data from Matlab to a ChemoSpec object; if anyone wants to know how to do this let me know and I’ll put up a post on that process.↩︎
str(Marzipan) will show you the structure of the ChemoSpec object (or in general, any R object). The official definition of a ChemoSpec object can be seen via ?Spectra.

↩︎
</description>
      <distill:md5>16dcc7c021726ff718ce2eedc7e013e2</distill:md5>
      <category>R</category>
      <category>PLS</category>
      <category>ChemoSpec</category>
      <guid>https://chemospec.org/posts/2021-02-08-PLS</guid>
      <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
      <media:content url="https://chemospec.org/posts/2021-02-08-PLS/2021-02-08-PLS_files/figure-html5/showSpectra-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>GSOC Wrap Up</title>
      <dc:creator>Erick Oduniyi</dc:creator>
      <link>https://chemospec.org/posts/2020-09-08-GSOC-hyperSpec</link>
      <description>



Well, things have been busy lately! As reported back in May, I’ve been participating in Google Summer of Code which has now wrapped up. This was very rewarding for me, but today I want to share a guest post by Erick Oduniyi, the very talented student on the project. Bryan

Checking in from Kansas!
This past summer (2020) I had the amazing opportunity to participate in the Google Summer of Code (GSoC or GSOC). As stated on the the GSOC website, GSOC is a “global program focused on bringing more student developers into open source software development. Students work with an open-source organization on a 3-month programming project during their break from school.”
This was a particularly meaningful experience as it was my last undergraduate summer internship. I’m a senior studying computer engineering at the University of Kansas, and at the beginning of the summer I still didn’t feel super comfortable working on public (open-source) projects. So, I thought this program would help build my confidence as a computer and software engineer. Moreover:
I wanted to work with the R organization because that is my favorite programming language.
I wanted to work with r-hyperspec because I thought that would be the most impactful in terms of practicing project management and software ecosystem development.
In the process I hoped to:
Become proficient using Git/Github, including continuous integration
Become proficient in using Trello
Become proficient in using R
Become familiar with the spectroscopy community
Become inspired to code more
Become inspired to document and write more open source projects.
Become excited to collaborate more across various industrial, academic, and community domains.
And through a lot of hard work all of those things came to be! Truthfully, even though the summer project was successful there is still a lot of work to do:
Fortify hyperSpec for baseline with bridge packages
Fortify hyperSpec for EMSC with bridge packages
Fortify hyperSpec for matrixStats with bridge packages.
So, I’m excited to continue to work with the team! I think there are a ton of ideas I and the team have and hopefully we will get to explore them in deeper context. Speaking of the team, I have them to thank for an awesome GSOC 2020 experience. If you are interested in the journey that was the GSoC 2020 experience (perhaps you might be interested in trying the program next year), then please feel free to jump around here to get a feel for the things that I learned and how I worked with the r-hyperspec team this summer.
Best, E. Oduniyi



</description>
      <distill:md5>5af7c57706cc3e0acf2c7bced29b37f2</distill:md5>
      <category>R</category>
      <category>hyperSpec</category>
      <category>GSOC</category>
      <category>Guest Post</category>
      <guid>https://chemospec.org/posts/2020-09-08-GSOC-hyperSpec</guid>
      <pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Simulating Spectroscopic Data Part 1</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2020-06-28-Sim-Spec-Data-Pt1</link>
      <description>



It is well-recognized that one of the virtues of the R language is the extensive tools it provides for working with distributions. Functions exist to generate random number draws, determine quantiles, and examine the probability density and cumulative distribution curves that describe each distribution.
This toolbox gives one the ability to create simulated data sets for testing very easily. If you need a few random numbers from a Gaussian distribution then rnorm is your friend:


rnorm(3)


[1]  0.647767 -1.218571 -1.681820

Imagine you were developing a new technique to determine if two methods of manufacturing widgets produced widgets of the same mass.1 Even before the widgets were manufactured, you could test your code by simulating widget masses using rnorm:


widget_1_masses &lt;- rnorm(100, 5.0, 0.5) # mean mass 5.0
widget_2_masses &lt;- rnorm(100, 4.5, 0.5) # mean mass 4.5






Variations on this approach can be used to simulate spectral data sets.2 The information I will share here is accumulated knowledge. I have no formal training in the theory behind the issues discussed, just skills I have picked up in various places and by experimenting. If you see something that is wrong or needs clarification or elaboration, please use the comments to set me straight!
Peak Shapes
What peak shape is expected for a given type of spectroscopy? In principle this is based on the theory behind the method, either some quantum mechanical model or an approximation of it. For some methods, like NMR, this might be fairly straightforward, at least in simple systems. But the frequencies involved in some spectroscopies not too different from others, and coupling is observed. Two examples which “interfere” with each other are:
Electronic transitions in UV spectra which are broadened by interactions with vibrational states.
Vibrational transitions in IR spectroscopy (bonds stretching and bond angles bending in various ways) are coupled to electronic transitions.
After theoretical considerations, we should keep in mind that all spectroscopies have some sort of detector, electronic components and basic data processing that can affect peak shape. A CCD on a UV detector is one of the simpler situations. FT-IR has a mechanical interferometer, and the raw signal from both IR and NMR is Fourier-transformed prior to use. So there are not only theoretical issues to think about, but also engineering, instrument tuning, electrical engineering and mathematical issues to consider.
Even with myriad theoretical and practical considerations, a Gaussian curve is a good approximation to a simple peak, and more complex peaks can be built by summing Gaussian curves. If we want to simulate a simple peak with a Gaussian shape, we can use the dnorm function, which gives us the “density” of the distribution:


std_deviations &lt;- seq(-5, 5, length.out = 100)
Gaussian_1 &lt;- dnorm(std_deviations)
plot(std_deviations, Gaussian_1, type = "l",
  xlab = "standard deviations", ylab = "Gaussian Density")




If we want this to look more like a “real” peak, we can increase the x range and use x values with realistic frequency values. And if we want our spectrum to be more complex, we can add several of these curves together. Keep in mind that the area under the density curve is 1.0, and the peak width is determined by the value of argument sd (the standard deviation). For example if you want to simulate the UV spectrum of vanillin, which has maxima at about 230, 280 and 315 nm, one can do something along these lines:


wavelengths &lt;- seq(220, 350, by = 1.0)
Peak1 &lt;- dnorm(wavelengths, 230, 22)
Peak2 &lt;- dnorm(wavelengths, 280, 17)
Peak3 &lt;- dnorm(wavelengths, 315, 17)
Peaks123 &lt;- colSums(rbind(1.6 * Peak1, Peak2, Peak3))
plot(wavelengths, Peaks123, type = "l",
  xlab = "wavelengths (nm)", ylab = "arbitrary intensity")




The coefficient on Peak1 is needed to increase the contribution of that peak in order to better resemble the linked spectrum (note that the linked spectrum y-axis is \(log \epsilon\); we’re just going for a rough visual approximation).
It’s a simple, if tedious, task to add Gaussian curves in this manner to simulate a single spectrum. One can also create several different spectra, and then combine them in various ratios to create a data set representing samples composed of mixtures of compounds. UV spectra are tougher due to the vibrational coupling; NMR spectra are quite straightforward since we know the area of each magnetic environment in the structure (but we also have to deal with doublets etc.). If you plan to do a lot of this, take a look at the SpecHelpers package, which is designed to streamline these tasks.
A relatively minor exception to the typical Gaussian peak shape is NMR. Peaks in NMR are typically described as “Lorentzian”, which corresponds to the Cauchy distribution (Goldenberg 2016). This quick comparison shows that NMR peaks are expected to be less sharp and have fatter tails:


Gaussian_1 &lt;- dnorm(std_deviations)
Cauchy_1 &lt;- dcauchy(std_deviations)
plot(std_deviations, Gaussian_1, type = "l",
  xlab = "standard deviations", ylab = "density")
lines(std_deviations, Cauchy_1, col = "red")




Baselines
For many types of spectroscopies there is a need to correct the baseline when processing the data. But if you are simulating spectroscopic (or chromatographic) data, how can you introduce baseline anomalies? Such anomalies can take many forms, for instance a linear dependence on wavelength (i.e. a steadily rising baseline without curvature). But more often one sees complex rolling baseline issues.
Let’s play with introducing different types of baseline abberations. First, let’s create a set of three simple spectra. We’ll use a simple function to scale the set of spectra so the range is on the interval [0…1] for ease of further manipulations.


wavelengths &lt;- 200:800
Spec1 &lt;- dnorm(wavelengths, 425, 30)
Spec2 &lt;- dnorm(wavelengths, 550, 20) * 3 # boost the area
Spec3 &lt;- dnorm(wavelengths, 615, 15)
Spec123 &lt;- rbind(Spec1, Spec2, Spec3)
dim(Spec123) # matrix with samples in rows


[1]   3 601



scale01 &lt;- function(M) {
  # scales the range of the matrix to [0...1]
  mn &lt;- min(M)
  M &lt;- M - mn
  mx &lt;- max(M)
  M &lt;- M/mx
}



Here are the results; the dotted line is the sum of the three spectra, offset vertically for ease of comparison.


Spec123 &lt;- scale01(Spec123)
plot(wavelengths, Spec123[1,], col = "black", type = "l",
  xlab = "wavelength (nm)", ylab = "intensity",
  ylim = c(0, 1.3))
lines(wavelengths, Spec123[2,], col = "red")
lines(wavelengths, Spec123[3,], col = "blue")
lines(wavelengths, colSums(Spec123) + 0.2, lty = 2)




One clever way to introduce baseline anomalies is to use a Vandermonde matrix. This is a trick I learned while working with the team on the hyperSpec overhaul funded by GSOC.3 It’s easiest to explain by an example:


vander &lt;- function(x, order) outer(x, 0:order, `^`)
vdm &lt;- vander(wavelengths, 2)
dim(vdm)


[1] 601   3

vdm[1:5, 1:3]


     [,1] [,2]  [,3]
[1,]    1  200 40000
[2,]    1  201 40401
[3,]    1  202 40804
[4,]    1  203 41209
[5,]    1  204 41616

vdm &lt;- scale(vdm, center = FALSE, scale = c(1, 50, 2000))



Looking at the first few rows of vdm, you can see that the first column is a simple multiplier, in this case an identity vector. This can be viewed as an offset term.4 The second column contains the original wavelength values, in effect a linear term. The third column contains the square of the original wavelength values. If more terms had been requested, they would be the cubed values etc. In the code above we also scaled the columns of the matrix so that the influence of the linear and especially the squared terms don’t dominate the absolute values of the final result. Scaling does not affect the shape of the curves.
To use this Vandermonde matrix, we need another matrix which will function as a set of coefficients.


coefs &lt;- matrix(runif(nrow(Spec123) * 3), ncol = 3)
coefs


          [,1]       [,2]      [,3]
[1,] 0.7813370 0.42969147 0.3196207
[2,] 0.5727449 0.78276487 0.7124110
[3,] 0.6654965 0.06332212 0.6817806

If we multiply the coefficients by the tranposed Vandermonde matrix, we get back a set of offsets which are the rows of the Vandermonde matrix modified by the coefficients. We’ll scale things so that Spec123 and offsets are on the same overall scale and then further scale so that the spectra are not overwhelmed by the offsets in the next step.


offsets &lt;- coefs %*% t(vdm)
dim(offsets) # same dimensions as Spec123 above


[1]   3 601

offsets &lt;- scale01(offsets) * 0.1



These offsets can then be added to the original spectrum to obtain our spectra with a distorted baseline. Here we have summed the individual spectra. We have added a line based on extrapolating the first 20 points of the distorted data, which clearly shows the influence of the squared term.


FinalSpec1 &lt;- offsets + Spec123
plot(wavelengths, colSums(FinalSpec1), type = "l", col = "red",
  xlab = "wavelength (nm)", ylab = "intensity")
lines(wavelengths, colSums(Spec123))
fit &lt;- lm(colSums(FinalSpec1)[1:20] ~ wavelengths[1:20])
lines(wavelengths, fit$coef[2]*wavelengths + fit$coef[1],
  col = "red", lty = 2) # good ol' y = mx + b




The Vandermonde matrix approach works by creating offsets that are added to the original spectrum. However, it is limited to creating baseline distortions that generally increase at higher values. To create other types of distortions, you can use your imagination. For instance, you could reverse the order of the rows of offsets and/or use higher terms, scale a row, etc. One could also play with various polynomial functions to create the desired effect over the wavelength range of interest. For instance, the following code adds a piece of an inverted parabola to the original spectrum to simulate a baseline hump.


hump &lt;- -1*(15*(wavelengths - 450))^2 # piece of a parabola
hump &lt;- scale01(hump)
FinalSpec2 &lt;- hump * 0.1 + colSums(Spec123)
plot(wavelengths, FinalSpec2, type = "l",
  xlab = "wavelengths (nm)", ylab = "intensity")
lines(wavelengths, hump * 0.1, lty = 2) # trace the hump




In the plot, the dotted line traces out the value of hump * 0.1, the offset.
In the next post we’ll look at ways to introduce noise into simulated spectra.


Goldenberg, David P. 2016. Principles of NMR Spectroscopy: An Illustrated Guide. University Science Books.


Of course, this is simply the t-test.↩︎
For that matter, you can also simulate chromatograms using the methods we are about to show. It’s even possible to introduce tailing of a peak. For a function to do this, see the SpecHelpers package.↩︎
The work I’m showing here is based on original code in package hyperSpec by Claudia Belietes.↩︎
As a vector of 1’s it will have no effect on the calculations to come. However, you could multiply this column by a value to add an offset to your simulated spectra. This would be a means of simulating a steady electronic bias in an instrument’s raw data.

↩︎
</description>
      <distill:md5>d662d49aa7e0500a872a70c27bcce265</distill:md5>
      <category>R</category>
      <category>Simulated Data</category>
      <category>SpecHelpers</category>
      <category>Baseline</category>
      <guid>https://chemospec.org/posts/2020-06-28-Sim-Spec-Data-Pt1</guid>
      <pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate>
      <media:content url="https://chemospec.org/posts/2020-06-28-Sim-Spec-Data-Pt1/2020-06-28-Sim-Spec-Data-Pt1_files/figure-html5/widgetPlot-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Fortifying hyperSpec: Getting Ready for GSOC</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2020-05-07-GSOC-hyperSpec</link>
      <description>
hyperSpec is an R package for working with hyperspectral data sets. Hyperspectral data can take many forms, but a common application is a series of spectra collected over an x, y grid, for instance Raman imaging of medical specimens. hyperSpec was originally written by Claudia Beleites and she currently guides a core group of contributors.1
Claudia, regular hyperSpec contributor Roman Kiselev and myself have joined forces this summer in a Google Summer of Code project to fortify hyperSpec. We are pleased to report that the project was accepted by R-GSOC administrators, and, as of a few days ago, the excellent proposal written by Erick Oduniyi was approved by Google. Erick is a senior computer engineering major at Wichita State University in Kansas. Erick gravitates toward interdisciplinary projects. This, and his experience with R, Python and related skills gives him an excellent background for this project.
The focus of this project is to fortify the infrastructure of hyperSpec. Over the years, keeping hyperSpec up-to-date has grown a bit unwieldy. While to-do lists always evolve, the current interrelated goals include:
Distill2 hyperSpec: Prune hyperSpec back to it’s core functionality to keep it lightweight. Relocate portions, such as importing data, into their own dedicated packages.
Shield hyperSpec: Analyze the ecosystem of hyperSpec with an eye to reducing dependencies as much as possible and ensuring that necessary dependencies are the best choices. Avoid “re-inventing the wheel”, as long as the available “wheels” are computationally efficient and stable (code base and API).
Bridge hyperSpec: Having decided on how to reorganize hyperSpec and which dependencies are necessary and optimal, ensure that hyperSpec, the constellation of new sub-packages, and all dependencies are integrated efficiently. There are a number of data pre-processing and plotting functions that need to be streamlined and interfaced to external packages more consistently. Some portions may need substantial refactoring.
Addressing each of these goals will make hyperSpec much easier to maintain, less fragile, and easier for others to contribute. Every step will bring enhanced documentation and vignettes, along with new unit tests. Work will begin in earnest on June 1st, and we are looking forward to a very productive summer.
Finally, on behalf of all participants, let me just say how grateful we are to Google for establishing the GSOC program and for supporting Erick’s work this summer!
A little history for the curious: the hyperSpec and ChemoSpec packages were written around the same time, independent of each other (~2009). Eventually, Claudia and I became aware of each other’s work, and we have collaborated in ways large and small ever since (I like working with Claudia because I always learn from her!). We have jointly mentored GSOC students twice before. One side project is hyperChemoBridge, a small package that converts hyperSpec objects into Spectra objects (the native ChemoSpec format) and vice-versa.↩︎
The descriptors here are Erick’s clever choice of words.

↩︎
</description>
      <distill:md5>04c8be1699a6072c01211532f2fd4eb2</distill:md5>
      <category>R</category>
      <category>hyperSpec</category>
      <category>GSOC</category>
      <guid>https://chemospec.org/posts/2020-05-07-GSOC-hyperSpec</guid>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>ChemoSpecUtils Update</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2020-04-27-CSU-update</link>
      <description>
ChemoSpecUtils, a package that supports the common needs of ChemoSpec and ChemoSpec2D, has been updated to fix an unfortunate distance calculation error in version 0.4.38, released in January of this year. From the NEWS file for version 0.4.51:
Function rowDist, which supports a number of functions, was overhauled to address confusion in the documentation, and in my head, about distances vs. similarities. Also, different definitions found in the literature were documented more clearly. The Minkowski distance option was removed (ask if you want it back), code was cleaned up, documentation greatly improved, an example was added and unit tests were added. Plot scales were also corrected as necessary. Depending upon which distance option is chosen, this change affects hcaSpectra, plotSpectraDist, sampleDist and hcaScores in package ChemoSpec as well as hats_alignSpectra2D and hcaScores in package ChemoSpec2D.
This brings to mind a Karl Broman quote I think about frequently:

“Open source means everyone can see my stupid mistakes. Version control means everyone can see every stupid mistake I’ve ever made.”
– Karl Broman

Karl Broman quote source



</description>
      <distill:md5>5e41aa2ab0123e0ca67c846602b95645</distill:md5>
      <category>R</category>
      <category>ChemoSpecUtils</category>
      <guid>https://chemospec.org/posts/2020-04-27-CSU-update</guid>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Spectral Heatmaps</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2020-04-25-Heatmaps</link>
      <description>



Most everyone is familiar with heatmaps in a general way. It’s hard not to run into them. Let’s consider some variations:
A heatmap is a 2D array of rectangular cells colored by value. Generally, the rows and columns are ordered in some purposeful manner. These are very commonly encountered in microarrays for example.
An image is a type of heatmap in which the ordering of the rows and columns is defined spatially – it would not make sense to reorder them. This kind of data arises from the physical dimensions of a sensor, for instance the sensor on a digital camera or a raman microscope. An image might also arise by a decision to subset and present data in a “square” format. An example would be the topographic maps provided by the US government which cover a rectangular latitude/longitude range. This type of data can also be presented as a contour plot. See the examples in ?image for image and contour plots of the classic Maunga Whau volcano data, as well as an overlay of the contours on the image plot.
A chloropleth is a map with irregular geographic boundaries and regions colored by some value. These are typically used in presenting social or political data. A chloropleth is not really a heatmap but it is often mis-characterized as one.
These three types of plots are conceptually unified in that they require a 3D data set. In the case of the heatmap and the image, the underlying data are on a regular x, y grid of values; mathematically, a matrix. The row and column indices are mapped to the x, y values, and the matrix entries are the z values. A chloropleth can be thought of as a very warped matrix where the cells are not on a regular grid but instead a series of arbitrary connected paths, namely the geographic boundaries. There is a value inside each connected path (the z value), but naturally the specification of the paths requires a completely different data structure. An intermediate type would be the cartogram heatmap described by Wilke.
Heatmaps in Spectroscopy
The hmapSpectra function in ChemoSpec displays a heatmap to help you focus on which frequencies drive the separation of your samples.1 We’ll use the example from ?hmapSpectra which uses the built-in SrE.IR data set. This data set is a series of IR spectra of commercial Serenoa repens oils which are composed of mixtures of triglycerides and free fatty acids (see ?SrE.IR for more information). Thus the carbonyl region is of particular interest. The example narrows the frequency range to the carbonyl region for easy interpretation. Let’s look first at the spectra.
Note: rather than link every mention of a help page in this post, remember you can see all the documentation at this site.


library("ChemoSpec")
data(SrE.IR) # load the data set
# limit to the carbonyl region
IR &lt;- removeFreq(SrE.IR, rem.freq = SrE.IR$freq &gt; 1775 | SrE.IR$freq &lt; 1660)
plotSpectra(IR, which = 1:16, lab.pos = 1800)




The blue and green spectra are samples composed only of triglycerides, and hence the ester carbonyl is the primary feature. All other samples are clearly mixtures of ester and carboxylic acid stretching peaks. And now for the heatmap, using defaults:


res &lt;- hmapSpectra(IR)




In this default display, you’ll notice that the rows and column labels are indices to the underlying sample names and frequency list. This is not so helpful. The color scheme is not so exciting either. hmapSpectra uses the package seriation which in turn uses the heatmap.2 function in package gplots. Fortunately we can use the ... argument to pass additional arguments to heatmap.2 to get a much more useful plot.
Customizing the hmapSpectra Display


# Label samples and frequencies by passing arguments to heatmap.2
# Also make a few other nice plot adjustments
res &lt;- hmapSpectra(IR,
  col = heat.colors(5),
  row_labels = IR$names, col_labels = as.character(round(IR$freq)),
  margins = c(4, 6)
)




This is a lot nicer plot, since the rows are labeled with the sample names, and the columns with frequencies. Note that not every column is labeled, only every few frequencies. If you need the actual frequencies, which you probably will, they can be obtained from the returned object (res in this case; see the end of this post for an example).
Interpreting the Plot
How do we interpret this plot? This is a seriated heatmap, which means the rows and columns have been re-ordered according to some algorithm (more on this in a moment). The ordering puts the frequencies most important in distinguishing the samples in the upper left and lower right (the yellow regions). In the lower right corner, we see the two outlier samples TJ_OO and SV_EPO grouped together. On the frequency axis, we see that ester stretching peaks around 1740 \(\mathrm{cm}^1\) are characteristic for these samples. In the upper left corner, we see several samples grouped together, and associated with the fatty acid carboxylic acid peak around 1710 \(\mathrm{cm}^1\). From these two observations, we can conclude that these two peak ranges are most important in separating the samples. Of course, in this simple example using a small part of the spectrum, this answer was already clear by simple inspection. Using a simple/limited range of data helps us to be sure we understand what’s happening when we try a new technique.
Using a Different Distance Measure &amp; Seriation Method
The default data treatments for hmapSpectra are inherited from hmap in package seriation. The default distance between the samples is the Euclidean distance. The default seriation method is “OLO” or “optimal leaf ordering”. The full list of seriation methods is described in ?seriate. There are more than 20 options. As with the display details, we can change these defaults via the ... arguments. Let’s use the cosine distance (the same as the Pearson distance), and seriate using the Gruvaeus-Wainer algorithm (there’s a brief explanation of this algorithm at ?seriate).


cosine_dist &lt;- function(x) as.dist(1 - cor(t(x)))
res &lt;- hmapSpectra(IR,
  col = heat.colors(5),
  row_labels = IR$names, col_labels = as.character(round(IR$freq)),
  margins = c(4, 6),
  distfun = cosine_dist,
  method = "GW"
)




You can see that using different distance measures and seriation algorithms gives a rather different result: the ester “hot spots” which were in the lower right corner are now almost in the lower left corner. Which settings are best will depend on your data set, the goal of your analysis, and there are a lot of options from which to choose. The settings used here are simply for demonstration purposes, I make no claim these settings are appropriate!
Finally, if you want to capture the re-ordered frequencies, you can access them in the returned object:


round(IR$freq[res$colInd$order])


 [1] 1767 1765 1763 1761 1759 1757 1755 1753 1751 1749 1747 1745 1743
[14] 1741 1740 1738 1736 1734 1732 1730 1768 1774 1770 1772 1728 1726
[27] 1724 1722 1720 1718 1716 1714 1713 1711 1709 1707 1705 1703 1701
[40] 1699 1697 1695 1693 1691 1689 1687 1660 1664 1666 1678 1680 1686
[53] 1682 1676 1674 1672 1662 1668 1670 1684

Other functions in ChemoSpec that can help you explore which frequencies are important are plotLoadings, plot2Loadings and sPlotSpectra.

↩︎
</description>
      <distill:md5>582a34da4fe69d03b34df8b3af446130</distill:md5>
      <category>R</category>
      <category>Heatmap</category>
      <category>Seriation</category>
      <category>ChemoSpec</category>
      <guid>https://chemospec.org/posts/2020-04-25-Heatmaps</guid>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
      <media:content url="https://chemospec.org/posts/2020-04-25-Heatmaps/2020-04-25-Heatmaps_files/figure-html5/showSpectra-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Data Sharing in the Age of Coronavirus, Part 1</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2020-03-21-Data-Formats-Pt1</link>
      <description>



This is Part 1 of a series of posts about data formats for sharing spectroscopic data. Many folks are working from home due to a certain global pandemic. I hope you are all healthy and practicing proper social distancing!
Sharing data is intrinsic to any spectroscopic work. For many tasks, the data need never leave the instrument’s native format. Nowadays the data often goes immediately to some type of shared server, to be available for multiple users. So much of the time we don’t need to worry about format at all, especially if the acquisition software can do the chemometric analysis you need.
Increasingly however, publishers want all data deposited and documented somewhere in machine-readable, vendor-neutral form. This is one aspect of reproducible research, where all data and the scripts or steps needed to analyze them are provided electronically with every paper. Or, your data may be headed to one of the many databases out there, where specific formats are required for submission. And while most data acquisition softwares provide some analysis options, if you need to do serious chemometric analysis you likely need to get the data off the machine in a vendor-neutral form. So there are several reasons one should be familiar with the various means of sharing spectroscopic data.
Data sharing/exchange is admittedly a potentially mundane topic. After all, we just want to get on with the scientific question. However, it’s worth knowing something about the options and considering the future of the field. In general I’d say things are a bit of a mess with no clear path to a common format. This series of posts will cover several different vendor-neutral data sharing formats, their pros and cons and their future prospects.
ASCII Files
Almost all spectroscopic instruments have some means of exporting data as simple ASCII format files. For 1D data, these usually take the form of columns of wavelengths (or the equivalent) and some form of intensity values. There may or may not be metadata and/or headers in the file. The resolution of the data in the file is usually sufficient, but it can be as low as 8-bit precision. Simple inspection is usually enough to understand these files, and eventually, read them in with R or Python, since other than the metadata these files are simply x and y values in columns.
2D NMR data in ASCII format are a bit more tedious to decipher. Assuming we are talking about data that has been processed, there are choices to be made about ordering the data and no standardization is evident in the wild. Do you export the data by rows (F2 values at fixed F1 value), by columns (F1 values at fixed F2 value), or an entire matrix? Do you export in a format that mirrors how we typically look at the data, namely the lowest F1 values are first and the lowest F2 values last? 2D NMR is unique among 2D plots in not having 0,0 in any corner. Or do you export in an increasing order, as though you were starting from 0,0? While there are a lot of combinations possible, through trial-and-error one can determine how the data was exported. This is naturally easier if you have a reference spectrum for comparison. I can say from experience that this task is do-able but annoying. Some vendors also export hypercomplex data, in which there is a copy of the data that has been transformed only along F2 and a copy in which transformation has occurred on both dimensions.
In addition to deciphering how the data is stored in an exported ASCII file, one needs to keep in mind file size, because ASCII values are not compressed. If one is dealing with IR or UV-Vis data, the typically small number of data points means the files are not large, making ASCII export a good option. For 1D NMR data with typically &gt; 16K data points, the size of the files begins to matter a bit, especially if you have large collections of spectra, which are becoming increasingly common with autosamplers. With 2D NMR, spectra in ASCII format begin to take up some serious space, and the time needed to read in the data becomes noticable.
Pros &amp; Cons of the ASCII Format





Pros


Cons


Near-universal availability


Rarely any metadata


Human readible


Rarely any documentation




Slow to parse for large data sets




For 2D NMR, internal order must be deciphered


The Future of the ASCII Format
Because of it’s relative simplicity, and near-universal implementation in vendor software, ASCII formatted export files are here to stay.
JCAMP-DX Files
The History of JCAMP-DX Format
The JCAMP-DX format and standard began at a time when hard drive space was expensive and read/write/transmission errors by hardware were a real issue. This was way before the internet: we are talking about transferring data via telephone/modem, magnetic tape and simple OCR. Hence, three key concerns were to compress the data, to build in data integrity checks and to be flexible for future expansion. Two spectroscopists working with IR data, Robert McDonald and Paul Wilks Jr., published the first standard in 1988 (McDonald and Wilks 1988), with input from instrument manufacturers. From the begininng JCAMP-DX was a project of JCAMP, the Joint Committee on Atomic and Physical Data, a committee of the IUPAC. Refinements were published in 1991 (Grasselli 1991), support for NMR was added in 1993 (A. Davies and Lampen 1993), and MS in 1994 (Lampen et al. 1994) by which time the standard was at version 5 (Lampen et al. 1999). Extensions for CD (Woollett et al. 2012), ion mobility spectrometry (Baumbach et al. 2001) and electron magnetic resonance have been proposed (Cammack et al. 2006). Interestingly, there was also an attempt to describe structure (connectivity) using the format (Gasteiger et al. 1991). In 2001 a JCAMP-DX standard for NMR pulse sequences was published (A. N. Davies et al. 2001).
An Example
Another goal for the format was to have the format be both human and machine readible. The format is composed of metadata describing the data and then the compressed data. There are several compression formats possible; some are more human readible than others! Here is a simple example of a JCAMP-DX file containing part of an IR spectrum. The blue box contains the metadata, which is clearly human readible and indeed, most meanings are immediately obvious. The orange box contains the compressed data in the “DIFFDUP” format. In another post we might dissect how that works, but for now, we can clearly read the characters but they need to be translated into actual numerical values.

Pros &amp; Cons of the JCAMP-DX Format


Pros


Cons


Near-universal availability


Minimal compression by modern standards


Metadata human readible


Error checking makes parsing slow


Compression formats can be manually detangled for checking


Error checking probably no longer needed




Vendors do not always follow the standard exactly


Future of the JCAMP-DX Format
Because of its long history and universal availability, the JCAMP-DX format appears to be here for the long-haul in spite of its limitations. Future posts in this series will cover data sharing formats that may eventually replace JCAMP-DX.



Baumbach, JI, AN Davies, P Lampen, and H Schmidt. 2001. “JCAMP-DX. A Standard Format for the Exchange of Ion Mobility Spectrometry Data - (IUPAC recommendations 2001).” Pure and Applied Chemistry 73 (11): 1765–82. https://doi.org/10.1351/pac200173111765.


Cammack, R, Y Fann, RJ Lancashire, JP Maher, PS McIntyre, and R Morse. 2006. “JCAMP-DX for electron magnetic resonance(EMR).” Pure and Applied Chemistry 78 (3): 613–31. https://doi.org/10.1351/pac200678030613.


Davies, AN, and P Lampen. 1993. “JCAMP-DX for NMR.” Applied Spectroscopy 47 (8): 1093–99. https://doi.org/10.1366/0003702934067874.


Davies, Antony N., Jörg Lambert, Robert J. Lancashire, and Peter Lampen. 2001. “Guidelines for the Representation of Pulse Sequences for Solution-State Nuclear Magnetic Resonance Spectroscopy.” Pure and Applied Chemistry 73 (11): 1749–64.


Gasteiger, J., B. M. P. Hendricks, Hoever P., Jochum C., and Somberg H. 1991. “JCAMP-CS: A Standard Exchange Format for Chemical Structure Information in a Computer-Readible Form.” Applied Spectroscopy 45 (1): 4–11.


Grasselli, JG. 1991. “JCAMP-DX, A Standard Format for Exchange of Infrared-Spectra in Computer Readible Form.” Pure and Applied Chemistry 63 (12): 1781–92. https://doi.org/10.1351/pac199163121781.


Lampen, P, H Hillig, AN Davies, and M Linscheid. 1994. “JCAMP-DX for Mass Spectrometry.” Applied Spectroscopy 48 (12): 1545–52.


Lampen, P, J Lambert, RJ Lancashire, RS McDonald, PS McIntyre, DN Rutledge, T Frohlich, and AN Davies. 1999. “An Extension to the JCAMP-DX Standard File Format, JCAMP-DX V.5.01 (IUPAC Recommendations 1999).” Pure and Applied Chemistry 71 (8): 1549–56. https://doi.org/10.1351/pac199971081549.


McDonald, RS, and PA Wilks. 1988. “JCAMP-DX, A Standard Format for Exchange of Infrared-Spectra in Computer Readible Form.” Applied Spectroscopy 42 (1): 151–62. https://doi.org/10.1366/0003702884428734.


Woollett, Benjamin, Daniel Klose, Richard Cammack, Robert W. Janes, and B. A. Wallace. 2012. “JCAMP-DX for circular dichroism spectra and metadata (IUPAC Recommendations 2012).” Pure and Applied Chemistry 84 (10): 2171–82. https://doi.org/10.1351/PAC-REC-12-02-03.




</description>
      <distill:md5>fec322735150bb99032e1dc1124219d5</distill:md5>
      <category>Data Formats</category>
      <category>JCAMP-DX</category>
      <category>ASCII</category>
      <guid>https://chemospec.org/posts/2020-03-21-Data-Formats-Pt1</guid>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Aligning 2D NMR Spectra Part 3</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2020-03-04-NMR-Align-Pt3</link>
      <description>
This is Part 3 of a series on aligning 2D NMR, as implemented in the package ChemoSpec2D. Part 1 Part2
Let’s get to work. The function to carry out alignment is hats_alignSpectra2D. The arguments maxF1 and maxF2 define the space that will be considered as the two spectra are shifted relative to each other. The space potentially covered is -maxF1 to maxF1 and similarly for the F2 dimension. dist_method, thres and minimize refer to the objective function, as described in Part 1. In this example we will consider two spectra succcessfully aligned when we get below the threshold. When one shifts one spectrum relative to the other, part of the shifted spectrum gets cutoff and part of it is empty space. fill = "noise" instructs the function to fill the empty space with an estimate of the noise from the original spectrum. We’ll set plot = FALSE here because the output is extensive. I’ll provide sample plotting output in a moment.





library("ChemoSpec2D")
data(MUD2)
set.seed(123)





MUD2a &lt;- hats_alignSpectra2D(MUD2,
  maxF1 = 5, maxF2 = 5,
  dist_method = "euclidean", thres = 40, minimize = TRUE,
  fill = "noise",
  plot = FALSE)


[ChemoSpec2D] Processing row  1  of  9  from the guide tree:
[ChemoSpec2D] Starting alignment of sample(s) 7 
    with sample(s) 4 
[ChemoSpec2D] Best alignment is to shift F2 by  0  and F1 by  -1 

[ChemoSpec2D] Processing row  2  of  9  from the guide tree:
[ChemoSpec2D] Starting alignment of sample(s) 6 
    with sample(s) 3 
[ChemoSpec2D] Best alignment is to shift F2 by  0  and F1 by  -1 

[ChemoSpec2D] Processing row  3  of  9  from the guide tree:
[ChemoSpec2D] Starting alignment of sample(s) 5 
    with sample(s) 2 
[ChemoSpec2D] Best alignment is to shift F2 by  0  and F1 by  -1 

[ChemoSpec2D] Processing row  4  of  9  from the guide tree:
[ChemoSpec2D] Starting alignment of sample(s) 8 
    with sample(s) 1 
[ChemoSpec2D] Best alignment is to shift F2 by  0  and F1 by  -1 

[ChemoSpec2D] Processing row  5  of  9  from the guide tree:
[ChemoSpec2D] Starting alignment of sample(s) 1, 8 
    with sample(s) 9 
[ChemoSpec2D] Best alignment is to shift F2 by  2  and F1 by  1 

[ChemoSpec2D] Processing row  6  of  9  from the guide tree:
[ChemoSpec2D] Starting alignment of sample(s) 2, 5 
    with sample(s) 3, 6 
[ChemoSpec2D] Best alignment is to shift F2 by  2  and F1 by  0 

[ChemoSpec2D] Processing row  7  of  9  from the guide tree:
[ChemoSpec2D] Starting alignment of sample(s) 4, 7 
    with sample(s) 10 
[ChemoSpec2D] Best alignment is to shift F2 by  0  and F1 by  3 

[ChemoSpec2D] Processing row  8  of  9  from the guide tree:
[ChemoSpec2D] Starting alignment of sample(s) 2, 3, 5, 6 
    with sample(s) 1, 8, 9 
[ChemoSpec2D] Best alignment is to shift F2 by  0  and F1 by  3 

[ChemoSpec2D] Processing row  9  of  9  from the guide tree:
[ChemoSpec2D] Starting alignment of sample(s) 1, 2, 3, 5, 6, 8, 9 
    with sample(s) 4, 7, 10 
[ChemoSpec2D] Best alignment is to shift F2 by  -5  and F1 by  0 

[ChemoSpec2D] Alignment steps and results:
       Ref                Mask F2shift F1shift
1        4                   7       0      -1
2        3                   6       0      -1
3        2                   5       0      -1
4        1                   8       0      -1
5        9                1, 8       2       1
6     3, 6                2, 5       2       0
7       10                4, 7       0       3
8  1, 8, 9          2, 3, 5, 6       0       3
9 4, 7, 10 1, 2, 3, 5, 6, 8, 9      -5       0

As the alignment proceeds, updates from the function are prefixed with [ChemoSpec2D]. In the first step we get a message that row 1 of 9 of the guide tree is being processed, in which sample 7 is being aligned with sample 4. The guide tree is shown below. One can see that samples 7 and 4 are very similar, so they are aligned first. If you inspect the output above, you can see that the four most similar pairs of spectra are aligned first, followed by groups of spectra according to similarity. For each alignment the needed shifts are reported. The last part of the output is a summary of all the alignments carried out. Note that the vertical scale on the guide tree is the same as the scale on the sampleDist plot in Part 1 (using the Euclidean distance).

Diagnostics on Space
To save space, I suppressed the plotting of the results. However, there are plots! In fact there is a set of plots for each alignment step. Here are two of the plots produced if plot = TRUE; these deal with the X-Space which is the search space (the terminology comes from the mlrMBO package which is designed to handle many types of optimization). This plot is for Step 7. The upper plot shows the search space. Axis x1 corresponds to the F1 dimension, and axis x2 the F2 dimension. The red squares represent the initial experimental design, using the results from the objective function. The blue circles represent additional points added as the search proceeds. These represent new points on the response surface defined by the surrogate function (see Part 2 for background). The orange diamond is the best alignment, which in this case has no shift along F2 but a three data point shift along F1; this corresponds to the output above. The green triangle is the last position tested.
The lower plot represents the progress of the search over time. Axis “dob” stands for “date of birth” which is basically the time index of when the test point was added.

Diagnostics on the Objective Function
This second set of plots deals with what mlrMBO considers the Y-Space, which concerns the values of the objective function. The top plot is a histogram of the distance (objective function) values; in this case most of them were pretty bad (high, meaning a larger distance between the spectra). The middle plot is the value of the distance over time (dob). In this example the optimal alignment is found at dob = 4, but there is no particular significance to when the optimum is found. The lower plot shows the expected improvement (ei) at each dob. It is lowest when the optimum has been found. For more details about what’s going on under the hood, see the Arxiv paper.

The Aligned Spectra
Did this process work? This final plot shows that it did. Let’s be clear that the task here was not terribly hard: MUD2 is an artificial example in which the shifts are pretty modest and global in nature. But still, it’s satisfying. I welcome everyone to give hats_alignSpectra2D a try and report any problems or suggestions.


mylvls &lt;- seq(0, 30, length.out = 10)
plotSpectra2D(MUD2a, which = c(1, 6), showGrid = TRUE,
  lvls = LofL(mylvls, 2),
  cols = LofC(c("red", "black"), 2, length(mylvls), 2),
  main = "Aligned MUD2 Spectra 1 &amp; 6")







</description>
      <distill:md5>20f89f00b09de7eba09bc32ede5d9076</distill:md5>
      <category>R</category>
      <category>ChemoSpec2D</category>
      <category>Alignment</category>
      <category>NMR</category>
      <guid>https://chemospec.org/posts/2020-03-04-NMR-Align-Pt3</guid>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      <media:content url="https://chemospec.org/posts/2020-03-04-NMR-Align-Pt3/2020-03-04-NMR-Align-Pt3_files/figure-html5/plotMUD2a-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>Aligning 2D NMR Spectra Part 2</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2020-03-02-NMR-Align-Pt2</link>
      <description>
This is Part 2 of a series on aligning 2D NMR, as implemented in the package ChemoSpec2D. Part 1 Part 3
The HATS-PR Algorithm
In Part 1 I briefly mentioned that we would be using the HATS-PR algorithm of Robinette et al. (Robinette et al. 2011). I also discussed the choice of objective function which is used to report on the quality of the alignment. HATS-PR stands for “Hierachical Alignment of Two-Dimensional Spectra - Pattern Recognition”. In ChemoSpec2D the algorithm is implemented in the hats_alignSpectra2D function. Here are the major steps of the HATS-PR algorithm:
Contruct a guide tree using hierarchical clustering (HCA): compute the distance between the spectra, and use these distances to construct a dendrogram (the guide tree). As the name suggests, this tree is used to guide the alignment. The most similar spectra are aligned first, then the next most similar, and so on. In later rounds one applies the alignment procedure to sets of spectra that have already been aligned. In Robinette et al. they use the Pearson correlation coefficient as the distance measure. In ChemoSpec2D you can choose from a number of distance measures. I encourage you to experiment with the choices and see how they affect the alignment process for your data sets.
For each alignment event, check the alignment using the objective function, which recall is a distance measure. If the objective function is below the threshold, no alignment is needed (“below” assumes we are minimizing the objective function, but we might also be maximizing and hence trying to exceed the threshold). If alignment is necessary, move one of the spectra relative to the other in some fashion, checking each new postion with the objective function until the best alignment is found. This is an exercise in optimization.
Finding the Optimal Alignment
The heart of the task is in the phrase in some fashion. At one extreme, one can imagine holding one spectrum fixed, and sliding the other spectrum left and right, up and down, over some range of values – essentially a grid of data points. At each position on the virtual grid, evaluate the objective function and keep track of the results. This will always find the answer, but such a brute force search will be very time-consuming and undesirable, especially if the search space is large. Alternatively, do something more efficient! Robinette et al. use a “simple gradient ascent” approach, but there is a vast literature on optimization strategies that we can consider. In ChemoSpec2D we use a machine learning approach (details next), but the function is written in such a way that one can add other optimization approaches seamlessly. Anything is better than a brute force approach.
Optimizing with mlrMBO
The name mlrMBO comes from “machine learning with R model-based optimization.” mlrMBO is a powerful and flexible package for general purpose optimization, especially in the cases where the objective function is computationally expensive. There is a nice introductory vignette.
The basic steps in the model-based optimization using mlrMBO as implemented in hats_alignSpectra2D in package ChemoSpec2D are as follows:
Define your objective function. Our choice of the Euclidean distance was described in Part 1, along with other options. Most distance measures are not computationally expensive in terms of code. However, the huge number of data points in a typical 2D NMR spectrum bogs things down considerably. The approach taken in model-based optimation mitigates this to a great deal, since the objective function is only used for the initial response surface.
Generate an “initial design”, by which we mean a strategy to search the possible optimization space. hats_alignSpectra2D takes arguments maxF1 and maxF2 which define the space that will be considered as the two spectra are shifted relative to each other. The space potentially covered is -maxF1 to maxF1 and similarly for the F2 dimension. We take advantage of concepts from the design of experiments field, and use the lhs package to generate a Latin Hypercube Sample of our space.
The sample points selected by lhs are evaluated using the objective function.
The values of the objective function at the sample points are used to create a surrogate model, essentially a response surface. The key here is that the surrogate model is computationally fast and will stand in for the actual objective function during the optimization. mlrMBO provides many options for the surrogate model. For hats_alignSpectra2D we use a response surface based on kriging, which is a means of interpolating values that was originally developed in the geospatial statistics world.
New samples points are suggested by the kriging algorithm, evaluated using the surrogate function, and used to update (improve) the model. Each iteration improves the quality of the model.
After reaching the designated threshold or the number of iterations specified, the best answer is returned. In this case the best answer is the optimal shift of one spectrum relative to the other, in each dimension.
Other Details
In addition to the differences noted above, the implementation of HATS-PR in ChemoSpec2D carries out only global alignment. The algorithm described by Robinette et al. includes local alignment steps which I have not implemented. Local alignment is a possible future addition.
Configure Your Workspace
If you are going to actually execute the code here (as opposed to just reading along), you’ll need the development version of ChemoSpec2D (I improved some of the plots that track the alignment progress since the last CRAN release). And you’ll need certain packages. Here are the steps to install everything:


chooseCRANmirror() # choose a CRAN mirror
install.packages("remotes")
library("remotes")
# devel branch -- you need 0.4.156 or higher
install_github(repo = "bryanhanson/ChemoSpec2D@devel")
library("ChemoSpec2D")
# other packages needed
install.packages("mlrMBO") # will also install mlr, smoof, ParamHelpers
install.packages("lhs")



Now you are ready for the main event! Part 3



Robinette, Steven L., Ramadan Ajredini, Hasan Rasheed, Abdulrahman Zeinomar, Frank C. Schroeder, Aaron T. Dossey, and Arthur S. Edison. 2011. “Hierarchical Alignment and Full Resolution Pattern Recognition of 2d NMR Spectra: Application to Nematode Chemical Ecology.” Analytical Chemistry 83 (5): 1649–57. https://doi.org/10.1021/ac102724x.




</description>
      <distill:md5>1bdddf12c5378cd2706698cf63405084</distill:md5>
      <category>R</category>
      <category>ChemoSpec2D</category>
      <category>Alignment</category>
      <category>NMR</category>
      <guid>https://chemospec.org/posts/2020-03-02-NMR-Align-Pt2</guid>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Aligning 2D NMR Spectra Part 1</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2020-02-20-NMR-Align-Pt1</link>
      <description>
In this series of posts, I’ll discuss the alignment process for the case of 2D NMR, as implemented in the package ChemoSpec2D. This is Part 1. Part 2. Part 3.

In one-dimensional \(^1\)H NMR spectroscopy, particularly biomolecular NMR, it is frequently necessary to align spectra before chemometric or metabolomics analysis. Poor alignment arises largely from pH and ionic strength induced shifts in aqueous samples. There are a number of published alignment algorithms for the one-dimensional case. The same issue presumably exists for 2D NMR spectra, but alignment options are limited. Instead, for 2D NMR people often work with tables of peaks. Creating these tables is an extra step and decisions about what to include may leave useful information behind.
No doubt you’ve compared two spectra by overlaying them on the screen, or printing them out, placing them on top of each other, and holding them up to the light. Conceptually, one can “align” spectra by a similar method: just slide one of the pieces of paper up/down and left/right until the spectra are optimally aligned. But how would one do this algorithmically? A literature searched turned up only a few publications on this topic. Among these, there was only one that I felt I could implement using the description in the paper: the HATS-PR algorithm of Robinette et al. (Robinette et al. 2011).
We’ll discuss the HATS algorithm in a future post. As a first step however, we need to consider how we know when two spectra are properly aligned. Visual inspection won’t work, as we will encounter cases where peaks in one region align, but only at the expense of peaks in another region. How would we rank such cases? To automate this process, we need to use an objective function, basically some kind of equation, that we evaluate as we explore the alignment space. A simple but effective option is to compute the distance between the two spectra. This is done by concatenating each row of the 2D spectra to give a long vector of intensities. The distance between these vectors can then be computed using any of the standard distance definitions. Let’s illustrate, starting by taking a look at some mis-aligned data. ChemoSpec2D contains a mis-aligned data set, MUD2, for just this purpose. Here are two spectra from MUD2; note we are using the new convenience functions LofC and LofL to make it easy to overlay the spectra.





library("ChemoSpec2D")
data(MUD2)
mylvls &lt;- seq(0, 30, length.out = 10)
plotSpectra2D(MUD2, which = c(1, 6), showGrid = TRUE,
  lvls = LofL(mylvls, 2),
  cols = LofC(c("red", "black"), 2, length(mylvls), 2),
  main = "MUD2 Spectra 1 &amp; 6")




The function sampleDist allows us to compute the distance between every pair of spectra in the MUD2 data set, and present the results as a heat map. Here are the results using cosine as the distance measure.


cos_dist &lt;- sampleDist(MUD2, method = "cosine",
  main = "Cosine Distance")




The actual numerical values are in cos_dist, a matrix. Looking at the heatmap, there are some modest differences among the spectra. However, if one looks at the scale, cosine distances are only defined on [-1 … 1]. While the cosine distance is popular in many spectroscopic contexts, it’s not the best objective function for our purpose because there is little absolute difference between -1 and 1 (and for MUD2 the absolute differences are even smaller, as the range is only 0, 0.99). This limited range affects the alignment process in a subtle way that we won’t cover here (alignment is still successful, however).
Let’s consider instead the Euclidean distance.


eu_dist &lt;- sampleDist(MUD2, method = "euclidean",
  main = "Euclidean Distance")




It turns of that the Euclidean distance gives a wider span of distances, which will serve us well in the next steps. Here, the range is roughly 80, 150. Note that in this plot the distance between identical spectra is zero, plotted as a white squares along the diagonal. When we used cosine as the distance, identical spectra were perfectly correlated and hence the diagonal in that plot was red.
In the next post I’ll discuss the general flow of the HATS algorithm, and how to carry it out using ChemoSpec2D.



Robinette, Steven L., Ramadan Ajredini, Hasan Rasheed, Abdulrahman Zeinomar, Frank C. Schroeder, Aaron T. Dossey, and Arthur S. Edison. 2011. “Hierarchical Alignment and Full Resolution Pattern Recognition of 2d NMR Spectra: Application to Nematode Chemical Ecology.” Analytical Chemistry 83 (5): 1649–57. https://doi.org/10.1021/ac102724x.




</description>
      <distill:md5>6ce625f3fdd6a47501f08c137dfdef22</distill:md5>
      <category>ChemoSpec</category>
      <category>R</category>
      <category>Alignment</category>
      <category>NMR</category>
      <guid>https://chemospec.org/posts/2020-02-20-NMR-Align-Pt1</guid>
      <pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate>
      <media:content url="https://chemospec.org/posts/2020-02-20-NMR-Align-Pt1/2020-02-20-NMR-Align-Pt1_files/figure-html5/MUD2-1.png" medium="image" type="image/png" width="1248" height="768"/>
    </item>
    <item>
      <title>ChemoSpec2D Update</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2020-02-19-CS2D-update</link>
      <description>
I’m pleased to announce that ChemoSpec2D, a package for exploratory data analysis of 2D NMR spectra, has been updated on CRAN and is coming to a mirror near you. Barring user reports to the contrary, I feel like the package has pretty much stabilized and is pretty robust. The main area for future expansion is to add additional data import routines. Please feel free to ask about your specific use case!
The most noteworthy user-facing improvements are:
Function import2DSpectra can now handle JCAMP-DX files, Bruker files exported via the TopSpin “totxt” command, and JEOL spectra exported as “generic ascii”. The design allows additional formats to be added if I have test files to play with (hint hint).
files2Spectra2DObject gains a new argument allowSloppy. This experimental feature will allow one to import data sets that do not have the same dimensions. The intent here is to deal with data sets where the number of points in each dimension is similar but not identical. Additional functions will be needed to handle this kind of data. See the documentation for details.
files2Spectra2DObject has also been modified to allow arguments to be passed to list.files and readJDX. This means for instance you can specify a path other than the current working directory, and have the function recurse through sub-directories. This brings files2Spectra2DObject into line with ChemoSpec::files2SpectraObject.
Function hats_alignSpectra2D gains new arguments dist_method and maximize which allows the user to pass their choice of distance measure through to the objective function used to evaluate the overlap of the spectra. This greatly improves the quality of the alignment.
Plotting is simplified with the addition of two new functions to create Lists of Colors, LofC and Lists of Levels, LofL.
The basic color scheme for contours was updated to use a perceptually consistent low/blue -&gt; high/red scheme, based on the principles in the colorspace package. The color-handling infrastructure was also changed to allow easy introduction of different color schemes in the future, though the user cannot yet make changes on the fly.
In addition, a number of small bugs and annoyances were taken care of, arguments tweaked and documentation improved and expanded. Several functions were rebuilt to make them more robust.
Please see the package website for the full changelog and all documentation.



</description>
      <distill:md5>b462b80a96e4eab16aa304c4a9a6773e</distill:md5>
      <category>R</category>
      <category>ChemoSpec2D</category>
      <guid>https://chemospec.org/posts/2020-02-19-CS2D-update</guid>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Exploring Github Topics</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2020-01-25-GH-Topics</link>
      <description>
As the code driving FOSS for Spectroscopy has matured, I began to think about how to explore Github in a systematic way for additional repositories with tools for spectroscopy. It turns out that a Github repo can have topics assigned to it, and you can use the Github API to search them. Wait, what? I didn’t know one could add topics to a repo, even though there is a little invite right there under the repo name:

Naturally I turned to StackOverflow to find out how to do this, and quickly encountered this question. It was asked when the topics feature was new, so one needs to do things just a bit differently now, but there is a way forward.
Before we get to implementation, let’s think about limitations:
This will only find repositories where topics have been set. I don’t know how broadly people use this feature, I had missed it when it was added.
Github topics are essentially tags with a controlled vocabulary, so for the best results you’ll need to manually explore the tags and then use these as your search terms.
The Github API only returns 30 results at a time for most types of queries. For our purposes this probably doesn’t matter much. The documentation explains how to iterate to get all possible results.
The Github API also limits the number of queries you can make to 60/hr unless you authenticate, in which case the limit goes to 6000/hr.
Let’s get to it! First, create a Github access token on your local machine using the instructions in this gist. Next, load the needed libraries:





set.seed(123)
library("httr")
library("knitr")
library("kableExtra")



Specify your desired search terms, and create a list structure to hold the results:


search_terms &lt;- c("NMR", "infrared", "raman", "ultraviolet", "visible", "XRF", "spectroscopy")
results &lt;- list()



Create the string needed to access the Github API, then GET the results, and stash them in the list we created:


nt &lt;- length(search_terms) # nt = no. of search terms
for (i in 1:nt) {
  search_string &lt;- paste0("https://api.github.com/search/repositories?q=topic:", search_terms[i])
  request &lt;- GET(search_string, config(token = github_token))
  stop_for_status(request) # converts http errors to R errors or warnings
  results[[i]] &lt;- content(request)
}
names(results) &lt;- search_terms



Figure out how many results we have found, set up a data frame and then put the results into the table. The i, j, and k counters required a little experimentation to get right, as content(request) returns a deeply nested list and only certain items are desired.


nr &lt;- 0L # nr = no. of responses
for (i in 1:nt) { # compute total number of results/items found
  nr &lt;- nr + length(results[[i]]$items)
}

DF &lt;- data.frame(term = rep(NA_character_, nr),
  repo_name = rep(NA_character_, nr),
  repo_url = rep(NA_character_, nr),
  stringsAsFactors = FALSE)

k &lt;- 1L
for (i in 1:nt) {
  ni &lt;- length(results[[i]]$items) # ni = no. of items
  for (j in 1:ni) {
    DF$term[k] &lt;- names(results)[[i]]
    DF$repo_name[k] &lt;- results[[i]]$items[[j]]$name
    DF$repo_url[k] &lt;- results[[i]]$items[[j]]$html_url
    k &lt;- k + 1L
  }
}
# remove duplicated repos which result when repos have several of our
# search terms of interest.
DF &lt;- DF[-which(duplicated(DF$repo_name)),]



Now put it all in a table we can inspect manually, send to a web page so it’s clickable, or potentially write it out as a csv (If you want this as a csv you should probably write the results out a bit differently). In this case I want the results as a table in web page so I can click the repo links and go straight to them.


namelink &lt;- paste0("[", DF$repo_name, "](", DF$repo_url, ")")
DF2 &lt;- data.frame(DF$term, namelink, stringsAsFactors = FALSE)
names(DF2) &lt;- c("Search Term", "Link to Repo")



We’ll show just 10 random rows as an example:


keep &lt;- sample(1:nrow(DF2), 10)
options(knitr.kable.NA = '')
kable(DF2[keep, ]) %&gt;%
  kable_styling(c("striped", "bordered"))







Search Term


Link to Repo


31


infrared


pycroscopy


79


ultraviolet


woudc-data-registry


51


infrared


ir-repeater


14


NMR


spectra-data


67


raman


Raman-spectra


42


infrared


PrecIR


50


infrared


esp32-room-control-panel


118


spectroscopy


LiveViewLegacy


43


infrared


arduino-primo-tutorials


101


XRF


web_geochemistry

Obviously, these results must be inspected carefully as terms like “infrared” will pick up projects that deal with infrared remote control of robots and so forth. As far as my case goes, I have a lot of new material to look through…
A complete .Rmd file that carries out the search described above, and has a few enhancements, can be found at this gist.



</description>
      <distill:md5>a638712775b0267bdaa3da986c025587</distill:md5>
      <category>R</category>
      <category>Github</category>
      <guid>https://chemospec.org/posts/2020-01-25-GH-Topics</guid>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>ChemoSpec Update</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2020-01-24-CS-update</link>
      <description>
ChemoSpec has just been updated to version 5.2.12, and should be available on the mirrors shortly.
The most significant user-facing changes are actually in the update to ChemoSpecUtils from a few days ago. In addition, the following documentation changes were made:
Added documentation for updateGroups which has been in ChemoSpecUtils for a while but effectively hidden from users of ChemoSpec.
Fixed the example in mclustSpectra which had an error and used data that was not a good illustration.



</description>
      <distill:md5>b5017a15989613e60afd88bf95807533</distill:md5>
      <category>R</category>
      <category>ChemoSpec</category>
      <guid>https://chemospec.org/posts/2020-01-24-CS-update</guid>
      <pubDate>Fri, 24 Jan 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>ChemoSpecUtils Update</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2020-01-22-CSU-update</link>
      <description>
ChemoSpecUtils, a package that supports the common needs of ChemoSpec and ChemoSpec2D, has been updated on CRAN and is coming to a mirror near you. Noteworthy changes:
There are new color options available in addition to the auto color scheme used during data importing. These should be useful to normal-vision individuals when there are a lot of categories. The auto option remains the default to avoid breaking anyone’s code. All the built-in color schemes are shown below. They can be used in any of the import functions in either package. The code used to make the figure below is in ?colorSymbol. Note: you probably should get the devel version to ChemoSpec in order to see the documentation about how to use the new colors.
The function removeFreq in ChemoSpec now accepts a formula for the specification of the frequencies to remove. This brings it in line with the corresponding function in ChemoSpec2D. This should be a lot easier to use.
The function sampleDist is now available and replaces sampleDistSpectra. Again the functions in the two overlying packages are essentially as similar as they can be.
This version is compatible with the upcoming release of R 4.0.






</description>
      <distill:md5>a9333887ebeb6d2b0e83e6745fc62b6d</distill:md5>
      <category>R</category>
      <category>ChemoSpecUtils</category>
      <guid>https://chemospec.org/posts/2020-01-22-CSU-update</guid>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      <media:content url="https://chemospec.org/posts/2020-01-22-CSU-update/2020-01-22-CSU-update_files/figure-html5/colors-1.png" medium="image" type="image/png" width="1248" height="1344"/>
    </item>
    <item>
      <title>FOSS for Spectroscopy Update</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2020-01-22-F4S-update</link>
      <description>
FOSS for Spectroscopy has had a significant update! It’s really quite surprising how many projects are out there. There is a lot of variety and not too much overlap.
After a lot of wrestling with Github access issues, the Status column in the table now gives the date of the most recent update to the project that I can find in an automated way.
The Notes column is now called Focus and reflects the focus of the projects as far as I can determine things. I’m using a more-or-less controlled vocabulary here, so sorting on the Focus column should bring related projects together.
The number of entries is greatly expanded (and I have more in the hopper).
The page is now automatically updated weekly, which will keep the links and dates fresh.
As always, I welcome your feedback in any form. You can use the comments below, or if you have additions/corrections to the page itself, there is info there about how to submit updates.



</description>
      <distill:md5>ae7b996e0eb7667f41f47c39f9d8e3b7</distill:md5>
      <category>R</category>
      <category>Python</category>
      <guid>https://chemospec.org/posts/2020-01-22-F4S-update</guid>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>readJDX Overhaul</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2020-01-02-readJDX-update</link>
      <description>
readJDX reads files in the JCAMP-DX format used in the field of spectroscopy. A recent overhaul has made it much more robust, and as such the version is now at 0.4.29.1 Most of the changes were internal, but three important user-facing changes are:
improved documentation
the addition of more vignettes
improved output when debug &gt; 0
2D NMR files are now handled
You can see more about the package here. As always, if you use the package and have troubles, please file an issue. The JCAMP-DX standard is challenging and vendors have a lot of flexibility, so please do share any problematic files you encounter.
The current version also includes changes in an unreleased version (0.3.372) in which several bugs were squashed.

↩︎
</description>
      <distill:md5>e94bcef272f4f45c8f6e166a60c89398</distill:md5>
      <category>R</category>
      <category>readJDX</category>
      <category>Data Formats</category>
      <guid>https://chemospec.org/posts/2020-01-02-readJDX-update</guid>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>FOSS for Spectroscopy</title>
      <dc:creator>Bryan Hanson</dc:creator>
      <link>https://chemospec.org/posts/2020-01-01-Intro-F4S</link>
      <description>A Collection of Free &amp; Open Source Spectroscopy Resources</description>
      <category>R</category>
      <category>Python</category>
      <guid>https://chemospec.org/posts/2020-01-01-Intro-F4S</guid>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
